// $ANTLR 3.2 Sep 23, 2009 12:02:23 GrammarShellForMancoosi.g 2011-01-19 15:38:37

	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
public class GrammarShellForMancoosiParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "SHARP", "EXCL", "LSBRACK", "DQUOTE", "EQU", "RSBRACK", "AND", "GREAT", "PATHNULL", "NUMBER", "GREATAND", "MINUS", "OR", "PATHEMACSINST", "PATHEMACSREM", "DMINUS", "PATHGCONFSCH", "PATHOLDSCHEMA", "UNDERSCORE", "AP", "PATHCOMPYTH", "VBAR", "PSINGLE", "TILDE", "SLASH", "BSLASH", "LGRAF", "RGRAF", "PATHMIME", "PATHSUID", "COLON", "PATHSS", "DOT", "PATHP", "LPAR", "RPAR", "DLESS", "PATHXWINDOW", "PATHXMANAGER", "PATHCONFMOD", "PATHDOCID", "PATHPACK", "PATHKVERS", "PATHSCRIPT", "LESS", "DGREAT", "LESSAND", "DLESSDASH", "LESSGREAT", "ANDGREAT", "CLOBBER", "DSEMI", "NOTEQU", "AMPERSAND", "PATHREL", "PATH", "VAR", "VARINPUT", "VARQMARK", "VARDOLLAR", "VAREXCL", "VARSTAR", "VARAT", "VARHOME", "VARPATH", "VARPS", "ID", "DIGIT", "QMARK", "DDOT", "COMMENT", "BLANKLINE", "NOTNEWLINE", "WS", "'\\n'", "'if'", "'configure'", "'which'", "'update-desktop-database'", "';'", "'then'", "'q'", "'fi'", "'remove'", "'install-docs'", "'i'", "'upgrade'", "'r'", "'x'", "'update-gconf-defaults'", "'gconf-schemas'", "'register'", "'unregister'", "'purge'", "'OLD_DIR'", "'SCHEMA_FILES'", "'d'", "'$OLD_DIR'", "'for'", "'SCHEMA'", "'in'", "'$SCHEMA_FILES'", "'do'", "'rm'", "'f'", "'done'", "'rmdir'", "'p'", "'ignore-fail-on-non-empty'", "'update-icon-caches'", "'install-info'", "'quiet'", "'update-rc.d'", "'n'", "'dh_action'", "'restart'", "'else'", "'start'", "'invoke-rc.d'", "'$_dh_action'", "'stop'", "'ldconfig'", "'inst'", "'$inst'", "'chmod'", "'a+x'", "'update-menus'", "'a-x'", "'e'", "'depmod'", "'a'", "'F'", "'true'", "'PYTHON'", "'$PYTHON'", "'DIRLIST'", "'$DIRLIST'", "'$i'", "'dpkg'", "'L'", "'awk'", "'.py'", "'$'", "'print'", "'c'", "'o'", "'xargs'", "'scrollkeeper-update'", "'ordcat'", "'update-catalog'", "'add'", "'super'", "'update-mime-database'", "'update-mime'", "'suidregister'", "'s'", "'elif'", "'chown'", "'suidunregister'", "'install'", "'md5sum'", "'sed'", "'*'", "'dpkg-query'", "'W'", "'Conffiles'", "'echo'", "'Preserving'", "'user'", "'changes'", "'to'", "'mv'", "'while'", "'read'", "'line'", "'set'", "'$line'", "'dir'", "'mode'", "'group'", "'$dir'", "'mkdir'", "'$user'", "'$group'", "'$mode'", "'DATA'", "'update-alternatives'", "'x-window-manager'", "'slave'", "'x-window-manager.1.gz'", "'update-fonts-dir'", "'db_purge'", "'function'", "'until'", "'case'", "'esac'", "'time'", "'HOME'", "'PATH'", "'PS'", "'update-icon-cache'", "'catalog'", "'old'", "'py'"
    };
    public static final int LESSAND=50;
    public static final int ANDGREAT=53;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int PATHDOCID=44;
    public static final int T__160=160;
    public static final int DQUOTE=7;
    public static final int EXCL=5;
    public static final int DSEMI=55;
    public static final int T__167=167;
    public static final int VAREXCL=64;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int VBAR=25;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int PATHEMACSINST=17;
    public static final int T__149=149;
    public static final int PATHP=37;
    public static final int LGRAF=30;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int PATHEMACSREM=18;
    public static final int NUMBER=13;
    public static final int UNDERSCORE=22;
    public static final int GREATAND=14;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int VARQMARK=62;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=77;
    public static final int T__129=129;
    public static final int PATHKVERS=46;
    public static final int VARPATH=68;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int PSINGLE=26;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int GREAT=11;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int RSBRACK=9;
    public static final int BLANKLINE=75;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int LESSGREAT=52;
    public static final int T__206=206;
    public static final int SLASH=28;
    public static final int T__207=207;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int DLESS=40;
    public static final int T__112=112;
    public static final int AP=23;
    public static final int PATHNULL=12;
    public static final int DMINUS=19;
    public static final int AMPERSAND=57;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int MINUS=15;
    public static final int COLON=34;
    public static final int PATHPACK=45;
    public static final int RGRAF=31;
    public static final int DGREAT=49;
    public static final int VARDOLLAR=63;
    public static final int PATHOLDSCHEMA=21;
    public static final int LPAR=38;
    public static final int PATH=59;
    public static final int LESS=48;
    public static final int PATHREL=58;
    public static final int VAR=60;
    public static final int COMMENT=74;
    public static final int VARPS=69;
    public static final int DDOT=73;
    public static final int SHARP=4;
    public static final int VARSTAR=65;
    public static final int CLOBBER=54;
    public static final int PATHMIME=32;
    public static final int VARAT=66;
    public static final int PATHXMANAGER=42;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int OR=16;
    public static final int QMARK=72;
    public static final int PATHGCONFSCH=20;
    public static final int PATHSCRIPT=47;
    public static final int ID=70;
    public static final int AND=10;
    public static final int PATHSUID=33;
    public static final int T__199=199;
    public static final int T__198=198;
    public static final int T__197=197;
    public static final int T__196=196;
    public static final int T__195=195;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int TILDE=27;
    public static final int PATHCONFMOD=43;
    public static final int DIGIT=71;
    public static final int DOT=36;
    public static final int PATHXWINDOW=41;
    public static final int PATHSS=35;
    public static final int NOTEQU=56;
    public static final int T__184=184;
    public static final int T__183=183;
    public static final int T__186=186;
    public static final int T__185=185;
    public static final int T__188=188;
    public static final int T__187=187;
    public static final int T__189=189;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int VARINPUT=61;
    public static final int VARHOME=67;
    public static final int LSBRACK=6;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int PATHCOMPYTH=24;
    public static final int DLESSDASH=51;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int EQU=8;
    public static final int NOTNEWLINE=76;
    public static final int RPAR=39;
    public static final int T__169=169;
    public static final int BSLASH=29;

    // delegates
    // delegators


        public GrammarShellForMancoosiParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public GrammarShellForMancoosiParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("GrammarShellForMancoosiParserTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return GrammarShellForMancoosiParser.tokenNames; }
    public String getGrammarFileName() { return "GrammarShellForMancoosi.g"; }


    public static class mainRule_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "mainRule"
    // GrammarShellForMancoosi.g:20:1: mainRule returns [Node returnNode] : headerGen+= header (statementGen+= statement )* ;
    public final GrammarShellForMancoosiParser.mainRule_return mainRule() throws RecognitionException {
        GrammarShellForMancoosiParser.mainRule_return retval = new GrammarShellForMancoosiParser.mainRule_return();
        retval.start = input.LT(1);

        List list_headerGen=null;
        List list_statementGen=null;
        RuleReturnScope headerGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:21:1: (headerGen+= header (statementGen+= statement )* )
            // GrammarShellForMancoosi.g:21:4: headerGen+= header (statementGen+= statement )*
            {
            pushFollow(FOLLOW_header_in_mainRule52);
            headerGen=header();

            state._fsp--;
            if (state.failed) return retval;
            if (list_headerGen==null) list_headerGen=new ArrayList();
            list_headerGen.add(headerGen);

            // GrammarShellForMancoosi.g:21:22: (statementGen+= statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==PATHNULL||(LA1_0>=PATHEMACSINST && LA1_0<=PATHEMACSREM)||(LA1_0>=PATHGCONFSCH && LA1_0<=UNDERSCORE)||LA1_0==PATHCOMPYTH||LA1_0==LGRAF||(LA1_0>=PATHMIME && LA1_0<=LPAR)||(LA1_0>=PATHXWINDOW && LA1_0<=PATHSCRIPT)||(LA1_0>=PATHREL && LA1_0<=ID)||(LA1_0>=79 && LA1_0<=82)||LA1_0==85||(LA1_0>=87 && LA1_0<=93)||(LA1_0>=95 && LA1_0<=103)||LA1_0==105||(LA1_0>=107 && LA1_0<=108)||(LA1_0>=110 && LA1_0<=112)||(LA1_0>=114 && LA1_0<=119)||(LA1_0>=121 && LA1_0<=144)||(LA1_0>=146 && LA1_0<=159)||(LA1_0>=161 && LA1_0<=188)||(LA1_0>=190 && LA1_0<=198)||(LA1_0>=200 && LA1_0<=207)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:21:24: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_mainRule58);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		mainRuleReturnNode.setKind("mainRule");
              	    // Create a CST Node
              		if(list_headerGen != null) {
              	        for(Iterator it = list_headerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.header_return r = (GrammarShellForMancoosiParser.header_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("header");
              	            	mainRuleReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	mainRuleReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = mainRuleReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mainRule"

    public static class header_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "header"
    // GrammarShellForMancoosi.g:51:1: header returns [Node returnNode] : SHARPGen= SHARP EXCLGen= EXCL pathGen+= path (paramGen+= param )? TK_0= '\\n' ;
    public final GrammarShellForMancoosiParser.header_return header() throws RecognitionException {
        GrammarShellForMancoosiParser.header_return retval = new GrammarShellForMancoosiParser.header_return();
        retval.start = input.LT(1);

        Token SHARPGen=null;
        Token EXCLGen=null;
        Token TK_0=null;
        List list_pathGen=null;
        List list_paramGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:52:1: (SHARPGen= SHARP EXCLGen= EXCL pathGen+= path (paramGen+= param )? TK_0= '\\n' )
            // GrammarShellForMancoosi.g:52:4: SHARPGen= SHARP EXCLGen= EXCL pathGen+= path (paramGen+= param )? TK_0= '\\n'
            {
            SHARPGen=(Token)match(input,SHARP,FOLLOW_SHARP_in_header82); if (state.failed) return retval;
            EXCLGen=(Token)match(input,EXCL,FOLLOW_EXCL_in_header87); if (state.failed) return retval;
            pushFollow(FOLLOW_path_in_header92);
            pathGen=path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pathGen==null) list_pathGen=new ArrayList();
            list_pathGen.add(pathGen);

            // GrammarShellForMancoosi.g:52:49: (paramGen+= param )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( ((LA2_0>=GREAT && LA2_0<=MINUS)||(LA2_0>=PATHEMACSINST && LA2_0<=PATHCOMPYTH)||(LA2_0>=PSINGLE && LA2_0<=BSLASH)||(LA2_0>=PATHMIME && LA2_0<=PATHP)||(LA2_0>=DLESS && LA2_0<=CLOBBER)||(LA2_0>=PATHREL && LA2_0<=ID)||(LA2_0>=80 && LA2_0<=82)||LA2_0==85||(LA2_0>=87 && LA2_0<=93)||(LA2_0>=95 && LA2_0<=101)||LA2_0==103||LA2_0==105||(LA2_0>=107 && LA2_0<=108)||(LA2_0>=110 && LA2_0<=112)||(LA2_0>=114 && LA2_0<=119)||(LA2_0>=121 && LA2_0<=144)||(LA2_0>=146 && LA2_0<=159)||(LA2_0>=161 && LA2_0<=175)||(LA2_0>=177 && LA2_0<=188)||(LA2_0>=190 && LA2_0<=195)||(LA2_0>=201 && LA2_0<=207)) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // GrammarShellForMancoosi.g:52:51: paramGen+= param
                    {
                    pushFollow(FOLLOW_param_in_header99);
                    paramGen=param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_paramGen==null) list_paramGen=new ArrayList();
                    list_paramGen.add(paramGen);


                    }
                    break;

            }

            TK_0=(Token)match(input,78,FOLLOW_78_in_header106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		headerReturnNode.setKind("header");
              	    // Create a CST Leaf
              		if(SHARPGen != null) {
              			Leaf SHARPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SHARP", (SHARPGen!=null?SHARPGen.getText():null), SHARPGen.getCharPositionInLine(), SHARPGen.getLine());
              			headerReturnNode.getChildren().add(SHARPGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(EXCLGen != null) {
              			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", (EXCLGen!=null?EXCLGen.getText():null), EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
              			headerReturnNode.getChildren().add(EXCLGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_pathGen != null) {
              	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("path");
              	            	headerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	headerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		headerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = headerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "header"

    public static class statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement"
    // GrammarShellForMancoosi.g:98:1: statement returns [Node returnNode] : (templateGen+= template | command_statementGen+= command_statement | control_statementGen+= control_statement | loop_statementGen+= loop_statement | function_statementGen+= function_statement | redirection_statementGen+= redirection_statement );
    public final GrammarShellForMancoosiParser.statement_return statement() throws RecognitionException {
        GrammarShellForMancoosiParser.statement_return retval = new GrammarShellForMancoosiParser.statement_return();
        retval.start = input.LT(1);

        List list_templateGen=null;
        List list_command_statementGen=null;
        List list_control_statementGen=null;
        List list_loop_statementGen=null;
        List list_function_statementGen=null;
        List list_redirection_statementGen=null;
        RuleReturnScope templateGen = null;
        RuleReturnScope command_statementGen = null;
        RuleReturnScope control_statementGen = null;
        RuleReturnScope loop_statementGen = null;
        RuleReturnScope function_statementGen = null;
        RuleReturnScope redirection_statementGen = null;
        try {
            // GrammarShellForMancoosi.g:99:1: (templateGen+= template | command_statementGen+= command_statement | control_statementGen+= control_statement | loop_statementGen+= loop_statement | function_statementGen+= function_statement | redirection_statementGen+= redirection_statement )
            int alt3=6;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // GrammarShellForMancoosi.g:99:4: templateGen+= template
                    {
                    pushFollow(FOLLOW_template_in_statement129);
                    templateGen=template();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateGen==null) list_templateGen=new ArrayList();
                    list_templateGen.add(templateGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_templateGen != null) {
                      	        for(Iterator it = list_templateGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.template_return r = (GrammarShellForMancoosiParser.template_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("template");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:117:5: command_statementGen+= command_statement
                    {
                    pushFollow(FOLLOW_command_statement_in_statement141);
                    command_statementGen=command_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_statementGen==null) list_command_statementGen=new ArrayList();
                    list_command_statementGen.add(command_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_command_statementGen != null) {
                      	        for(Iterator it = list_command_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.command_statement_return r = (GrammarShellForMancoosiParser.command_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("command_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:135:5: control_statementGen+= control_statement
                    {
                    pushFollow(FOLLOW_control_statement_in_statement153);
                    control_statementGen=control_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_control_statementGen==null) list_control_statementGen=new ArrayList();
                    list_control_statementGen.add(control_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_control_statementGen != null) {
                      	        for(Iterator it = list_control_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.control_statement_return r = (GrammarShellForMancoosiParser.control_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("control_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:153:5: loop_statementGen+= loop_statement
                    {
                    pushFollow(FOLLOW_loop_statement_in_statement165);
                    loop_statementGen=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_loop_statementGen==null) list_loop_statementGen=new ArrayList();
                    list_loop_statementGen.add(loop_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_loop_statementGen != null) {
                      	        for(Iterator it = list_loop_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.loop_statement_return r = (GrammarShellForMancoosiParser.loop_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("loop_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:171:5: function_statementGen+= function_statement
                    {
                    pushFollow(FOLLOW_function_statement_in_statement177);
                    function_statementGen=function_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_function_statementGen==null) list_function_statementGen=new ArrayList();
                    list_function_statementGen.add(function_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_function_statementGen != null) {
                      	        for(Iterator it = list_function_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.function_statement_return r = (GrammarShellForMancoosiParser.function_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("function_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:189:5: redirection_statementGen+= redirection_statement
                    {
                    pushFollow(FOLLOW_redirection_statement_in_statement189);
                    redirection_statementGen=redirection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_redirection_statementGen==null) list_redirection_statementGen=new ArrayList();
                    list_redirection_statementGen.add(redirection_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_redirection_statementGen != null) {
                      	        for(Iterator it = list_redirection_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.redirection_statement_return r = (GrammarShellForMancoosiParser.redirection_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("redirection_statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class template_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "template"
    // GrammarShellForMancoosi.g:209:1: template returns [Node returnNode] : (templateA1Gen+= templateA1 | templateA2Gen+= templateA2 | templateA3Gen+= templateA3 | templateA4Gen+= templateA4 | templateA5Gen+= templateA5 | templateA6Gen+= templateA6 | templateA7Gen+= templateA7 | templateA8Gen+= templateA8 | templateA9Gen+= templateA9 | templateA10Gen+= templateA10 | templateA11Gen+= templateA11 | templateA12_13Gen+= templateA12_13 | templateA14Gen+= templateA14 | templateA15Gen+= templateA15 | templateA16Gen+= templateA16 | templateA17Gen+= templateA17 | templateA18Gen+= templateA18 | templateA19Gen+= templateA19 | templateA20Gen+= templateA20 | templateA21Gen+= templateA21 | templateA22Gen+= templateA22 | templateA23Gen+= templateA23 | templateA24Gen+= templateA24 | templateA25Gen+= templateA25 | templateA26Gen+= templateA26 | templateA27Gen+= templateA27 | templateA28Gen+= templateA28 | templateA29Gen+= templateA29 | templateA30Gen+= templateA30 | templateA31Gen+= templateA31 | templateA32Gen+= templateA32 | templateA33Gen+= templateA33 | templateA34Gen+= templateA34 | templateA35Gen+= templateA35 | templateA36Gen+= templateA36 | templateA37Gen+= templateA37 | templateA38Gen+= templateA38 | templateA39Gen+= templateA39 | templateA40Gen+= templateA40 | templateA41Gen+= templateA41 | templateA42Gen+= templateA42 | templateA43Gen+= templateA43 | templateA44Gen+= templateA44 | templateA45Gen+= templateA45 | templateA46Gen+= templateA46 | templateA47Gen+= templateA47 | templateA48Gen+= templateA48 | templateA49Gen+= templateA49 | templateA50Gen+= templateA50 | templateA51Gen+= templateA51 | templateA52Gen+= templateA52 );
    public final GrammarShellForMancoosiParser.template_return template() throws RecognitionException {
        GrammarShellForMancoosiParser.template_return retval = new GrammarShellForMancoosiParser.template_return();
        retval.start = input.LT(1);

        List list_templateA1Gen=null;
        List list_templateA2Gen=null;
        List list_templateA3Gen=null;
        List list_templateA4Gen=null;
        List list_templateA5Gen=null;
        List list_templateA6Gen=null;
        List list_templateA7Gen=null;
        List list_templateA8Gen=null;
        List list_templateA9Gen=null;
        List list_templateA10Gen=null;
        List list_templateA11Gen=null;
        List list_templateA12_13Gen=null;
        List list_templateA14Gen=null;
        List list_templateA15Gen=null;
        List list_templateA16Gen=null;
        List list_templateA17Gen=null;
        List list_templateA18Gen=null;
        List list_templateA19Gen=null;
        List list_templateA20Gen=null;
        List list_templateA21Gen=null;
        List list_templateA22Gen=null;
        List list_templateA23Gen=null;
        List list_templateA24Gen=null;
        List list_templateA25Gen=null;
        List list_templateA26Gen=null;
        List list_templateA27Gen=null;
        List list_templateA28Gen=null;
        List list_templateA29Gen=null;
        List list_templateA30Gen=null;
        List list_templateA31Gen=null;
        List list_templateA32Gen=null;
        List list_templateA33Gen=null;
        List list_templateA34Gen=null;
        List list_templateA35Gen=null;
        List list_templateA36Gen=null;
        List list_templateA37Gen=null;
        List list_templateA38Gen=null;
        List list_templateA39Gen=null;
        List list_templateA40Gen=null;
        List list_templateA41Gen=null;
        List list_templateA42Gen=null;
        List list_templateA43Gen=null;
        List list_templateA44Gen=null;
        List list_templateA45Gen=null;
        List list_templateA46Gen=null;
        List list_templateA47Gen=null;
        List list_templateA48Gen=null;
        List list_templateA49Gen=null;
        List list_templateA50Gen=null;
        List list_templateA51Gen=null;
        List list_templateA52Gen=null;
        RuleReturnScope templateA1Gen = null;
        RuleReturnScope templateA2Gen = null;
        RuleReturnScope templateA3Gen = null;
        RuleReturnScope templateA4Gen = null;
        RuleReturnScope templateA5Gen = null;
        RuleReturnScope templateA6Gen = null;
        RuleReturnScope templateA7Gen = null;
        RuleReturnScope templateA8Gen = null;
        RuleReturnScope templateA9Gen = null;
        RuleReturnScope templateA10Gen = null;
        RuleReturnScope templateA11Gen = null;
        RuleReturnScope templateA12_13Gen = null;
        RuleReturnScope templateA14Gen = null;
        RuleReturnScope templateA15Gen = null;
        RuleReturnScope templateA16Gen = null;
        RuleReturnScope templateA17Gen = null;
        RuleReturnScope templateA18Gen = null;
        RuleReturnScope templateA19Gen = null;
        RuleReturnScope templateA20Gen = null;
        RuleReturnScope templateA21Gen = null;
        RuleReturnScope templateA22Gen = null;
        RuleReturnScope templateA23Gen = null;
        RuleReturnScope templateA24Gen = null;
        RuleReturnScope templateA25Gen = null;
        RuleReturnScope templateA26Gen = null;
        RuleReturnScope templateA27Gen = null;
        RuleReturnScope templateA28Gen = null;
        RuleReturnScope templateA29Gen = null;
        RuleReturnScope templateA30Gen = null;
        RuleReturnScope templateA31Gen = null;
        RuleReturnScope templateA32Gen = null;
        RuleReturnScope templateA33Gen = null;
        RuleReturnScope templateA34Gen = null;
        RuleReturnScope templateA35Gen = null;
        RuleReturnScope templateA36Gen = null;
        RuleReturnScope templateA37Gen = null;
        RuleReturnScope templateA38Gen = null;
        RuleReturnScope templateA39Gen = null;
        RuleReturnScope templateA40Gen = null;
        RuleReturnScope templateA41Gen = null;
        RuleReturnScope templateA42Gen = null;
        RuleReturnScope templateA43Gen = null;
        RuleReturnScope templateA44Gen = null;
        RuleReturnScope templateA45Gen = null;
        RuleReturnScope templateA46Gen = null;
        RuleReturnScope templateA47Gen = null;
        RuleReturnScope templateA48Gen = null;
        RuleReturnScope templateA49Gen = null;
        RuleReturnScope templateA50Gen = null;
        RuleReturnScope templateA51Gen = null;
        RuleReturnScope templateA52Gen = null;
        try {
            // GrammarShellForMancoosi.g:210:1: (templateA1Gen+= templateA1 | templateA2Gen+= templateA2 | templateA3Gen+= templateA3 | templateA4Gen+= templateA4 | templateA5Gen+= templateA5 | templateA6Gen+= templateA6 | templateA7Gen+= templateA7 | templateA8Gen+= templateA8 | templateA9Gen+= templateA9 | templateA10Gen+= templateA10 | templateA11Gen+= templateA11 | templateA12_13Gen+= templateA12_13 | templateA14Gen+= templateA14 | templateA15Gen+= templateA15 | templateA16Gen+= templateA16 | templateA17Gen+= templateA17 | templateA18Gen+= templateA18 | templateA19Gen+= templateA19 | templateA20Gen+= templateA20 | templateA21Gen+= templateA21 | templateA22Gen+= templateA22 | templateA23Gen+= templateA23 | templateA24Gen+= templateA24 | templateA25Gen+= templateA25 | templateA26Gen+= templateA26 | templateA27Gen+= templateA27 | templateA28Gen+= templateA28 | templateA29Gen+= templateA29 | templateA30Gen+= templateA30 | templateA31Gen+= templateA31 | templateA32Gen+= templateA32 | templateA33Gen+= templateA33 | templateA34Gen+= templateA34 | templateA35Gen+= templateA35 | templateA36Gen+= templateA36 | templateA37Gen+= templateA37 | templateA38Gen+= templateA38 | templateA39Gen+= templateA39 | templateA40Gen+= templateA40 | templateA41Gen+= templateA41 | templateA42Gen+= templateA42 | templateA43Gen+= templateA43 | templateA44Gen+= templateA44 | templateA45Gen+= templateA45 | templateA46Gen+= templateA46 | templateA47Gen+= templateA47 | templateA48Gen+= templateA48 | templateA49Gen+= templateA49 | templateA50Gen+= templateA50 | templateA51Gen+= templateA51 | templateA52Gen+= templateA52 )
            int alt4=51;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // GrammarShellForMancoosi.g:210:4: templateA1Gen+= templateA1
                    {
                    pushFollow(FOLLOW_templateA1_in_template211);
                    templateA1Gen=templateA1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA1Gen==null) list_templateA1Gen=new ArrayList();
                    list_templateA1Gen.add(templateA1Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA1Gen != null) {
                      	        for(Iterator it = list_templateA1Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA1_return r = (GrammarShellForMancoosiParser.templateA1_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA1");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:228:5: templateA2Gen+= templateA2
                    {
                    pushFollow(FOLLOW_templateA2_in_template223);
                    templateA2Gen=templateA2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA2Gen==null) list_templateA2Gen=new ArrayList();
                    list_templateA2Gen.add(templateA2Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA2Gen != null) {
                      	        for(Iterator it = list_templateA2Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA2_return r = (GrammarShellForMancoosiParser.templateA2_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA2");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:246:5: templateA3Gen+= templateA3
                    {
                    pushFollow(FOLLOW_templateA3_in_template235);
                    templateA3Gen=templateA3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA3Gen==null) list_templateA3Gen=new ArrayList();
                    list_templateA3Gen.add(templateA3Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA3Gen != null) {
                      	        for(Iterator it = list_templateA3Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA3_return r = (GrammarShellForMancoosiParser.templateA3_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA3");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:264:5: templateA4Gen+= templateA4
                    {
                    pushFollow(FOLLOW_templateA4_in_template247);
                    templateA4Gen=templateA4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA4Gen==null) list_templateA4Gen=new ArrayList();
                    list_templateA4Gen.add(templateA4Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA4Gen != null) {
                      	        for(Iterator it = list_templateA4Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA4_return r = (GrammarShellForMancoosiParser.templateA4_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA4");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:282:5: templateA5Gen+= templateA5
                    {
                    pushFollow(FOLLOW_templateA5_in_template259);
                    templateA5Gen=templateA5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA5Gen==null) list_templateA5Gen=new ArrayList();
                    list_templateA5Gen.add(templateA5Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA5Gen != null) {
                      	        for(Iterator it = list_templateA5Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA5_return r = (GrammarShellForMancoosiParser.templateA5_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA5");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:300:5: templateA6Gen+= templateA6
                    {
                    pushFollow(FOLLOW_templateA6_in_template271);
                    templateA6Gen=templateA6();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA6Gen==null) list_templateA6Gen=new ArrayList();
                    list_templateA6Gen.add(templateA6Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA6Gen != null) {
                      	        for(Iterator it = list_templateA6Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA6_return r = (GrammarShellForMancoosiParser.templateA6_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA6");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:318:5: templateA7Gen+= templateA7
                    {
                    pushFollow(FOLLOW_templateA7_in_template283);
                    templateA7Gen=templateA7();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA7Gen==null) list_templateA7Gen=new ArrayList();
                    list_templateA7Gen.add(templateA7Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA7Gen != null) {
                      	        for(Iterator it = list_templateA7Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA7_return r = (GrammarShellForMancoosiParser.templateA7_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA7");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:336:5: templateA8Gen+= templateA8
                    {
                    pushFollow(FOLLOW_templateA8_in_template295);
                    templateA8Gen=templateA8();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA8Gen==null) list_templateA8Gen=new ArrayList();
                    list_templateA8Gen.add(templateA8Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA8Gen != null) {
                      	        for(Iterator it = list_templateA8Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA8_return r = (GrammarShellForMancoosiParser.templateA8_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA8");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:354:5: templateA9Gen+= templateA9
                    {
                    pushFollow(FOLLOW_templateA9_in_template307);
                    templateA9Gen=templateA9();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA9Gen==null) list_templateA9Gen=new ArrayList();
                    list_templateA9Gen.add(templateA9Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA9Gen != null) {
                      	        for(Iterator it = list_templateA9Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA9_return r = (GrammarShellForMancoosiParser.templateA9_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA9");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:372:5: templateA10Gen+= templateA10
                    {
                    pushFollow(FOLLOW_templateA10_in_template319);
                    templateA10Gen=templateA10();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA10Gen==null) list_templateA10Gen=new ArrayList();
                    list_templateA10Gen.add(templateA10Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA10Gen != null) {
                      	        for(Iterator it = list_templateA10Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA10_return r = (GrammarShellForMancoosiParser.templateA10_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA10");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:390:5: templateA11Gen+= templateA11
                    {
                    pushFollow(FOLLOW_templateA11_in_template331);
                    templateA11Gen=templateA11();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA11Gen==null) list_templateA11Gen=new ArrayList();
                    list_templateA11Gen.add(templateA11Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA11Gen != null) {
                      	        for(Iterator it = list_templateA11Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA11_return r = (GrammarShellForMancoosiParser.templateA11_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA11");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // GrammarShellForMancoosi.g:408:5: templateA12_13Gen+= templateA12_13
                    {
                    pushFollow(FOLLOW_templateA12_13_in_template343);
                    templateA12_13Gen=templateA12_13();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA12_13Gen==null) list_templateA12_13Gen=new ArrayList();
                    list_templateA12_13Gen.add(templateA12_13Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA12_13Gen != null) {
                      	        for(Iterator it = list_templateA12_13Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA12_13_return r = (GrammarShellForMancoosiParser.templateA12_13_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA12_13");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // GrammarShellForMancoosi.g:426:5: templateA14Gen+= templateA14
                    {
                    pushFollow(FOLLOW_templateA14_in_template355);
                    templateA14Gen=templateA14();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA14Gen==null) list_templateA14Gen=new ArrayList();
                    list_templateA14Gen.add(templateA14Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA14Gen != null) {
                      	        for(Iterator it = list_templateA14Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA14_return r = (GrammarShellForMancoosiParser.templateA14_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA14");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // GrammarShellForMancoosi.g:444:5: templateA15Gen+= templateA15
                    {
                    pushFollow(FOLLOW_templateA15_in_template367);
                    templateA15Gen=templateA15();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA15Gen==null) list_templateA15Gen=new ArrayList();
                    list_templateA15Gen.add(templateA15Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA15Gen != null) {
                      	        for(Iterator it = list_templateA15Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA15_return r = (GrammarShellForMancoosiParser.templateA15_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA15");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // GrammarShellForMancoosi.g:462:5: templateA16Gen+= templateA16
                    {
                    pushFollow(FOLLOW_templateA16_in_template380);
                    templateA16Gen=templateA16();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA16Gen==null) list_templateA16Gen=new ArrayList();
                    list_templateA16Gen.add(templateA16Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA16Gen != null) {
                      	        for(Iterator it = list_templateA16Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA16_return r = (GrammarShellForMancoosiParser.templateA16_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA16");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // GrammarShellForMancoosi.g:480:5: templateA17Gen+= templateA17
                    {
                    pushFollow(FOLLOW_templateA17_in_template392);
                    templateA17Gen=templateA17();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA17Gen==null) list_templateA17Gen=new ArrayList();
                    list_templateA17Gen.add(templateA17Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA17Gen != null) {
                      	        for(Iterator it = list_templateA17Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA17_return r = (GrammarShellForMancoosiParser.templateA17_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA17");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // GrammarShellForMancoosi.g:498:5: templateA18Gen+= templateA18
                    {
                    pushFollow(FOLLOW_templateA18_in_template404);
                    templateA18Gen=templateA18();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA18Gen==null) list_templateA18Gen=new ArrayList();
                    list_templateA18Gen.add(templateA18Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA18Gen != null) {
                      	        for(Iterator it = list_templateA18Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA18_return r = (GrammarShellForMancoosiParser.templateA18_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA18");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // GrammarShellForMancoosi.g:516:5: templateA19Gen+= templateA19
                    {
                    pushFollow(FOLLOW_templateA19_in_template416);
                    templateA19Gen=templateA19();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA19Gen==null) list_templateA19Gen=new ArrayList();
                    list_templateA19Gen.add(templateA19Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA19Gen != null) {
                      	        for(Iterator it = list_templateA19Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA19_return r = (GrammarShellForMancoosiParser.templateA19_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA19");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 19 :
                    // GrammarShellForMancoosi.g:534:5: templateA20Gen+= templateA20
                    {
                    pushFollow(FOLLOW_templateA20_in_template428);
                    templateA20Gen=templateA20();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA20Gen==null) list_templateA20Gen=new ArrayList();
                    list_templateA20Gen.add(templateA20Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA20Gen != null) {
                      	        for(Iterator it = list_templateA20Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA20_return r = (GrammarShellForMancoosiParser.templateA20_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA20");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 20 :
                    // GrammarShellForMancoosi.g:552:5: templateA21Gen+= templateA21
                    {
                    pushFollow(FOLLOW_templateA21_in_template440);
                    templateA21Gen=templateA21();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA21Gen==null) list_templateA21Gen=new ArrayList();
                    list_templateA21Gen.add(templateA21Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA21Gen != null) {
                      	        for(Iterator it = list_templateA21Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA21_return r = (GrammarShellForMancoosiParser.templateA21_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA21");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 21 :
                    // GrammarShellForMancoosi.g:570:5: templateA22Gen+= templateA22
                    {
                    pushFollow(FOLLOW_templateA22_in_template452);
                    templateA22Gen=templateA22();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA22Gen==null) list_templateA22Gen=new ArrayList();
                    list_templateA22Gen.add(templateA22Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA22Gen != null) {
                      	        for(Iterator it = list_templateA22Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA22_return r = (GrammarShellForMancoosiParser.templateA22_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA22");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 22 :
                    // GrammarShellForMancoosi.g:588:5: templateA23Gen+= templateA23
                    {
                    pushFollow(FOLLOW_templateA23_in_template464);
                    templateA23Gen=templateA23();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA23Gen==null) list_templateA23Gen=new ArrayList();
                    list_templateA23Gen.add(templateA23Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA23Gen != null) {
                      	        for(Iterator it = list_templateA23Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA23_return r = (GrammarShellForMancoosiParser.templateA23_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA23");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 23 :
                    // GrammarShellForMancoosi.g:606:5: templateA24Gen+= templateA24
                    {
                    pushFollow(FOLLOW_templateA24_in_template476);
                    templateA24Gen=templateA24();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA24Gen==null) list_templateA24Gen=new ArrayList();
                    list_templateA24Gen.add(templateA24Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA24Gen != null) {
                      	        for(Iterator it = list_templateA24Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA24_return r = (GrammarShellForMancoosiParser.templateA24_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA24");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 24 :
                    // GrammarShellForMancoosi.g:624:5: templateA25Gen+= templateA25
                    {
                    pushFollow(FOLLOW_templateA25_in_template488);
                    templateA25Gen=templateA25();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA25Gen==null) list_templateA25Gen=new ArrayList();
                    list_templateA25Gen.add(templateA25Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA25Gen != null) {
                      	        for(Iterator it = list_templateA25Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA25_return r = (GrammarShellForMancoosiParser.templateA25_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA25");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 25 :
                    // GrammarShellForMancoosi.g:642:5: templateA26Gen+= templateA26
                    {
                    pushFollow(FOLLOW_templateA26_in_template500);
                    templateA26Gen=templateA26();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA26Gen==null) list_templateA26Gen=new ArrayList();
                    list_templateA26Gen.add(templateA26Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA26Gen != null) {
                      	        for(Iterator it = list_templateA26Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA26_return r = (GrammarShellForMancoosiParser.templateA26_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA26");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 26 :
                    // GrammarShellForMancoosi.g:660:5: templateA27Gen+= templateA27
                    {
                    pushFollow(FOLLOW_templateA27_in_template512);
                    templateA27Gen=templateA27();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA27Gen==null) list_templateA27Gen=new ArrayList();
                    list_templateA27Gen.add(templateA27Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA27Gen != null) {
                      	        for(Iterator it = list_templateA27Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA27_return r = (GrammarShellForMancoosiParser.templateA27_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA27");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 27 :
                    // GrammarShellForMancoosi.g:678:5: templateA28Gen+= templateA28
                    {
                    pushFollow(FOLLOW_templateA28_in_template524);
                    templateA28Gen=templateA28();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA28Gen==null) list_templateA28Gen=new ArrayList();
                    list_templateA28Gen.add(templateA28Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA28Gen != null) {
                      	        for(Iterator it = list_templateA28Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA28_return r = (GrammarShellForMancoosiParser.templateA28_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA28");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 28 :
                    // GrammarShellForMancoosi.g:696:5: templateA29Gen+= templateA29
                    {
                    pushFollow(FOLLOW_templateA29_in_template536);
                    templateA29Gen=templateA29();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA29Gen==null) list_templateA29Gen=new ArrayList();
                    list_templateA29Gen.add(templateA29Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA29Gen != null) {
                      	        for(Iterator it = list_templateA29Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA29_return r = (GrammarShellForMancoosiParser.templateA29_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA29");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 29 :
                    // GrammarShellForMancoosi.g:714:5: templateA30Gen+= templateA30
                    {
                    pushFollow(FOLLOW_templateA30_in_template548);
                    templateA30Gen=templateA30();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA30Gen==null) list_templateA30Gen=new ArrayList();
                    list_templateA30Gen.add(templateA30Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA30Gen != null) {
                      	        for(Iterator it = list_templateA30Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA30_return r = (GrammarShellForMancoosiParser.templateA30_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA30");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 30 :
                    // GrammarShellForMancoosi.g:732:5: templateA31Gen+= templateA31
                    {
                    pushFollow(FOLLOW_templateA31_in_template560);
                    templateA31Gen=templateA31();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA31Gen==null) list_templateA31Gen=new ArrayList();
                    list_templateA31Gen.add(templateA31Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA31Gen != null) {
                      	        for(Iterator it = list_templateA31Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA31_return r = (GrammarShellForMancoosiParser.templateA31_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA31");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 31 :
                    // GrammarShellForMancoosi.g:750:5: templateA32Gen+= templateA32
                    {
                    pushFollow(FOLLOW_templateA32_in_template572);
                    templateA32Gen=templateA32();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA32Gen==null) list_templateA32Gen=new ArrayList();
                    list_templateA32Gen.add(templateA32Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA32Gen != null) {
                      	        for(Iterator it = list_templateA32Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA32_return r = (GrammarShellForMancoosiParser.templateA32_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA32");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 32 :
                    // GrammarShellForMancoosi.g:768:5: templateA33Gen+= templateA33
                    {
                    pushFollow(FOLLOW_templateA33_in_template584);
                    templateA33Gen=templateA33();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA33Gen==null) list_templateA33Gen=new ArrayList();
                    list_templateA33Gen.add(templateA33Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA33Gen != null) {
                      	        for(Iterator it = list_templateA33Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA33_return r = (GrammarShellForMancoosiParser.templateA33_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA33");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 33 :
                    // GrammarShellForMancoosi.g:786:5: templateA34Gen+= templateA34
                    {
                    pushFollow(FOLLOW_templateA34_in_template596);
                    templateA34Gen=templateA34();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA34Gen==null) list_templateA34Gen=new ArrayList();
                    list_templateA34Gen.add(templateA34Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA34Gen != null) {
                      	        for(Iterator it = list_templateA34Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA34_return r = (GrammarShellForMancoosiParser.templateA34_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA34");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 34 :
                    // GrammarShellForMancoosi.g:804:5: templateA35Gen+= templateA35
                    {
                    pushFollow(FOLLOW_templateA35_in_template608);
                    templateA35Gen=templateA35();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA35Gen==null) list_templateA35Gen=new ArrayList();
                    list_templateA35Gen.add(templateA35Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA35Gen != null) {
                      	        for(Iterator it = list_templateA35Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA35_return r = (GrammarShellForMancoosiParser.templateA35_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA35");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 35 :
                    // GrammarShellForMancoosi.g:822:5: templateA36Gen+= templateA36
                    {
                    pushFollow(FOLLOW_templateA36_in_template620);
                    templateA36Gen=templateA36();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA36Gen==null) list_templateA36Gen=new ArrayList();
                    list_templateA36Gen.add(templateA36Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA36Gen != null) {
                      	        for(Iterator it = list_templateA36Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA36_return r = (GrammarShellForMancoosiParser.templateA36_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA36");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 36 :
                    // GrammarShellForMancoosi.g:840:5: templateA37Gen+= templateA37
                    {
                    pushFollow(FOLLOW_templateA37_in_template632);
                    templateA37Gen=templateA37();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA37Gen==null) list_templateA37Gen=new ArrayList();
                    list_templateA37Gen.add(templateA37Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA37Gen != null) {
                      	        for(Iterator it = list_templateA37Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA37_return r = (GrammarShellForMancoosiParser.templateA37_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA37");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 37 :
                    // GrammarShellForMancoosi.g:858:5: templateA38Gen+= templateA38
                    {
                    pushFollow(FOLLOW_templateA38_in_template644);
                    templateA38Gen=templateA38();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA38Gen==null) list_templateA38Gen=new ArrayList();
                    list_templateA38Gen.add(templateA38Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA38Gen != null) {
                      	        for(Iterator it = list_templateA38Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA38_return r = (GrammarShellForMancoosiParser.templateA38_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA38");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 38 :
                    // GrammarShellForMancoosi.g:876:5: templateA39Gen+= templateA39
                    {
                    pushFollow(FOLLOW_templateA39_in_template656);
                    templateA39Gen=templateA39();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA39Gen==null) list_templateA39Gen=new ArrayList();
                    list_templateA39Gen.add(templateA39Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA39Gen != null) {
                      	        for(Iterator it = list_templateA39Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA39_return r = (GrammarShellForMancoosiParser.templateA39_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA39");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 39 :
                    // GrammarShellForMancoosi.g:894:5: templateA40Gen+= templateA40
                    {
                    pushFollow(FOLLOW_templateA40_in_template668);
                    templateA40Gen=templateA40();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA40Gen==null) list_templateA40Gen=new ArrayList();
                    list_templateA40Gen.add(templateA40Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA40Gen != null) {
                      	        for(Iterator it = list_templateA40Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA40_return r = (GrammarShellForMancoosiParser.templateA40_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA40");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 40 :
                    // GrammarShellForMancoosi.g:912:5: templateA41Gen+= templateA41
                    {
                    pushFollow(FOLLOW_templateA41_in_template680);
                    templateA41Gen=templateA41();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA41Gen==null) list_templateA41Gen=new ArrayList();
                    list_templateA41Gen.add(templateA41Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA41Gen != null) {
                      	        for(Iterator it = list_templateA41Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA41_return r = (GrammarShellForMancoosiParser.templateA41_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA41");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 41 :
                    // GrammarShellForMancoosi.g:930:5: templateA42Gen+= templateA42
                    {
                    pushFollow(FOLLOW_templateA42_in_template692);
                    templateA42Gen=templateA42();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA42Gen==null) list_templateA42Gen=new ArrayList();
                    list_templateA42Gen.add(templateA42Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA42Gen != null) {
                      	        for(Iterator it = list_templateA42Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA42_return r = (GrammarShellForMancoosiParser.templateA42_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA42");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 42 :
                    // GrammarShellForMancoosi.g:948:5: templateA43Gen+= templateA43
                    {
                    pushFollow(FOLLOW_templateA43_in_template704);
                    templateA43Gen=templateA43();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA43Gen==null) list_templateA43Gen=new ArrayList();
                    list_templateA43Gen.add(templateA43Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA43Gen != null) {
                      	        for(Iterator it = list_templateA43Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA43_return r = (GrammarShellForMancoosiParser.templateA43_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA43");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 43 :
                    // GrammarShellForMancoosi.g:966:5: templateA44Gen+= templateA44
                    {
                    pushFollow(FOLLOW_templateA44_in_template716);
                    templateA44Gen=templateA44();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA44Gen==null) list_templateA44Gen=new ArrayList();
                    list_templateA44Gen.add(templateA44Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA44Gen != null) {
                      	        for(Iterator it = list_templateA44Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA44_return r = (GrammarShellForMancoosiParser.templateA44_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA44");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 44 :
                    // GrammarShellForMancoosi.g:984:5: templateA45Gen+= templateA45
                    {
                    pushFollow(FOLLOW_templateA45_in_template728);
                    templateA45Gen=templateA45();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA45Gen==null) list_templateA45Gen=new ArrayList();
                    list_templateA45Gen.add(templateA45Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA45Gen != null) {
                      	        for(Iterator it = list_templateA45Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA45_return r = (GrammarShellForMancoosiParser.templateA45_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA45");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 45 :
                    // GrammarShellForMancoosi.g:1002:5: templateA46Gen+= templateA46
                    {
                    pushFollow(FOLLOW_templateA46_in_template740);
                    templateA46Gen=templateA46();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA46Gen==null) list_templateA46Gen=new ArrayList();
                    list_templateA46Gen.add(templateA46Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA46Gen != null) {
                      	        for(Iterator it = list_templateA46Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA46_return r = (GrammarShellForMancoosiParser.templateA46_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA46");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 46 :
                    // GrammarShellForMancoosi.g:1020:5: templateA47Gen+= templateA47
                    {
                    pushFollow(FOLLOW_templateA47_in_template752);
                    templateA47Gen=templateA47();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA47Gen==null) list_templateA47Gen=new ArrayList();
                    list_templateA47Gen.add(templateA47Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA47Gen != null) {
                      	        for(Iterator it = list_templateA47Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA47_return r = (GrammarShellForMancoosiParser.templateA47_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA47");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 47 :
                    // GrammarShellForMancoosi.g:1038:5: templateA48Gen+= templateA48
                    {
                    pushFollow(FOLLOW_templateA48_in_template764);
                    templateA48Gen=templateA48();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA48Gen==null) list_templateA48Gen=new ArrayList();
                    list_templateA48Gen.add(templateA48Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA48Gen != null) {
                      	        for(Iterator it = list_templateA48Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA48_return r = (GrammarShellForMancoosiParser.templateA48_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA48");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 48 :
                    // GrammarShellForMancoosi.g:1056:5: templateA49Gen+= templateA49
                    {
                    pushFollow(FOLLOW_templateA49_in_template776);
                    templateA49Gen=templateA49();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA49Gen==null) list_templateA49Gen=new ArrayList();
                    list_templateA49Gen.add(templateA49Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA49Gen != null) {
                      	        for(Iterator it = list_templateA49Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA49_return r = (GrammarShellForMancoosiParser.templateA49_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA49");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 49 :
                    // GrammarShellForMancoosi.g:1074:5: templateA50Gen+= templateA50
                    {
                    pushFollow(FOLLOW_templateA50_in_template788);
                    templateA50Gen=templateA50();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA50Gen==null) list_templateA50Gen=new ArrayList();
                    list_templateA50Gen.add(templateA50Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA50Gen != null) {
                      	        for(Iterator it = list_templateA50Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA50_return r = (GrammarShellForMancoosiParser.templateA50_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA50");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 50 :
                    // GrammarShellForMancoosi.g:1092:5: templateA51Gen+= templateA51
                    {
                    pushFollow(FOLLOW_templateA51_in_template800);
                    templateA51Gen=templateA51();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA51Gen==null) list_templateA51Gen=new ArrayList();
                    list_templateA51Gen.add(templateA51Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA51Gen != null) {
                      	        for(Iterator it = list_templateA51Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA51_return r = (GrammarShellForMancoosiParser.templateA51_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA51");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;
                case 51 :
                    // GrammarShellForMancoosi.g:1110:5: templateA52Gen+= templateA52
                    {
                    pushFollow(FOLLOW_templateA52_in_template812);
                    templateA52Gen=templateA52();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_templateA52Gen==null) list_templateA52Gen=new ArrayList();
                    list_templateA52Gen.add(templateA52Gen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		templateReturnNode.setKind("template");
                      	    // Create a CST Node
                      		if(list_templateA52Gen != null) {
                      	        for(Iterator it = list_templateA52Gen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.templateA52_return r = (GrammarShellForMancoosiParser.templateA52_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("templateA52");
                      	            	templateReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = templateReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "template"

    public static class templateA1_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA1"
    // GrammarShellForMancoosi.g:1130:1: templateA1 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA1_return templateA1() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA1_return retval = new GrammarShellForMancoosiParser.templateA1_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token MINUSGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:1131:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:1131:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA1834); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:14: (TK_1= '\\n' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==78) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA1840); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA1847); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:58: (DQUOTEGen= DQUOTE )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DQUOTE) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA1852); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA1858);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:1131:114: (DQUOTEGen_1= DQUOTE )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==DQUOTE) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA1863); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA1869); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:147: (DQUOTEGen_2= DQUOTE )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DQUOTE) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA1874); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA1880); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:186: (DQUOTEGen_3= DQUOTE )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DQUOTE) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA1885); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA1891); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:215: (TK_3= '\\n' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==78) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA1897); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA1904); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:241: (TK_4= '\\n' )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==78) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA1910); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA1917); if (state.failed) return retval;
            TK_6=(Token)match(input,82,FOLLOW_82_in_templateA1922); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA1927); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA1932); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA1937); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA1942); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA1947); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA1952); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA1957); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:422: (TK_9= '\\n' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==78) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:424: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA1963); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,82,FOLLOW_82_in_templateA1970); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA1975); if (state.failed) return retval;
            TK_11=(Token)match(input,85,FOLLOW_85_in_templateA1980); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:496: (TK_12= '\\n' | TK_13= ';' )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==78) ) {
                alt13=1;
            }
            else if ( (LA13_0==83) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:498: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA1986); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1131:512: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA1993); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA1999); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1131:535: (TK_15= '\\n' | TK_16= ';' )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==78) ) {
                alt14=1;
            }
            else if ( (LA14_0==83) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // GrammarShellForMancoosi.g:1131:537: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA11005); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1131:551: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA11012); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA1ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA1ReturnNode.setKind("templateA1");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA1ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA1ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA1ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA1ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA1ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA1ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA1ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA1ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA1ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA1ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA1ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA1ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA1ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA1ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA1ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA1ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA1ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA1"

    public static class templateA2_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA2"
    // GrammarShellForMancoosi.g:1306:1: templateA2 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA2_return templateA2() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA2_return retval = new GrammarShellForMancoosiParser.templateA2_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token MINUSGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:1307:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:1307:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-desktop-database' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-desktop-database' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA21035); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:14: (TK_1= '\\n' )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==78) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA21041); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA21048); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:58: (DQUOTEGen= DQUOTE )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==DQUOTE) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA21053); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA21059);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:1307:114: (DQUOTEGen_1= DQUOTE )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==DQUOTE) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA21064); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA21070); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:147: (DQUOTEGen_2= DQUOTE )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DQUOTE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA21075); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA21081); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:183: (DQUOTEGen_3= DQUOTE )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==DQUOTE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA21086); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA21092); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:212: (TK_3= '\\n' )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==78) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA21098); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA21105); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:238: (TK_4= '\\n' )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==78) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:240: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA21111); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA21118); if (state.failed) return retval;
            TK_6=(Token)match(input,82,FOLLOW_82_in_templateA21123); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA21128); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA21133); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA21138); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA21143); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA21148); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA21153); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA21158); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:419: (TK_9= '\\n' )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==78) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:421: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA21164); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,82,FOLLOW_82_in_templateA21171); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA21176); if (state.failed) return retval;
            TK_11=(Token)match(input,85,FOLLOW_85_in_templateA21181); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:493: (TK_12= '\\n' | TK_13= ';' )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==78) ) {
                alt23=1;
            }
            else if ( (LA23_0==83) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:495: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA21187); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1307:509: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA21194); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA21200); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1307:532: (TK_15= '\\n' | TK_16= ';' )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==78) ) {
                alt24=1;
            }
            else if ( (LA24_0==83) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // GrammarShellForMancoosi.g:1307:534: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA21206); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1307:548: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA21213); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA2ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA2ReturnNode.setKind("templateA2");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA2ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA2ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA2ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA2ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA2ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA2ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA2ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA2ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA2ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA2ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA2ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA2ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA2ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA2ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA2ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA2ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA2ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA2"

    public static class templateA3_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA3"
    // GrammarShellForMancoosi.g:1482:1: templateA3 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'install-docs' MINUSGen= MINUS TK_11= 'i' doc_idGen+= doc_id (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA3_return templateA3() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA3_return retval = new GrammarShellForMancoosiParser.templateA3_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token MINUSGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        List list_doc_idGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope doc_idGen = null;
        try {
            // GrammarShellForMancoosi.g:1483:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'install-docs' MINUSGen= MINUS TK_11= 'i' doc_idGen+= doc_id (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:1483:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'install-docs' MINUSGen= MINUS TK_11= 'i' doc_idGen+= doc_id (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA31236); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:14: (TK_1= '\\n' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==78) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA31242); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA31249); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:58: (DQUOTEGen= DQUOTE )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==DQUOTE) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA31254); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA31260);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:1483:114: (DQUOTEGen_1= DQUOTE )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==DQUOTE) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA31265); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA31271); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:147: (DQUOTEGen_2= DQUOTE )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==DQUOTE) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA31276); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA31282); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:186: (DQUOTEGen_3= DQUOTE )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==DQUOTE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA31287); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA31293); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:215: (TK_3= '\\n' )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==78) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA31299); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA31306); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:241: (TK_4= '\\n' )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==78) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA31312); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA31319); if (state.failed) return retval;
            TK_6=(Token)match(input,88,FOLLOW_88_in_templateA31324); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA31329); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA31334); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA31339); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA31344); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA31349); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA31354); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA31359); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:411: (TK_9= '\\n' )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==78) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:413: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA31365); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,88,FOLLOW_88_in_templateA31372); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA31377); if (state.failed) return retval;
            TK_11=(Token)match(input,89,FOLLOW_89_in_templateA31382); if (state.failed) return retval;
            pushFollow(FOLLOW_doc_id_in_templateA31387);
            doc_idGen=doc_id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_doc_idGen==null) list_doc_idGen=new ArrayList();
            list_doc_idGen.add(doc_idGen);

            // GrammarShellForMancoosi.g:1483:493: (TK_12= '\\n' | TK_13= ';' )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==78) ) {
                alt33=1;
            }
            else if ( (LA33_0==83) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:495: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA31393); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1483:509: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA31400); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA31406); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1483:532: (TK_15= '\\n' | TK_16= ';' )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==78) ) {
                alt34=1;
            }
            else if ( (LA34_0==83) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // GrammarShellForMancoosi.g:1483:534: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA31412); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1483:548: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA31419); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA3ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA3ReturnNode.setKind("templateA3");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA3ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA3ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA3ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA3ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA3ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA3ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA3ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA3ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA3ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA3ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA3ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA3ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA3ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA3ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA3ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_doc_idGen != null) {
              	        for(Iterator it = list_doc_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.doc_id_return r = (GrammarShellForMancoosiParser.doc_id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("doc_id");
              	            	templateA3ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA3ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA3ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA3"

    public static class templateA4_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA4"
    // GrammarShellForMancoosi.g:1668:1: templateA4 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK (TK_5= '\\n' )? ANDGen= AND (TK_6= '\\n' )? TK_7= 'which' TK_8= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'install-docs' MINUSGen= MINUS TK_13= 'r' doc_idGen+= doc_id (TK_14= '\\n' | TK_15= ';' ) TK_16= 'fi' (TK_17= '\\n' | TK_18= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA4_return templateA4() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA4_return retval = new GrammarShellForMancoosiParser.templateA4_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token ORGen=null;
        Token TK_3=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_6=null;
        Token TK_4=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_1=null;
        Token TK_5=null;
        Token ANDGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token MINUSGen=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_doc_idGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope doc_idGen = null;
        try {
            // GrammarShellForMancoosi.g:1669:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK (TK_5= '\\n' )? ANDGen= AND (TK_6= '\\n' )? TK_7= 'which' TK_8= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'install-docs' MINUSGen= MINUS TK_13= 'r' doc_idGen+= doc_id (TK_14= '\\n' | TK_15= ';' ) TK_16= 'fi' (TK_17= '\\n' | TK_18= ';' ) )
            // GrammarShellForMancoosi.g:1669:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK (TK_5= '\\n' )? ANDGen= AND (TK_6= '\\n' )? TK_7= 'which' TK_8= 'install-docs' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'install-docs' MINUSGen= MINUS TK_13= 'r' doc_idGen+= doc_id (TK_14= '\\n' | TK_15= ';' ) TK_16= 'fi' (TK_17= '\\n' | TK_18= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA41442); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:14: (TK_1= '\\n' )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==78) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // GrammarShellForMancoosi.g:1669:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA41448); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA41455); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:58: (DQUOTEGen= DQUOTE )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DQUOTE) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41460); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA41466);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:1669:114: (DQUOTEGen_1= DQUOTE )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DQUOTE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41471); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA41477); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:147: (DQUOTEGen_2= DQUOTE )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==DQUOTE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41482); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA41488); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:183: (DQUOTEGen_3= DQUOTE )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==DQUOTE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41493); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA41499); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA41504); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:222: (TK_3= '\\n' )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==78) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // GrammarShellForMancoosi.g:1669:224: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA41510); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA41517); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:270: (DQUOTEGen_4= DQUOTE )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==DQUOTE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_4= DQUOTE
                    {
                    DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41522); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA41528);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            // GrammarShellForMancoosi.g:1669:328: (DQUOTEGen_5= DQUOTE )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==DQUOTE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_5= DQUOTE
                    {
                    DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41533); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA41539); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:363: (DQUOTEGen_6= DQUOTE )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==DQUOTE) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_6= DQUOTE
                    {
                    DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41544); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,90,FOLLOW_90_in_templateA41550); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:400: (DQUOTEGen_7= DQUOTE )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==DQUOTE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_7= DQUOTE
                    {
                    DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA41555); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA41561); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:431: (TK_5= '\\n' )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==78) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // GrammarShellForMancoosi.g:1669:433: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA41567); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA41574); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1669:457: (TK_6= '\\n' )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==78) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // GrammarShellForMancoosi.g:1669:459: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA41580); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,81,FOLLOW_81_in_templateA41587); if (state.failed) return retval;
            TK_8=(Token)match(input,88,FOLLOW_88_in_templateA41592); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA41597); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA41602); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA41608); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA41613); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA41618); if (state.failed) return retval;
            TK_9=(Token)match(input,83,FOLLOW_83_in_templateA41623); if (state.failed) return retval;
            TK_10=(Token)match(input,84,FOLLOW_84_in_templateA41628); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1670:86: (TK_11= '\\n' )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==78) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // GrammarShellForMancoosi.g:1670:88: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA41634); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,88,FOLLOW_88_in_templateA41641); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA41646); if (state.failed) return retval;
            TK_13=(Token)match(input,91,FOLLOW_91_in_templateA41651); if (state.failed) return retval;
            pushFollow(FOLLOW_doc_id_in_templateA41656);
            doc_idGen=doc_id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_doc_idGen==null) list_doc_idGen=new ArrayList();
            list_doc_idGen.add(doc_idGen);

            // GrammarShellForMancoosi.g:1670:169: (TK_14= '\\n' | TK_15= ';' )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==78) ) {
                alt48=1;
            }
            else if ( (LA48_0==83) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // GrammarShellForMancoosi.g:1670:171: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA41662); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1670:185: TK_15= ';'
                    {
                    TK_15=(Token)match(input,83,FOLLOW_83_in_templateA41669); if (state.failed) return retval;

                    }
                    break;

            }

            TK_16=(Token)match(input,86,FOLLOW_86_in_templateA41675); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1670:208: (TK_17= '\\n' | TK_18= ';' )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==78) ) {
                alt49=1;
            }
            else if ( (LA49_0==83) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // GrammarShellForMancoosi.g:1670:210: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA41681); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1670:224: TK_18= ';'
                    {
                    TK_18=(Token)match(input,83,FOLLOW_83_in_templateA41688); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA4ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA4ReturnNode.setKind("templateA4");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA4ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA4ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA4ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA4ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA4ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA4ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA4ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA4ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA4ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA4ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA4ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA4ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA4ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA4ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA4ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA4ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA4ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_doc_idGen != null) {
              	        for(Iterator it = list_doc_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.doc_id_return r = (GrammarShellForMancoosiParser.doc_id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("doc_id");
              	            	templateA4ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA4ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA4ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA4"

    public static class templateA5_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA5"
    // GrammarShellForMancoosi.g:1915:1: templateA5 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' PATHEMACSINSTGen= PATHEMACSINST RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? PATHEMACSINSTGen_1= PATHEMACSINST packGen+= pack (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA5_return templateA5() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA5_return retval = new GrammarShellForMancoosiParser.templateA5_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token PATHEMACSINSTGen=null;
        Token RSBRACKGen_1=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token PATHEMACSINSTGen_1=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        List list_input_variableGen=null;
        List list_packGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope packGen = null;
        try {
            // GrammarShellForMancoosi.g:1916:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' PATHEMACSINSTGen= PATHEMACSINST RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? PATHEMACSINSTGen_1= PATHEMACSINST packGen+= pack (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) )
            // GrammarShellForMancoosi.g:1916:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' PATHEMACSINSTGen= PATHEMACSINST RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? PATHEMACSINSTGen_1= PATHEMACSINST packGen+= pack (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA51712); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:14: (TK_1= '\\n' )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==78) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // GrammarShellForMancoosi.g:1916:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA51718); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA51725); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:58: (DQUOTEGen= DQUOTE )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==DQUOTE) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA51730); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA51736);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:1916:114: (DQUOTEGen_1= DQUOTE )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==DQUOTE) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA51741); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA51747); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:147: (DQUOTEGen_2= DQUOTE )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DQUOTE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA51752); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA51758); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:186: (DQUOTEGen_3= DQUOTE )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==DQUOTE) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA51763); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA51769); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:215: (TK_3= '\\n' )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==78) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // GrammarShellForMancoosi.g:1916:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA51775); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA51782); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:241: (TK_4= '\\n' )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==78) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // GrammarShellForMancoosi.g:1916:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA51788); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA51795); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA51800); if (state.failed) return retval;
            TK_5=(Token)match(input,92,FOLLOW_92_in_templateA51805); if (state.failed) return retval;
            PATHEMACSINSTGen=(Token)match(input,PATHEMACSINST,FOLLOW_PATHEMACSINST_in_templateA51810); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA51815); if (state.failed) return retval;
            TK_6=(Token)match(input,83,FOLLOW_83_in_templateA51820); if (state.failed) return retval;
            TK_7=(Token)match(input,84,FOLLOW_84_in_templateA51825); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1916:380: (TK_8= '\\n' )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==78) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // GrammarShellForMancoosi.g:1916:382: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA51831); if (state.failed) return retval;

                    }
                    break;

            }

            PATHEMACSINSTGen_1=(Token)match(input,PATHEMACSINST,FOLLOW_PATHEMACSINST_in_templateA51840); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_in_templateA51845);
            packGen=pack();

            state._fsp--;
            if (state.failed) return retval;
            if (list_packGen==null) list_packGen=new ArrayList();
            list_packGen.add(packGen);

            // GrammarShellForMancoosi.g:1917:51: (TK_9= '\\n' | TK_10= ';' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==78) ) {
                alt58=1;
            }
            else if ( (LA58_0==83) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // GrammarShellForMancoosi.g:1917:53: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA51851); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1917:66: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA51858); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,86,FOLLOW_86_in_templateA51864); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:1917:89: (TK_12= '\\n' | TK_13= ';' )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==78) ) {
                alt59=1;
            }
            else if ( (LA59_0==83) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // GrammarShellForMancoosi.g:1917:91: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA51870); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:1917:105: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA51877); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA5ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA5ReturnNode.setKind("templateA5");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA5ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA5ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA5ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA5ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA5ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA5ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA5ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA5ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA5ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA5ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA5ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHEMACSINSTGen != null) {
              			Leaf PATHEMACSINSTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", (PATHEMACSINSTGen!=null?PATHEMACSINSTGen.getText():null), PATHEMACSINSTGen.getCharPositionInLine(), PATHEMACSINSTGen.getLine());
              			templateA5ReturnNode.getChildren().add(PATHEMACSINSTGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA5ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHEMACSINSTGen_1 != null) {
              			Leaf PATHEMACSINSTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", (PATHEMACSINSTGen_1!=null?PATHEMACSINSTGen_1.getText():null), PATHEMACSINSTGen_1.getCharPositionInLine(), PATHEMACSINSTGen_1.getLine());
              			templateA5ReturnNode.getChildren().add(PATHEMACSINSTGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_packGen != null) {
              	        for(Iterator it = list_packGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_return r = (GrammarShellForMancoosiParser.pack_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack");
              	            	templateA5ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA5ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA5ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA5"

    public static class templateA6_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA6"
    // GrammarShellForMancoosi.g:2082:1: templateA6 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' PATHEMACSREMGen= PATHEMACSREM RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? PATHEMACSREMGen_1= PATHEMACSREM packGen+= pack (TK_6= '\\n' | TK_7= ';' ) TK_8= 'fi' (TK_9= '\\n' | TK_10= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA6_return templateA6() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA6_return retval = new GrammarShellForMancoosiParser.templateA6_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token PATHEMACSREMGen=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token PATHEMACSREMGen_1=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        List list_packGen=null;
        RuleReturnScope packGen = null;
        try {
            // GrammarShellForMancoosi.g:2083:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' PATHEMACSREMGen= PATHEMACSREM RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? PATHEMACSREMGen_1= PATHEMACSREM packGen+= pack (TK_6= '\\n' | TK_7= ';' ) TK_8= 'fi' (TK_9= '\\n' | TK_10= ';' ) )
            // GrammarShellForMancoosi.g:2083:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' PATHEMACSREMGen= PATHEMACSREM RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? PATHEMACSREMGen_1= PATHEMACSREM packGen+= pack (TK_6= '\\n' | TK_7= ';' ) TK_8= 'fi' (TK_9= '\\n' | TK_10= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA61901); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2083:15: (TK_1= '\\n' )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==78) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // GrammarShellForMancoosi.g:2083:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA61907); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA61914); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA61919); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA61924); if (state.failed) return retval;
            PATHEMACSREMGen=(Token)match(input,PATHEMACSREM,FOLLOW_PATHEMACSREM_in_templateA61929); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA61934); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA61939); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA61944); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2083:148: (TK_5= '\\n' )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==78) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // GrammarShellForMancoosi.g:2083:150: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA61950); if (state.failed) return retval;

                    }
                    break;

            }

            PATHEMACSREMGen_1=(Token)match(input,PATHEMACSREM,FOLLOW_PATHEMACSREM_in_templateA61958); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_in_templateA61963);
            packGen=pack();

            state._fsp--;
            if (state.failed) return retval;
            if (list_packGen==null) list_packGen=new ArrayList();
            list_packGen.add(packGen);

            // GrammarShellForMancoosi.g:2083:210: (TK_6= '\\n' | TK_7= ';' )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==78) ) {
                alt62=1;
            }
            else if ( (LA62_0==83) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // GrammarShellForMancoosi.g:2083:212: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA61969); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2083:225: TK_7= ';'
                    {
                    TK_7=(Token)match(input,83,FOLLOW_83_in_templateA61976); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,86,FOLLOW_86_in_templateA61982); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2083:246: (TK_9= '\\n' | TK_10= ';' )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==78) ) {
                alt63=1;
            }
            else if ( (LA63_0==83) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // GrammarShellForMancoosi.g:2083:248: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA61988); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2083:261: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA61995); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA6ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA6ReturnNode.setKind("templateA6");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA6ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA6ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHEMACSREMGen != null) {
              			Leaf PATHEMACSREMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", (PATHEMACSREMGen!=null?PATHEMACSREMGen.getText():null), PATHEMACSREMGen.getCharPositionInLine(), PATHEMACSREMGen.getLine());
              			templateA6ReturnNode.getChildren().add(PATHEMACSREMGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA6ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHEMACSREMGen_1 != null) {
              			Leaf PATHEMACSREMGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", (PATHEMACSREMGen_1!=null?PATHEMACSREMGen_1.getText():null), PATHEMACSREMGen_1.getCharPositionInLine(), PATHEMACSREMGen_1.getLine());
              			templateA6ReturnNode.getChildren().add(PATHEMACSREMGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_packGen != null) {
              	        for(Iterator it = list_packGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_return r = (GrammarShellForMancoosiParser.pack_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack");
              	            	templateA6ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA6ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA6ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA6"

    public static class templateA7_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA7"
    // GrammarShellForMancoosi.g:2183:1: templateA7 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-gconf-defaults' (TK_11= '\\n' | TK_12= ';' ) TK_13= 'fi' (TK_14= '\\n' | TK_15= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA7_return templateA7() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA7_return retval = new GrammarShellForMancoosiParser.templateA7_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:2184:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-gconf-defaults' (TK_11= '\\n' | TK_12= ';' ) TK_13= 'fi' (TK_14= '\\n' | TK_15= ';' ) )
            // GrammarShellForMancoosi.g:2184:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'update-gconf-defaults' (TK_11= '\\n' | TK_12= ';' ) TK_13= 'fi' (TK_14= '\\n' | TK_15= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA72018); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:14: (TK_1= '\\n' )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==78) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA72024); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA72031); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:58: (DQUOTEGen= DQUOTE )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DQUOTE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA72036); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA72042);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:2184:114: (DQUOTEGen_1= DQUOTE )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DQUOTE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA72047); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA72053); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:147: (DQUOTEGen_2= DQUOTE )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==DQUOTE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA72058); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA72064); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:186: (DQUOTEGen_3= DQUOTE )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==DQUOTE) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA72069); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA72075); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:215: (TK_3= '\\n' )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==78) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA72081); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA72088); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:241: (TK_4= '\\n' )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==78) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA72094); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA72101); if (state.failed) return retval;
            TK_6=(Token)match(input,93,FOLLOW_93_in_templateA72106); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA72111); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA72116); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA72121); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA72126); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA72131); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA72136); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA72141); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:420: (TK_9= '\\n' )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==78) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:422: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA72147); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,93,FOLLOW_93_in_templateA72154); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:465: (TK_11= '\\n' | TK_12= ';' )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==78) ) {
                alt72=1;
            }
            else if ( (LA72_0==83) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:467: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA72160); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2184:481: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA72167); if (state.failed) return retval;

                    }
                    break;

            }

            TK_13=(Token)match(input,86,FOLLOW_86_in_templateA72173); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2184:504: (TK_14= '\\n' | TK_15= ';' )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==78) ) {
                alt73=1;
            }
            else if ( (LA73_0==83) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // GrammarShellForMancoosi.g:2184:506: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA72179); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2184:520: TK_15= ';'
                    {
                    TK_15=(Token)match(input,83,FOLLOW_83_in_templateA72186); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA7ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA7ReturnNode.setKind("templateA7");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA7ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA7ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA7ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA7ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA7ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA7ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA7ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA7ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA7ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA7ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA7ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA7ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA7ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA7ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA7ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA7ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA7"

    public static class templateA8_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA8"
    // GrammarShellForMancoosi.g:2349:1: templateA8 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-gconf-defaults' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA8_return templateA8() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA8_return retval = new GrammarShellForMancoosiParser.templateA8_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;

        try {
            // GrammarShellForMancoosi.g:2350:1: (TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-gconf-defaults' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:2350:4: TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-gconf-defaults' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-gconf-defaults' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA82210); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2350:14: (TK_1= '\\n' )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==78) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // GrammarShellForMancoosi.g:2350:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA82216); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,81,FOLLOW_81_in_templateA82224); if (state.failed) return retval;
            TK_3=(Token)match(input,93,FOLLOW_93_in_templateA82229); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA82234); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA82239); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA82244); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA82249); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA82254); if (state.failed) return retval;
            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA82259); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA82264); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2350:194: (TK_6= '\\n' )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==78) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // GrammarShellForMancoosi.g:2350:196: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA82270); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,93,FOLLOW_93_in_templateA82277); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2350:238: (TK_8= '\\n' | TK_9= ';' )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==78) ) {
                alt76=1;
            }
            else if ( (LA76_0==83) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // GrammarShellForMancoosi.g:2350:240: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA82283); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2350:253: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA82290); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA82296); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2350:275: (TK_11= '\\n' | TK_12= ';' )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==78) ) {
                alt77=1;
            }
            else if ( (LA77_0==83) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // GrammarShellForMancoosi.g:2350:277: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA82302); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2350:291: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA82309); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA8ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA8ReturnNode.setKind("templateA8");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA8ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA8ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA8ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA8ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA8ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA8ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA8ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA8"

    public static class templateA9_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA9"
    // GrammarShellForMancoosi.g:2450:1: templateA9 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'gconf-schemas' DMINUSGen= DMINUS TK_7= 'register' (schemasGen+= schemas )+ (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA9_return templateA9() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA9_return retval = new GrammarShellForMancoosiParser.templateA9_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token DMINUSGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        List list_input_variableGen=null;
        List list_schemasGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope schemasGen = null;
        try {
            // GrammarShellForMancoosi.g:2451:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'gconf-schemas' DMINUSGen= DMINUS TK_7= 'register' (schemasGen+= schemas )+ (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:2451:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'gconf-schemas' DMINUSGen= DMINUS TK_7= 'register' (schemasGen+= schemas )+ (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA92332); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:14: (TK_1= '\\n' )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==78) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // GrammarShellForMancoosi.g:2451:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA92338); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA92345); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:58: (DQUOTEGen= DQUOTE )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==DQUOTE) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA92350); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA92356);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:2451:114: (DQUOTEGen_1= DQUOTE )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==DQUOTE) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA92361); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA92367); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:147: (DQUOTEGen_2= DQUOTE )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==DQUOTE) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA92372); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA92378); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:186: (DQUOTEGen_3= DQUOTE )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DQUOTE) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA92383); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA92389); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA92395); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA92400); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:239: (TK_5= '\\n' )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==78) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // GrammarShellForMancoosi.g:2451:241: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA92406); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,94,FOLLOW_94_in_templateA92414); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA92419); if (state.failed) return retval;
            TK_7=(Token)match(input,95,FOLLOW_95_in_templateA92424); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:322: (schemasGen+= schemas )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==PATHNULL||(LA84_0>=PATHEMACSINST && LA84_0<=PATHEMACSREM)||(LA84_0>=PATHGCONFSCH && LA84_0<=UNDERSCORE)||LA84_0==PATHCOMPYTH||(LA84_0>=PATHMIME && LA84_0<=PATHSUID)||LA84_0==PATHSS||LA84_0==PATHP||(LA84_0>=PATHXWINDOW && LA84_0<=PATHSCRIPT)||(LA84_0>=PATHREL && LA84_0<=ID)||(LA84_0>=80 && LA84_0<=82)||LA84_0==85||(LA84_0>=87 && LA84_0<=93)||(LA84_0>=95 && LA84_0<=101)||LA84_0==103||LA84_0==105||(LA84_0>=107 && LA84_0<=108)||(LA84_0>=110 && LA84_0<=112)||(LA84_0>=114 && LA84_0<=119)||(LA84_0>=121 && LA84_0<=144)||(LA84_0>=146 && LA84_0<=159)||(LA84_0>=161 && LA84_0<=175)||(LA84_0>=177 && LA84_0<=188)||(LA84_0>=190 && LA84_0<=195)||(LA84_0>=201 && LA84_0<=207)) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: schemasGen+= schemas
            	    {
            	    pushFollow(FOLLOW_schemas_in_templateA92429);
            	    schemasGen=schemas();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_schemasGen==null) list_schemasGen=new ArrayList();
            	    list_schemasGen.add(schemasGen);


            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);

            // GrammarShellForMancoosi.g:2451:333: (TK_8= '\\n' | TK_9= ';' )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==78) ) {
                alt85=1;
            }
            else if ( (LA85_0==83) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // GrammarShellForMancoosi.g:2451:335: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA92436); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2451:348: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA92443); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA92449); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2451:370: (TK_11= '\\n' | TK_12= ';' )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==78) ) {
                alt86=1;
            }
            else if ( (LA86_0==83) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // GrammarShellForMancoosi.g:2451:372: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA92455); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2451:386: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA92462); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA9ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA9ReturnNode.setKind("templateA9");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA9ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA9ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA9ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA9ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA9ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA9ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA9ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA9ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA9ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_schemasGen != null) {
              	        for(Iterator it = list_schemasGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.schemas_return r = (GrammarShellForMancoosiParser.schemas_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schemas");
              	            	templateA9ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA9ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA9ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA9"

    public static class templateA10_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA10"
    // GrammarShellForMancoosi.g:2586:1: templateA10 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'gconf-schemas' DMINUSGen= DMINUS TK_9= 'unregister' (schemasGen+= schemas )+ (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA10_return templateA10() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA10_return retval = new GrammarShellForMancoosiParser.templateA10_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token ORGen=null;
        Token TK_3=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_6=null;
        Token TK_4=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_1=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token DMINUSGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_schemasGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope schemasGen = null;
        try {
            // GrammarShellForMancoosi.g:2587:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'gconf-schemas' DMINUSGen= DMINUS TK_9= 'unregister' (schemasGen+= schemas )+ (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) )
            // GrammarShellForMancoosi.g:2587:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'gconf-schemas' DMINUSGen= DMINUS TK_9= 'unregister' (schemasGen+= schemas )+ (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA102486); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:15: (TK_1= '\\n' )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==78) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // GrammarShellForMancoosi.g:2587:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA102492); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA102499); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:59: (DQUOTEGen= DQUOTE )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==DQUOTE) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102504); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA102510);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:2587:115: (DQUOTEGen_1= DQUOTE )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==DQUOTE) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102515); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA102521); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:148: (DQUOTEGen_2= DQUOTE )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DQUOTE) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102526); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA102532); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:184: (DQUOTEGen_3= DQUOTE )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DQUOTE) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102537); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA102543); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA102548); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:223: (TK_3= '\\n' )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==78) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // GrammarShellForMancoosi.g:2587:225: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA102554); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA102561); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:271: (DQUOTEGen_4= DQUOTE )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DQUOTE) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_4= DQUOTE
                    {
                    DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102566); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA102572);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            // GrammarShellForMancoosi.g:2587:329: (DQUOTEGen_5= DQUOTE )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==DQUOTE) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_5= DQUOTE
                    {
                    DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102577); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA102583); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:364: (DQUOTEGen_6= DQUOTE )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==DQUOTE) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_6= DQUOTE
                    {
                    DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102588); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,90,FOLLOW_90_in_templateA102594); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:401: (DQUOTEGen_7= DQUOTE )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==DQUOTE) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_7= DQUOTE
                    {
                    DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA102599); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA102605); if (state.failed) return retval;
            TK_5=(Token)match(input,83,FOLLOW_83_in_templateA102610); if (state.failed) return retval;
            TK_6=(Token)match(input,84,FOLLOW_84_in_templateA102615); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:455: (TK_7= '\\n' )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==78) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // GrammarShellForMancoosi.g:2587:457: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA102621); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,94,FOLLOW_94_in_templateA102629); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA102634); if (state.failed) return retval;
            TK_9=(Token)match(input,96,FOLLOW_96_in_templateA102639); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:540: (schemasGen+= schemas )+
            int cnt98=0;
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==PATHNULL||(LA98_0>=PATHEMACSINST && LA98_0<=PATHEMACSREM)||(LA98_0>=PATHGCONFSCH && LA98_0<=UNDERSCORE)||LA98_0==PATHCOMPYTH||(LA98_0>=PATHMIME && LA98_0<=PATHSUID)||LA98_0==PATHSS||LA98_0==PATHP||(LA98_0>=PATHXWINDOW && LA98_0<=PATHSCRIPT)||(LA98_0>=PATHREL && LA98_0<=ID)||(LA98_0>=80 && LA98_0<=82)||LA98_0==85||(LA98_0>=87 && LA98_0<=93)||(LA98_0>=95 && LA98_0<=101)||LA98_0==103||LA98_0==105||(LA98_0>=107 && LA98_0<=108)||(LA98_0>=110 && LA98_0<=112)||(LA98_0>=114 && LA98_0<=119)||(LA98_0>=121 && LA98_0<=144)||(LA98_0>=146 && LA98_0<=159)||(LA98_0>=161 && LA98_0<=175)||(LA98_0>=177 && LA98_0<=188)||(LA98_0>=190 && LA98_0<=195)||(LA98_0>=201 && LA98_0<=207)) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: schemasGen+= schemas
            	    {
            	    pushFollow(FOLLOW_schemas_in_templateA102644);
            	    schemasGen=schemas();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_schemasGen==null) list_schemasGen=new ArrayList();
            	    list_schemasGen.add(schemasGen);


            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);

            // GrammarShellForMancoosi.g:2587:551: (TK_10= '\\n' | TK_11= ';' )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==78) ) {
                alt99=1;
            }
            else if ( (LA99_0==83) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // GrammarShellForMancoosi.g:2587:553: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA102651); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2587:567: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA102658); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,86,FOLLOW_86_in_templateA102664); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2587:590: (TK_13= '\\n' | TK_14= ';' )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==78) ) {
                alt100=1;
            }
            else if ( (LA100_0==83) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // GrammarShellForMancoosi.g:2587:592: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA102670); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2587:606: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA102677); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA10ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA10ReturnNode.setKind("templateA10");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA10ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA10ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA10ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA10ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA10ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA10ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA10ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA10ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA10ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA10ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA10ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_schemasGen != null) {
              	        for(Iterator it = list_schemasGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.schemas_return r = (GrammarShellForMancoosiParser.schemas_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schemas");
              	            	templateA10ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA10ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA10ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA10"

    public static class templateA11_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA11"
    // GrammarShellForMancoosi.g:2782:1: templateA11 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'OLD_DIR' EQUGen_1= EQU PATHGCONFSCHGen= PATHGCONFSCH (TK_7= '\\n' )? TK_8= 'SCHEMA_FILES' EQUGen_2= EQU DQUOTEGen_4= DQUOTE (schemasGen+= schemas )+ DQUOTEGen_5= DQUOTE TK_9= '\\n' TK_10= 'if' (TK_11= '\\n' )? LSBRACKGen_1= LSBRACK (TK_12= '\\n' )? MINUSGen= MINUS TK_13= 'd' TK_14= '$OLD_DIR' RSBRACKGen_1= RSBRACK TK_15= ';' TK_16= 'then' (TK_17= '\\n' )? TK_18= 'for' (TK_19= '\\n' )? TK_20= 'SCHEMA' (TK_21= '\\n' )? TK_22= 'in' (TK_23= '\\n' )? TK_24= '$SCHEMA_FILES' TK_25= ';' TK_26= 'do' TK_27= '\\n' TK_28= 'rm' MINUSGen_1= MINUS TK_29= 'f' PATHOLDSCHEMAGen= PATHOLDSCHEMA TK_30= '\\n' TK_31= 'done' (TK_32= '\\n' | TK_33= ';' ) TK_34= 'rmdir' MINUSGen_2= MINUS TK_35= 'p' DMINUSGen= DMINUS TK_36= 'ignore-fail-on-non-empty' TK_37= '$OLD_DIR' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA11_return templateA11() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA11_return retval = new GrammarShellForMancoosiParser.templateA11_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token EQUGen_1=null;
        Token PATHGCONFSCHGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token EQUGen_2=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token LSBRACKGen_1=null;
        Token TK_12=null;
        Token MINUSGen=null;
        Token TK_13=null;
        Token TK_14=null;
        Token RSBRACKGen_1=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token MINUSGen_1=null;
        Token TK_29=null;
        Token PATHOLDSCHEMAGen=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        Token MINUSGen_2=null;
        Token TK_35=null;
        Token DMINUSGen=null;
        Token TK_36=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        Token TK_41=null;
        Token TK_42=null;
        Token TK_43=null;
        Token TK_44=null;
        Token TK_45=null;
        List list_input_variableGen=null;
        List list_schemasGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope schemasGen = null;
        try {
            // GrammarShellForMancoosi.g:2783:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'OLD_DIR' EQUGen_1= EQU PATHGCONFSCHGen= PATHGCONFSCH (TK_7= '\\n' )? TK_8= 'SCHEMA_FILES' EQUGen_2= EQU DQUOTEGen_4= DQUOTE (schemasGen+= schemas )+ DQUOTEGen_5= DQUOTE TK_9= '\\n' TK_10= 'if' (TK_11= '\\n' )? LSBRACKGen_1= LSBRACK (TK_12= '\\n' )? MINUSGen= MINUS TK_13= 'd' TK_14= '$OLD_DIR' RSBRACKGen_1= RSBRACK TK_15= ';' TK_16= 'then' (TK_17= '\\n' )? TK_18= 'for' (TK_19= '\\n' )? TK_20= 'SCHEMA' (TK_21= '\\n' )? TK_22= 'in' (TK_23= '\\n' )? TK_24= '$SCHEMA_FILES' TK_25= ';' TK_26= 'do' TK_27= '\\n' TK_28= 'rm' MINUSGen_1= MINUS TK_29= 'f' PATHOLDSCHEMAGen= PATHOLDSCHEMA TK_30= '\\n' TK_31= 'done' (TK_32= '\\n' | TK_33= ';' ) TK_34= 'rmdir' MINUSGen_2= MINUS TK_35= 'p' DMINUSGen= DMINUS TK_36= 'ignore-fail-on-non-empty' TK_37= '$OLD_DIR' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' ) )
            // GrammarShellForMancoosi.g:2783:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'OLD_DIR' EQUGen_1= EQU PATHGCONFSCHGen= PATHGCONFSCH (TK_7= '\\n' )? TK_8= 'SCHEMA_FILES' EQUGen_2= EQU DQUOTEGen_4= DQUOTE (schemasGen+= schemas )+ DQUOTEGen_5= DQUOTE TK_9= '\\n' TK_10= 'if' (TK_11= '\\n' )? LSBRACKGen_1= LSBRACK (TK_12= '\\n' )? MINUSGen= MINUS TK_13= 'd' TK_14= '$OLD_DIR' RSBRACKGen_1= RSBRACK TK_15= ';' TK_16= 'then' (TK_17= '\\n' )? TK_18= 'for' (TK_19= '\\n' )? TK_20= 'SCHEMA' (TK_21= '\\n' )? TK_22= 'in' (TK_23= '\\n' )? TK_24= '$SCHEMA_FILES' TK_25= ';' TK_26= 'do' TK_27= '\\n' TK_28= 'rm' MINUSGen_1= MINUS TK_29= 'f' PATHOLDSCHEMAGen= PATHOLDSCHEMA TK_30= '\\n' TK_31= 'done' (TK_32= '\\n' | TK_33= ';' ) TK_34= 'rmdir' MINUSGen_2= MINUS TK_35= 'p' DMINUSGen= DMINUS TK_36= 'ignore-fail-on-non-empty' TK_37= '$OLD_DIR' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA112701); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:15: (TK_1= '\\n' )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==78) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // GrammarShellForMancoosi.g:2783:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA112707); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA112714); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:59: (DQUOTEGen= DQUOTE )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==DQUOTE) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112719); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA112725);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:2783:115: (DQUOTEGen_1= DQUOTE )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==DQUOTE) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112730); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA112736); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:148: (DQUOTEGen_2= DQUOTE )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==DQUOTE) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112741); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,97,FOLLOW_97_in_templateA112747); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:183: (DQUOTEGen_3= DQUOTE )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==DQUOTE) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112752); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA112758); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA112764); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA112769); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:236: (TK_5= '\\n' )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==78) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // GrammarShellForMancoosi.g:2783:238: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA112775); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,98,FOLLOW_98_in_templateA112782); if (state.failed) return retval;
            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA112787); if (state.failed) return retval;
            PATHGCONFSCHGen=(Token)match(input,PATHGCONFSCH,FOLLOW_PATHGCONFSCH_in_templateA112793); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:311: (TK_7= '\\n' )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==78) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // GrammarShellForMancoosi.g:2783:313: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA112799); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,99,FOLLOW_99_in_templateA112806); if (state.failed) return retval;
            EQUGen_2=(Token)match(input,EQU,FOLLOW_EQU_in_templateA112811); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112816); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:391: (schemasGen+= schemas )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==PATHNULL||(LA108_0>=PATHEMACSINST && LA108_0<=PATHEMACSREM)||(LA108_0>=PATHGCONFSCH && LA108_0<=UNDERSCORE)||LA108_0==PATHCOMPYTH||(LA108_0>=PATHMIME && LA108_0<=PATHSUID)||LA108_0==PATHSS||LA108_0==PATHP||(LA108_0>=PATHXWINDOW && LA108_0<=PATHSCRIPT)||(LA108_0>=PATHREL && LA108_0<=ID)||(LA108_0>=80 && LA108_0<=82)||LA108_0==85||(LA108_0>=87 && LA108_0<=93)||(LA108_0>=95 && LA108_0<=101)||LA108_0==103||LA108_0==105||(LA108_0>=107 && LA108_0<=108)||(LA108_0>=110 && LA108_0<=112)||(LA108_0>=114 && LA108_0<=119)||(LA108_0>=121 && LA108_0<=144)||(LA108_0>=146 && LA108_0<=159)||(LA108_0>=161 && LA108_0<=175)||(LA108_0>=177 && LA108_0<=188)||(LA108_0>=190 && LA108_0<=195)||(LA108_0>=201 && LA108_0<=207)) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: schemasGen+= schemas
            	    {
            	    pushFollow(FOLLOW_schemas_in_templateA112821);
            	    schemasGen=schemas();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_schemasGen==null) list_schemasGen=new ArrayList();
            	    list_schemasGen.add(schemasGen);


            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);

            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA112827); if (state.failed) return retval;
            TK_9=(Token)match(input,78,FOLLOW_78_in_templateA112832); if (state.failed) return retval;
            TK_10=(Token)match(input,79,FOLLOW_79_in_templateA112837); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2783:445: (TK_11= '\\n' )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==78) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // GrammarShellForMancoosi.g:2783:447: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA112843); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA112852); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:24: (TK_12= '\\n' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==78) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:26: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA112858); if (state.failed) return retval;

                    }
                    break;

            }

            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA112865); if (state.failed) return retval;
            TK_13=(Token)match(input,100,FOLLOW_100_in_templateA112870); if (state.failed) return retval;
            TK_14=(Token)match(input,101,FOLLOW_101_in_templateA112875); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA112880); if (state.failed) return retval;
            TK_15=(Token)match(input,83,FOLLOW_83_in_templateA112885); if (state.failed) return retval;
            TK_16=(Token)match(input,84,FOLLOW_84_in_templateA112890); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:131: (TK_17= '\\n' )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==78) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:133: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA112896); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,102,FOLLOW_102_in_templateA112903); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:159: (TK_19= '\\n' )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==78) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:161: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA112909); if (state.failed) return retval;

                    }
                    break;

            }

            TK_20=(Token)match(input,103,FOLLOW_103_in_templateA112916); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:190: (TK_21= '\\n' )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==78) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:192: TK_21= '\\n'
                    {
                    TK_21=(Token)match(input,78,FOLLOW_78_in_templateA112922); if (state.failed) return retval;

                    }
                    break;

            }

            TK_22=(Token)match(input,104,FOLLOW_104_in_templateA112929); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:217: (TK_23= '\\n' )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==78) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:219: TK_23= '\\n'
                    {
                    TK_23=(Token)match(input,78,FOLLOW_78_in_templateA112935); if (state.failed) return retval;

                    }
                    break;

            }

            TK_24=(Token)match(input,105,FOLLOW_105_in_templateA112942); if (state.failed) return retval;
            TK_25=(Token)match(input,83,FOLLOW_83_in_templateA112947); if (state.failed) return retval;
            TK_26=(Token)match(input,106,FOLLOW_106_in_templateA112952); if (state.failed) return retval;
            TK_27=(Token)match(input,78,FOLLOW_78_in_templateA112957); if (state.failed) return retval;
            TK_28=(Token)match(input,107,FOLLOW_107_in_templateA112963); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA112968); if (state.failed) return retval;
            TK_29=(Token)match(input,108,FOLLOW_108_in_templateA112973); if (state.failed) return retval;
            PATHOLDSCHEMAGen=(Token)match(input,PATHOLDSCHEMA,FOLLOW_PATHOLDSCHEMA_in_templateA112978); if (state.failed) return retval;
            TK_30=(Token)match(input,78,FOLLOW_78_in_templateA112983); if (state.failed) return retval;
            TK_31=(Token)match(input,109,FOLLOW_109_in_templateA112988); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2784:390: (TK_32= '\\n' | TK_33= ';' )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==78) ) {
                alt115=1;
            }
            else if ( (LA115_0==83) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // GrammarShellForMancoosi.g:2784:392: TK_32= '\\n'
                    {
                    TK_32=(Token)match(input,78,FOLLOW_78_in_templateA112994); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2784:406: TK_33= ';'
                    {
                    TK_33=(Token)match(input,83,FOLLOW_83_in_templateA113001); if (state.failed) return retval;

                    }
                    break;

            }

            TK_34=(Token)match(input,110,FOLLOW_110_in_templateA113008); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA113013); if (state.failed) return retval;
            TK_35=(Token)match(input,111,FOLLOW_111_in_templateA113018); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA113025); if (state.failed) return retval;
            TK_36=(Token)match(input,112,FOLLOW_112_in_templateA113030); if (state.failed) return retval;
            TK_37=(Token)match(input,101,FOLLOW_101_in_templateA113035); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2785:72: (TK_38= '\\n' | TK_39= ';' )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==78) ) {
                alt116=1;
            }
            else if ( (LA116_0==83) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // GrammarShellForMancoosi.g:2785:74: TK_38= '\\n'
                    {
                    TK_38=(Token)match(input,78,FOLLOW_78_in_templateA113041); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2785:88: TK_39= ';'
                    {
                    TK_39=(Token)match(input,83,FOLLOW_83_in_templateA113048); if (state.failed) return retval;

                    }
                    break;

            }

            TK_40=(Token)match(input,86,FOLLOW_86_in_templateA113054); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2785:111: (TK_41= '\\n' | TK_42= ';' )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==78) ) {
                alt117=1;
            }
            else if ( (LA117_0==83) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // GrammarShellForMancoosi.g:2785:113: TK_41= '\\n'
                    {
                    TK_41=(Token)match(input,78,FOLLOW_78_in_templateA113060); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2785:127: TK_42= ';'
                    {
                    TK_42=(Token)match(input,83,FOLLOW_83_in_templateA113067); if (state.failed) return retval;

                    }
                    break;

            }

            TK_43=(Token)match(input,86,FOLLOW_86_in_templateA113073); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:2785:150: (TK_44= '\\n' | TK_45= ';' )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==78) ) {
                alt118=1;
            }
            else if ( (LA118_0==83) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }
            switch (alt118) {
                case 1 :
                    // GrammarShellForMancoosi.g:2785:152: TK_44= '\\n'
                    {
                    TK_44=(Token)match(input,78,FOLLOW_78_in_templateA113079); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:2785:166: TK_45= ';'
                    {
                    TK_45=(Token)match(input,83,FOLLOW_83_in_templateA113086); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA11ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA11ReturnNode.setKind("templateA11");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA11ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA11ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA11ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA11ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA11ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHGCONFSCHGen != null) {
              			Leaf PATHGCONFSCHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHGCONFSCH", (PATHGCONFSCHGen!=null?PATHGCONFSCHGen.getText():null), PATHGCONFSCHGen.getCharPositionInLine(), PATHGCONFSCHGen.getLine());
              			templateA11ReturnNode.getChildren().add(PATHGCONFSCHGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_2 != null) {
              			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_2!=null?EQUGen_2.getText():null), EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
              			templateA11ReturnNode.getChildren().add(EQUGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_schemasGen != null) {
              	        for(Iterator it = list_schemasGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.schemas_return r = (GrammarShellForMancoosiParser.schemas_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("schemas");
              	            	templateA11ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA11ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA11ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA11ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA11ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA11ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHOLDSCHEMAGen != null) {
              			Leaf PATHOLDSCHEMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHOLDSCHEMA", (PATHOLDSCHEMAGen!=null?PATHOLDSCHEMAGen.getText():null), PATHOLDSCHEMAGen.getCharPositionInLine(), PATHOLDSCHEMAGen.getLine());
              			templateA11ReturnNode.getChildren().add(PATHOLDSCHEMAGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA11ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA11ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_41 != null) {
              			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_41!=null?TK_41.getText():null), TK_41.getCharPositionInLine(), TK_41.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_41Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_42 != null) {
              			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_42!=null?TK_42.getText():null), TK_42.getCharPositionInLine(), TK_42.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_42Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_43 != null) {
              			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_43!=null?TK_43.getText():null), TK_43.getCharPositionInLine(), TK_43.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_43Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_44 != null) {
              			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_44!=null?TK_44.getText():null), TK_44.getCharPositionInLine(), TK_44.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_44Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_45 != null) {
              			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_45!=null?TK_45.getText():null), TK_45.getCharPositionInLine(), TK_45.getLine());
              	 		templateA11ReturnNode.getChildren().add(TK_45Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA11ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA11"

    public static class templateA12_13_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA12_13"
    // GrammarShellForMancoosi.g:3140:1: templateA12_13 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-icon-caches' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-icon-caches' (dirlistGen+= dirlist (TK_8= '\\n' | TK_9= ';' )? )+ TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA12_13_return templateA12_13() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA12_13_return retval = new GrammarShellForMancoosiParser.templateA12_13_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        List list_dirlistGen=null;
        RuleReturnScope dirlistGen = null;
        try {
            // GrammarShellForMancoosi.g:3141:1: (TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-icon-caches' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-icon-caches' (dirlistGen+= dirlist (TK_8= '\\n' | TK_9= ';' )? )+ TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:3141:4: TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-icon-caches' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-icon-caches' (dirlistGen+= dirlist (TK_8= '\\n' | TK_9= ';' )? )+ TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA12_133110); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3141:14: (TK_1= '\\n' )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==78) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // GrammarShellForMancoosi.g:3141:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA12_133116); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,81,FOLLOW_81_in_templateA12_133124); if (state.failed) return retval;
            TK_3=(Token)match(input,113,FOLLOW_113_in_templateA12_133129); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA12_133134); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA12_133139); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA12_133144); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA12_133149); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA12_133154); if (state.failed) return retval;
            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA12_133159); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA12_133164); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3141:191: (TK_6= '\\n' )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==78) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // GrammarShellForMancoosi.g:3141:193: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA12_133170); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,113,FOLLOW_113_in_templateA12_133177); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3141:232: (dirlistGen+= dirlist (TK_8= '\\n' | TK_9= ';' )? )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==PATHNULL||(LA122_0>=PATHEMACSINST && LA122_0<=PATHEMACSREM)||(LA122_0>=PATHGCONFSCH && LA122_0<=PATHOLDSCHEMA)||LA122_0==PATHCOMPYTH||(LA122_0>=PATHMIME && LA122_0<=PATHSUID)||LA122_0==PATHSS||LA122_0==PATHP||(LA122_0>=PATHXWINDOW && LA122_0<=PATHSCRIPT)||(LA122_0>=PATHREL && LA122_0<=PATH)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:3141:234: dirlistGen+= dirlist (TK_8= '\\n' | TK_9= ';' )?
            	    {
            	    pushFollow(FOLLOW_dirlist_in_templateA12_133183);
            	    dirlistGen=dirlist();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirlistGen==null) list_dirlistGen=new ArrayList();
            	    list_dirlistGen.add(dirlistGen);

            	    // GrammarShellForMancoosi.g:3141:254: (TK_8= '\\n' | TK_9= ';' )?
            	    int alt121=3;
            	    int LA121_0 = input.LA(1);

            	    if ( (LA121_0==78) ) {
            	        alt121=1;
            	    }
            	    else if ( (LA121_0==83) ) {
            	        alt121=2;
            	    }
            	    switch (alt121) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:3141:256: TK_8= '\\n'
            	            {
            	            TK_8=(Token)match(input,78,FOLLOW_78_in_templateA12_133189); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // GrammarShellForMancoosi.g:3141:269: TK_9= ';'
            	            {
            	            TK_9=(Token)match(input,83,FOLLOW_83_in_templateA12_133196); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA12_133205); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3141:294: (TK_11= '\\n' | TK_12= ';' )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==78) ) {
                alt123=1;
            }
            else if ( (LA123_0==83) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // GrammarShellForMancoosi.g:3141:296: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA12_133211); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3141:310: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA12_133218); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA12_13ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA12_13ReturnNode.setKind("templateA12_13");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA12_13ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA12_13ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA12_13ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA12_13ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA12_13ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_7Leaf);
              	 	}

              		// Create a special CST Node for terminal dirlistGen aggregation
              		if(list_dirlistGen != null) {
              	    for(int pos = 0; pos < list_dirlistGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_dirlistGen != null) {		
              	    	GrammarShellForMancoosiParser.dirlist_return r = (GrammarShellForMancoosiParser.dirlist_return) list_dirlistGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("dirlist");
              	    		templateA12_13ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA12_13ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA12_13ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA12_13"

    public static class templateA14_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA14"
    // GrammarShellForMancoosi.g:3256:1: templateA14 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'install-info' DMINUSGen= DMINUS TK_7= 'quiet' fileGen+= file (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA14_return templateA14() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA14_return retval = new GrammarShellForMancoosiParser.templateA14_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token DMINUSGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        List list_input_variableGen=null;
        List list_fileGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope fileGen = null;
        try {
            // GrammarShellForMancoosi.g:3257:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'install-info' DMINUSGen= DMINUS TK_7= 'quiet' fileGen+= file (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:3257:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'install-info' DMINUSGen= DMINUS TK_7= 'quiet' fileGen+= file (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA143242); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:14: (TK_1= '\\n' )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==78) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // GrammarShellForMancoosi.g:3257:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA143248); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA143255); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:58: (DQUOTEGen= DQUOTE )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==DQUOTE) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA143260); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA143266);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:3257:114: (DQUOTEGen_1= DQUOTE )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==DQUOTE) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA143271); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA143277); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:147: (DQUOTEGen_2= DQUOTE )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==DQUOTE) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA143282); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA143288); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:186: (DQUOTEGen_3= DQUOTE )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==DQUOTE) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA143293); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA143299); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA143305); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA143310); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:239: (TK_5= '\\n' )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==78) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // GrammarShellForMancoosi.g:3257:241: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA143316); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,114,FOLLOW_114_in_templateA143323); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA143328); if (state.failed) return retval;
            TK_7=(Token)match(input,115,FOLLOW_115_in_templateA143333); if (state.failed) return retval;
            pushFollow(FOLLOW_file_in_templateA143338);
            fileGen=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen==null) list_fileGen=new ArrayList();
            list_fileGen.add(fileGen);

            // GrammarShellForMancoosi.g:3257:321: (TK_8= '\\n' | TK_9= ';' )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==78) ) {
                alt130=1;
            }
            else if ( (LA130_0==83) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // GrammarShellForMancoosi.g:3257:323: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA143344); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3257:336: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA143351); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA143357); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3257:358: (TK_11= '\\n' | TK_12= ';' )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==78) ) {
                alt131=1;
            }
            else if ( (LA131_0==83) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // GrammarShellForMancoosi.g:3257:360: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA143363); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3257:374: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA143370); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA14ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA14ReturnNode.setKind("templateA14");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA14ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA14ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA14ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA14ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA14ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA14ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA14ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA14ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA14ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_fileGen != null) {
              	        for(Iterator it = list_fileGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA14ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA14ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA14ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA14"

    public static class templateA15_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA15"
    // GrammarShellForMancoosi.g:3392:1: templateA15 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'install-info' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' fileGen+= file (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA15_return templateA15() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA15_return retval = new GrammarShellForMancoosiParser.templateA15_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ORGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_6=null;
        Token TK_5=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_1=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token DMINUSGen=null;
        Token TK_10=null;
        Token DMINUSGen_1=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_fileGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope fileGen = null;
        try {
            // GrammarShellForMancoosi.g:3393:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'install-info' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' fileGen+= file (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:3393:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'install-info' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' fileGen+= file (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA153394); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:14: (TK_1= '\\n' )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==78) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // GrammarShellForMancoosi.g:3393:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA153400); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA153407); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:58: (DQUOTEGen= DQUOTE )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==DQUOTE) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153412); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA153418);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:3393:114: (DQUOTEGen_1= DQUOTE )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==DQUOTE) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153423); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA153429); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:147: (DQUOTEGen_2= DQUOTE )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==DQUOTE) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153434); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA153440); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:183: (DQUOTEGen_3= DQUOTE )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==DQUOTE) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153445); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA153451); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:212: (TK_3= '\\n' )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==78) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // GrammarShellForMancoosi.g:3393:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA153457); if (state.failed) return retval;

                    }
                    break;

            }

            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA153464); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:236: (TK_4= '\\n' )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==78) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // GrammarShellForMancoosi.g:3393:238: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA153470); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA153477); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:284: (DQUOTEGen_4= DQUOTE )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==DQUOTE) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_4= DQUOTE
                    {
                    DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153482); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA153488);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            // GrammarShellForMancoosi.g:3393:342: (DQUOTEGen_5= DQUOTE )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==DQUOTE) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_5= DQUOTE
                    {
                    DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153493); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA153499); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:377: (DQUOTEGen_6= DQUOTE )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==DQUOTE) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_6= DQUOTE
                    {
                    DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153504); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,90,FOLLOW_90_in_templateA153510); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3393:414: (DQUOTEGen_7= DQUOTE )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==DQUOTE) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_7= DQUOTE
                    {
                    DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA153515); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA153521); if (state.failed) return retval;
            TK_6=(Token)match(input,83,FOLLOW_83_in_templateA153526); if (state.failed) return retval;
            TK_7=(Token)match(input,84,FOLLOW_84_in_templateA153533); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3394:15: (TK_8= '\\n' )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==78) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // GrammarShellForMancoosi.g:3394:17: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA153539); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,114,FOLLOW_114_in_templateA153546); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA153551); if (state.failed) return retval;
            TK_10=(Token)match(input,115,FOLLOW_115_in_templateA153556); if (state.failed) return retval;
            DMINUSGen_1=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA153561); if (state.failed) return retval;
            TK_11=(Token)match(input,87,FOLLOW_87_in_templateA153566); if (state.failed) return retval;
            pushFollow(FOLLOW_file_in_templateA153571);
            fileGen=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen==null) list_fileGen=new ArrayList();
            list_fileGen.add(fileGen);

            // GrammarShellForMancoosi.g:3394:134: (TK_12= '\\n' | TK_13= ';' )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==78) ) {
                alt144=1;
            }
            else if ( (LA144_0==83) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // GrammarShellForMancoosi.g:3394:136: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA153577); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3394:150: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA153584); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA153590); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3394:173: (TK_15= '\\n' | TK_16= ';' )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==78) ) {
                alt145=1;
            }
            else if ( (LA145_0==83) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // GrammarShellForMancoosi.g:3394:175: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA153596); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3394:189: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA153603); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA15ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA15ReturnNode.setKind("templateA15");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA15ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA15ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA15ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA15ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA15ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA15ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA15ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA15ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA15ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA15ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA15ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_1 != null) {
              			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_1!=null?DMINUSGen_1.getText():null), DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
              			templateA15ReturnNode.getChildren().add(DMINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_fileGen != null) {
              	        for(Iterator it = list_fileGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA15ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA15ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA15ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA15"

    public static class templateA16_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA16"
    // GrammarShellForMancoosi.g:3604:1: templateA16 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA16_return templateA16() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA16_return retval = new GrammarShellForMancoosiParser.templateA16_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token ORGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        List list_script_pathGen=null;
        List list_scriptGen=null;
        List list_initparmsGen=null;
        List list_error_handlerGen=null;
        RuleReturnScope script_pathGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope initparmsGen = null;
        RuleReturnScope error_handlerGen = null;
        try {
            // GrammarShellForMancoosi.g:3605:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) )
            // GrammarShellForMancoosi.g:3605:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA163627); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3605:15: (TK_1= '\\n' )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==78) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // GrammarShellForMancoosi.g:3605:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA163633); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA163640); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA163645); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA163650); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA163655); if (state.failed) return retval;
            pushFollow(FOLLOW_script_path_in_templateA163660);
            script_pathGen=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen==null) list_script_pathGen=new ArrayList();
            list_script_pathGen.add(script_pathGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA163665); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA163670); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA163675); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA163680); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3605:185: (TK_5= '\\n' )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==78) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // GrammarShellForMancoosi.g:3605:187: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA163686); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,116,FOLLOW_116_in_templateA163693); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA163698);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            // GrammarShellForMancoosi.g:3605:251: (initparmsGen+= initparms )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( ((LA148_0>=PATHNULL && LA148_0<=NUMBER)||LA148_0==MINUS||(LA148_0>=PATHEMACSINST && LA148_0<=PATHCOMPYTH)||(LA148_0>=PSINGLE && LA148_0<=TILDE)||LA148_0==BSLASH||(LA148_0>=PATHMIME && LA148_0<=PATHP)||(LA148_0>=PATHXWINDOW && LA148_0<=PATHSCRIPT)||(LA148_0>=PATHREL && LA148_0<=ID)||(LA148_0>=80 && LA148_0<=82)||LA148_0==85||(LA148_0>=87 && LA148_0<=93)||(LA148_0>=95 && LA148_0<=101)||LA148_0==103||LA148_0==105||(LA148_0>=107 && LA148_0<=108)||(LA148_0>=110 && LA148_0<=112)||(LA148_0>=114 && LA148_0<=119)||(LA148_0>=121 && LA148_0<=144)||(LA148_0>=146 && LA148_0<=159)||(LA148_0>=161 && LA148_0<=175)||(LA148_0>=177 && LA148_0<=188)||(LA148_0>=190 && LA148_0<=195)||(LA148_0>=201 && LA148_0<=207)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: initparmsGen+= initparms
            	    {
            	    pushFollow(FOLLOW_initparms_in_templateA163703);
            	    initparmsGen=initparms();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_initparmsGen==null) list_initparmsGen=new ArrayList();
            	    list_initparmsGen.add(initparmsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);

            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA163709); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA163714); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA163719); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA163724);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:3605:345: (TK_7= '\\n' | TK_8= ';' )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==78) ) {
                alt149=1;
            }
            else if ( (LA149_0==83) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // GrammarShellForMancoosi.g:3605:347: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA163730); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3605:360: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA163737); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,86,FOLLOW_86_in_templateA163744); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3605:382: (TK_10= '\\n' | TK_11= ';' )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==78) ) {
                alt150=1;
            }
            else if ( (LA150_0==83) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // GrammarShellForMancoosi.g:3605:384: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA163750); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3605:398: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA163757); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA16ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA16ReturnNode.setKind("templateA16");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA16ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA16ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA16ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_script_pathGen != null) {
              	        for(Iterator it = list_script_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA16ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA16ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA16ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA16ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_initparmsGen != null) {
              	        for(Iterator it = list_initparmsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.initparms_return r = (GrammarShellForMancoosiParser.initparms_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("initparms");
              	            	templateA16ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA16ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA16ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA16ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA16ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA16ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA16ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA16"

    public static class templateA17_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA17"
    // GrammarShellForMancoosi.g:3755:1: templateA17 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'n' DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? UNDERSCOREGen= UNDERSCORE TK_15= 'dh_action' EQUGen= EQU TK_16= 'restart' (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? UNDERSCOREGen_1= UNDERSCORE TK_20= 'dh_action' EQUGen_1= EQU TK_21= 'start' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'if' (TK_28= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_29= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_30= 'which' TK_31= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_32= ';' TK_33= 'then' (TK_34= '\\n' )? TK_35= 'invoke-rc.d' scriptGen_1+= script TK_36= '$_dh_action' ORGen= OR error_handlerGen+= error_handler (TK_37= '\\n' )? TK_38= 'else' (TK_39= '\\n' )? script_pathGen_1+= script_path TK_40= '$_dh_action' ORGen_1= OR error_handlerGen_1+= error_handler (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' ) TK_46= 'fi' (TK_47= '\\n' | TK_48= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA17_return templateA17() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA17_return retval = new GrammarShellForMancoosiParser.templateA17_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen_1=null;
        Token TK_11=null;
        Token DQUOTEGen_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen_1=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token UNDERSCOREGen=null;
        Token TK_15=null;
        Token EQUGen=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token UNDERSCOREGen_1=null;
        Token TK_20=null;
        Token EQUGen_1=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen_2=null;
        Token TK_29=null;
        Token DQUOTEGen_4=null;
        Token APGen=null;
        Token TK_30=null;
        Token TK_31=null;
        Token NUMBERGen=null;
        Token GREATGen_1=null;
        Token PATHNULLGen_1=null;
        Token APGen_1=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_2=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        Token TK_35=null;
        Token TK_36=null;
        Token ORGen=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        Token ORGen_1=null;
        Token TK_41=null;
        Token TK_42=null;
        Token TK_43=null;
        Token TK_44=null;
        Token TK_45=null;
        Token TK_46=null;
        Token TK_47=null;
        Token TK_48=null;
        List list_script_pathGen=null;
        List list_scriptGen=null;
        List list_initparmsGen=null;
        List list_input_variableGen=null;
        List list_scriptGen_1=null;
        List list_error_handlerGen=null;
        List list_script_pathGen_1=null;
        List list_error_handlerGen_1=null;
        RuleReturnScope script_pathGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope initparmsGen = null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope scriptGen_1 = null;
        RuleReturnScope error_handlerGen = null;
        RuleReturnScope script_pathGen_1 = null;
        RuleReturnScope error_handlerGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:3756:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'n' DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? UNDERSCOREGen= UNDERSCORE TK_15= 'dh_action' EQUGen= EQU TK_16= 'restart' (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? UNDERSCOREGen_1= UNDERSCORE TK_20= 'dh_action' EQUGen_1= EQU TK_21= 'start' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'if' (TK_28= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_29= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_30= 'which' TK_31= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_32= ';' TK_33= 'then' (TK_34= '\\n' )? TK_35= 'invoke-rc.d' scriptGen_1+= script TK_36= '$_dh_action' ORGen= OR error_handlerGen+= error_handler (TK_37= '\\n' )? TK_38= 'else' (TK_39= '\\n' )? script_pathGen_1+= script_path TK_40= '$_dh_action' ORGen_1= OR error_handlerGen_1+= error_handler (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' ) TK_46= 'fi' (TK_47= '\\n' | TK_48= ';' ) )
            // GrammarShellForMancoosi.g:3756:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'n' DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? UNDERSCOREGen= UNDERSCORE TK_15= 'dh_action' EQUGen= EQU TK_16= 'restart' (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? UNDERSCOREGen_1= UNDERSCORE TK_20= 'dh_action' EQUGen_1= EQU TK_21= 'start' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'if' (TK_28= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_29= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_30= 'which' TK_31= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_32= ';' TK_33= 'then' (TK_34= '\\n' )? TK_35= 'invoke-rc.d' scriptGen_1+= script TK_36= '$_dh_action' ORGen= OR error_handlerGen+= error_handler (TK_37= '\\n' )? TK_38= 'else' (TK_39= '\\n' )? script_pathGen_1+= script_path TK_40= '$_dh_action' ORGen_1= OR error_handlerGen_1+= error_handler (TK_41= '\\n' | TK_42= ';' ) TK_43= 'fi' (TK_44= '\\n' | TK_45= ';' ) TK_46= 'fi' (TK_47= '\\n' | TK_48= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA173781); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3756:14: (TK_1= '\\n' )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==78) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // GrammarShellForMancoosi.g:3756:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA173787); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA173794); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA173799); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA173804); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA173809); if (state.failed) return retval;
            pushFollow(FOLLOW_script_path_in_templateA173814);
            script_pathGen=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen==null) list_script_pathGen=new ArrayList();
            list_script_pathGen.add(script_pathGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA173819); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA173824); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA173829); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA173834); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3756:184: (TK_5= '\\n' )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==78) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // GrammarShellForMancoosi.g:3756:186: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA173840); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,116,FOLLOW_116_in_templateA173847); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA173852);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            // GrammarShellForMancoosi.g:3756:250: (initparmsGen+= initparms )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( ((LA153_0>=PATHNULL && LA153_0<=NUMBER)||LA153_0==MINUS||(LA153_0>=PATHEMACSINST && LA153_0<=PATHCOMPYTH)||(LA153_0>=PSINGLE && LA153_0<=TILDE)||LA153_0==BSLASH||(LA153_0>=PATHMIME && LA153_0<=PATHP)||(LA153_0>=PATHXWINDOW && LA153_0<=PATHSCRIPT)||(LA153_0>=PATHREL && LA153_0<=ID)||(LA153_0>=80 && LA153_0<=82)||LA153_0==85||(LA153_0>=87 && LA153_0<=93)||(LA153_0>=95 && LA153_0<=101)||LA153_0==103||LA153_0==105||(LA153_0>=107 && LA153_0<=108)||(LA153_0>=110 && LA153_0<=112)||(LA153_0>=114 && LA153_0<=119)||(LA153_0>=121 && LA153_0<=144)||(LA153_0>=146 && LA153_0<=159)||(LA153_0>=161 && LA153_0<=175)||(LA153_0>=177 && LA153_0<=188)||(LA153_0>=190 && LA153_0<=195)||(LA153_0>=201 && LA153_0<=207)) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: initparmsGen+= initparms
            	    {
            	    pushFollow(FOLLOW_initparms_in_templateA173857);
            	    initparmsGen=initparms();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_initparmsGen==null) list_initparmsGen=new ArrayList();
            	    list_initparmsGen.add(initparmsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);

            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA173863); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA173868); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3756:301: (TK_7= '\\n' | TK_8= ';' )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==78) ) {
                alt154=1;
            }
            else if ( (LA154_0==83) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // GrammarShellForMancoosi.g:3756:303: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA173874); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3756:316: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA173881); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,79,FOLLOW_79_in_templateA173889); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:13: (TK_10= '\\n' )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==78) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:15: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA173895); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA173902); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA173907); if (state.failed) return retval;
            TK_11=(Token)match(input,117,FOLLOW_117_in_templateA173912); if (state.failed) return retval;
            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA173917); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA173922);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA173927); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA173932); if (state.failed) return retval;
            TK_12=(Token)match(input,83,FOLLOW_83_in_templateA173937); if (state.failed) return retval;
            TK_13=(Token)match(input,84,FOLLOW_84_in_templateA173942); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:201: (TK_14= '\\n' )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==78) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:203: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA173948); if (state.failed) return retval;

                    }
                    break;

            }

            UNDERSCOREGen=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_templateA173955); if (state.failed) return retval;
            TK_15=(Token)match(input,118,FOLLOW_118_in_templateA173960); if (state.failed) return retval;
            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA173965); if (state.failed) return retval;
            TK_16=(Token)match(input,119,FOLLOW_119_in_templateA173970); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:291: (TK_17= '\\n' )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==78) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:293: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA173977); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,120,FOLLOW_120_in_templateA173984); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:321: (TK_19= '\\n' )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==78) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:323: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA173991); if (state.failed) return retval;

                    }
                    break;

            }

            UNDERSCOREGen_1=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_templateA173999); if (state.failed) return retval;
            TK_20=(Token)match(input,118,FOLLOW_118_in_templateA174004); if (state.failed) return retval;
            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA174009); if (state.failed) return retval;
            TK_21=(Token)match(input,121,FOLLOW_121_in_templateA174014); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:414: (TK_22= '\\n' | TK_23= ';' )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==78) ) {
                alt159=1;
            }
            else if ( (LA159_0==83) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:416: TK_22= '\\n'
                    {
                    TK_22=(Token)match(input,78,FOLLOW_78_in_templateA174021); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3757:430: TK_23= ';'
                    {
                    TK_23=(Token)match(input,83,FOLLOW_83_in_templateA174028); if (state.failed) return retval;

                    }
                    break;

            }

            TK_24=(Token)match(input,86,FOLLOW_86_in_templateA174034); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3757:453: (TK_25= '\\n' | TK_26= ';' )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==78) ) {
                alt160=1;
            }
            else if ( (LA160_0==83) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // GrammarShellForMancoosi.g:3757:455: TK_25= '\\n'
                    {
                    TK_25=(Token)match(input,78,FOLLOW_78_in_templateA174040); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3757:469: TK_26= ';'
                    {
                    TK_26=(Token)match(input,83,FOLLOW_83_in_templateA174047); if (state.failed) return retval;

                    }
                    break;

            }

            TK_27=(Token)match(input,79,FOLLOW_79_in_templateA174055); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3758:14: (TK_28= '\\n' )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==78) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // GrammarShellForMancoosi.g:3758:16: TK_28= '\\n'
                    {
                    TK_28=(Token)match(input,78,FOLLOW_78_in_templateA174061); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA174068); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA174073); if (state.failed) return retval;
            TK_29=(Token)match(input,92,FOLLOW_92_in_templateA174078); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA174083); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA174088); if (state.failed) return retval;
            TK_30=(Token)match(input,81,FOLLOW_81_in_templateA174094); if (state.failed) return retval;
            TK_31=(Token)match(input,122,FOLLOW_122_in_templateA174099); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA174104); if (state.failed) return retval;
            GREATGen_1=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA174109); if (state.failed) return retval;
            PATHNULLGen_1=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA174114); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA174119); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA174124); if (state.failed) return retval;
            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA174129); if (state.failed) return retval;
            TK_32=(Token)match(input,83,FOLLOW_83_in_templateA174134); if (state.failed) return retval;
            TK_33=(Token)match(input,84,FOLLOW_84_in_templateA174139); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3758:286: (TK_34= '\\n' )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==78) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // GrammarShellForMancoosi.g:3758:288: TK_34= '\\n'
                    {
                    TK_34=(Token)match(input,78,FOLLOW_78_in_templateA174145); if (state.failed) return retval;

                    }
                    break;

            }

            TK_35=(Token)match(input,122,FOLLOW_122_in_templateA174153); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA174158);
            scriptGen_1=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen_1==null) list_scriptGen_1=new ArrayList();
            list_scriptGen_1.add(scriptGen_1);

            TK_36=(Token)match(input,123,FOLLOW_123_in_templateA174163); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA174168); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA174173);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:3758:408: (TK_37= '\\n' )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==78) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // GrammarShellForMancoosi.g:3758:410: TK_37= '\\n'
                    {
                    TK_37=(Token)match(input,78,FOLLOW_78_in_templateA174179); if (state.failed) return retval;

                    }
                    break;

            }

            TK_38=(Token)match(input,120,FOLLOW_120_in_templateA174188); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3759:16: (TK_39= '\\n' )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==78) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // GrammarShellForMancoosi.g:3759:18: TK_39= '\\n'
                    {
                    TK_39=(Token)match(input,78,FOLLOW_78_in_templateA174194); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_script_path_in_templateA174201);
            script_pathGen_1=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen_1==null) list_script_pathGen_1=new ArrayList();
            list_script_pathGen_1.add(script_pathGen_1);

            TK_40=(Token)match(input,123,FOLLOW_123_in_templateA174206); if (state.failed) return retval;
            ORGen_1=(Token)match(input,OR,FOLLOW_OR_in_templateA174211); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA174216);
            error_handlerGen_1=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen_1==null) list_error_handlerGen_1=new ArrayList();
            list_error_handlerGen_1.add(error_handlerGen_1);

            // GrammarShellForMancoosi.g:3759:131: (TK_41= '\\n' | TK_42= ';' )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==78) ) {
                alt165=1;
            }
            else if ( (LA165_0==83) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // GrammarShellForMancoosi.g:3759:133: TK_41= '\\n'
                    {
                    TK_41=(Token)match(input,78,FOLLOW_78_in_templateA174223); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3759:147: TK_42= ';'
                    {
                    TK_42=(Token)match(input,83,FOLLOW_83_in_templateA174230); if (state.failed) return retval;

                    }
                    break;

            }

            TK_43=(Token)match(input,86,FOLLOW_86_in_templateA174237); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3759:172: (TK_44= '\\n' | TK_45= ';' )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==78) ) {
                alt166=1;
            }
            else if ( (LA166_0==83) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // GrammarShellForMancoosi.g:3759:174: TK_44= '\\n'
                    {
                    TK_44=(Token)match(input,78,FOLLOW_78_in_templateA174244); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3759:188: TK_45= ';'
                    {
                    TK_45=(Token)match(input,83,FOLLOW_83_in_templateA174251); if (state.failed) return retval;

                    }
                    break;

            }

            TK_46=(Token)match(input,86,FOLLOW_86_in_templateA174257); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:3759:211: (TK_47= '\\n' | TK_48= ';' )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==78) ) {
                alt167=1;
            }
            else if ( (LA167_0==83) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // GrammarShellForMancoosi.g:3759:213: TK_47= '\\n'
                    {
                    TK_47=(Token)match(input,78,FOLLOW_78_in_templateA174263); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:3759:227: TK_48= ';'
                    {
                    TK_48=(Token)match(input,83,FOLLOW_83_in_templateA174270); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA17ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA17ReturnNode.setKind("templateA17");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA17ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA17ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_script_pathGen != null) {
              	        for(Iterator it = list_script_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA17ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_initparmsGen != null) {
              	        for(Iterator it = list_initparmsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.initparms_return r = (GrammarShellForMancoosiParser.initparms_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("initparms");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA17ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA17ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(UNDERSCOREGen != null) {
              			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", (UNDERSCOREGen!=null?UNDERSCOREGen.getText():null), UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
              			templateA17ReturnNode.getChildren().add(UNDERSCOREGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA17ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(UNDERSCOREGen_1 != null) {
              			Leaf UNDERSCOREGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", (UNDERSCOREGen_1!=null?UNDERSCOREGen_1.getText():null), UNDERSCOREGen_1.getCharPositionInLine(), UNDERSCOREGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(UNDERSCOREGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA17ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA17ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA17ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA17ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen_1 != null) {
              			Leaf GREATGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen_1!=null?GREATGen_1.getText():null), GREATGen_1.getCharPositionInLine(), GREATGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(GREATGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen_1 != null) {
              			Leaf PATHNULLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen_1!=null?PATHNULLGen_1.getText():null), PATHNULLGen_1.getCharPositionInLine(), PATHNULLGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(PATHNULLGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA17ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA17ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen_1 != null) {
              	        for(Iterator it = list_scriptGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA17ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_script_pathGen_1 != null) {
              	        for(Iterator it = list_script_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen_1 != null) {
              			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen_1!=null?ORGen_1.getText():null), ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
              			templateA17ReturnNode.getChildren().add(ORGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen_1 != null) {
              	        for(Iterator it = list_error_handlerGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA17ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_41 != null) {
              			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_41!=null?TK_41.getText():null), TK_41.getCharPositionInLine(), TK_41.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_41Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_42 != null) {
              			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_42!=null?TK_42.getText():null), TK_42.getCharPositionInLine(), TK_42.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_42Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_43 != null) {
              			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_43!=null?TK_43.getText():null), TK_43.getCharPositionInLine(), TK_43.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_43Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_44 != null) {
              			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_44!=null?TK_44.getText():null), TK_44.getCharPositionInLine(), TK_44.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_44Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_45 != null) {
              			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_45!=null?TK_45.getText():null), TK_45.getCharPositionInLine(), TK_45.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_45Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_46 != null) {
              			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_46!=null?TK_46.getText():null), TK_46.getCharPositionInLine(), TK_46.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_46Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_47 != null) {
              			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_47!=null?TK_47.getText():null), TK_47.getCharPositionInLine(), TK_47.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_47Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_48 != null) {
              			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_48!=null?TK_48.getText():null), TK_48.getCharPositionInLine(), TK_48.getLine());
              	 		templateA17ReturnNode.getChildren().add(TK_48Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA17ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA17"

    public static class templateA18_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA18"
    // GrammarShellForMancoosi.g:4234:1: templateA18 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE EQUGen= EQU TK_3= 'remove' RSBRACKGen_1= RSBRACK TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_9= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_10= 'which' TK_11= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? TK_15= 'invoke-rc.d' scriptGen+= script TK_16= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? script_pathGen_1+= script_path TK_20= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA18_return templateA18() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA18_return retval = new GrammarShellForMancoosiParser.templateA18_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token ANDGen=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_2=null;
        Token DQUOTEGen_3=null;
        Token EQUGen=null;
        Token TK_3=null;
        Token RSBRACKGen_1=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen_1=null;
        Token TK_9=null;
        Token DQUOTEGen_4=null;
        Token APGen=null;
        Token TK_10=null;
        Token TK_11=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_2=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token ORGen=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token ORGen_1=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        List list_script_pathGen=null;
        List list_input_variableGen=null;
        List list_scriptGen=null;
        List list_error_handlerGen=null;
        List list_script_pathGen_1=null;
        List list_error_handlerGen_1=null;
        RuleReturnScope script_pathGen = null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope error_handlerGen = null;
        RuleReturnScope script_pathGen_1 = null;
        RuleReturnScope error_handlerGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:4235:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE EQUGen= EQU TK_3= 'remove' RSBRACKGen_1= RSBRACK TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_9= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_10= 'which' TK_11= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? TK_15= 'invoke-rc.d' scriptGen+= script TK_16= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? script_pathGen_1+= script_path TK_20= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) )
            // GrammarShellForMancoosi.g:4235:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK DQUOTEGen_2= DQUOTE input_variableGen+= input_variable DQUOTEGen_3= DQUOTE EQUGen= EQU TK_3= 'remove' RSBRACKGen_1= RSBRACK TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_9= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_10= 'which' TK_11= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_2= RSBRACK TK_12= ';' TK_13= 'then' (TK_14= '\\n' )? TK_15= 'invoke-rc.d' scriptGen+= script TK_16= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_17= '\\n' )? TK_18= 'else' (TK_19= '\\n' )? script_pathGen_1+= script_path TK_20= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA184294); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4235:14: (TK_1= '\\n' )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==78) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // GrammarShellForMancoosi.g:4235:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA184300); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA184307); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA184312); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA184317); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184322); if (state.failed) return retval;
            pushFollow(FOLLOW_script_path_in_templateA184327);
            script_pathGen=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen==null) list_script_pathGen=new ArrayList();
            list_script_pathGen.add(script_pathGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184332); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA184337); if (state.failed) return retval;
            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA184342); if (state.failed) return retval;
            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA184348); if (state.failed) return retval;
            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184353); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA184358);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184363); if (state.failed) return retval;
            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA184368); if (state.failed) return retval;
            TK_3=(Token)match(input,87,FOLLOW_87_in_templateA184373); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA184378); if (state.failed) return retval;
            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA184383); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA184390); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4236:15: (TK_6= '\\n' )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==78) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // GrammarShellForMancoosi.g:4236:17: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA184396); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,79,FOLLOW_79_in_templateA184404); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4236:41: (TK_8= '\\n' )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==78) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // GrammarShellForMancoosi.g:4236:43: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA184410); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA184417); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA184422); if (state.failed) return retval;
            TK_9=(Token)match(input,92,FOLLOW_92_in_templateA184427); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184432); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA184437); if (state.failed) return retval;
            TK_10=(Token)match(input,81,FOLLOW_81_in_templateA184443); if (state.failed) return retval;
            TK_11=(Token)match(input,122,FOLLOW_122_in_templateA184448); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA184453); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA184458); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA184463); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA184468); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA184473); if (state.failed) return retval;
            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA184478); if (state.failed) return retval;
            TK_12=(Token)match(input,83,FOLLOW_83_in_templateA184483); if (state.failed) return retval;
            TK_13=(Token)match(input,84,FOLLOW_84_in_templateA184488); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4236:307: (TK_14= '\\n' )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==78) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // GrammarShellForMancoosi.g:4236:309: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA184494); if (state.failed) return retval;

                    }
                    break;

            }

            TK_15=(Token)match(input,122,FOLLOW_122_in_templateA184502); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA184507);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            TK_16=(Token)match(input,124,FOLLOW_124_in_templateA184512); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA184517); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA184522);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:4236:420: (TK_17= '\\n' )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==78) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // GrammarShellForMancoosi.g:4236:422: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA184528); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,120,FOLLOW_120_in_templateA184537); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4237:16: (TK_19= '\\n' )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==78) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // GrammarShellForMancoosi.g:4237:18: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA184543); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_script_path_in_templateA184550);
            script_pathGen_1=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen_1==null) list_script_pathGen_1=new ArrayList();
            list_script_pathGen_1.add(script_pathGen_1);

            TK_20=(Token)match(input,124,FOLLOW_124_in_templateA184555); if (state.failed) return retval;
            ORGen_1=(Token)match(input,OR,FOLLOW_OR_in_templateA184560); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA184565);
            error_handlerGen_1=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen_1==null) list_error_handlerGen_1=new ArrayList();
            list_error_handlerGen_1.add(error_handlerGen_1);

            TK_21=(Token)match(input,86,FOLLOW_86_in_templateA184571); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4237:136: (TK_22= '\\n' | TK_23= ';' )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==78) ) {
                alt174=1;
            }
            else if ( (LA174_0==83) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    // GrammarShellForMancoosi.g:4237:138: TK_22= '\\n'
                    {
                    TK_22=(Token)match(input,78,FOLLOW_78_in_templateA184577); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4237:152: TK_23= ';'
                    {
                    TK_23=(Token)match(input,83,FOLLOW_83_in_templateA184584); if (state.failed) return retval;

                    }
                    break;

            }

            TK_24=(Token)match(input,86,FOLLOW_86_in_templateA184590); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4237:175: (TK_25= '\\n' | TK_26= ';' )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==78) ) {
                alt175=1;
            }
            else if ( (LA175_0==83) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    // GrammarShellForMancoosi.g:4237:177: TK_25= '\\n'
                    {
                    TK_25=(Token)match(input,78,FOLLOW_78_in_templateA184596); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4237:191: TK_26= ';'
                    {
                    TK_26=(Token)match(input,83,FOLLOW_83_in_templateA184603); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA18ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA18ReturnNode.setKind("templateA18");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA18ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA18ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_script_pathGen != null) {
              	        for(Iterator it = list_script_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA18ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA18ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA18ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA18ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA18ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA18ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA18ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA18ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA18ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA18ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA18ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_script_pathGen_1 != null) {
              	        for(Iterator it = list_script_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen_1 != null) {
              			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen_1!=null?ORGen_1.getText():null), ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
              			templateA18ReturnNode.getChildren().add(ORGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen_1 != null) {
              	        for(Iterator it = list_error_handlerGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA18ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA18ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA18ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA18"

    public static class templateA19_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA19"
    // GrammarShellForMancoosi.g:4557:1: templateA19 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_12= 'which' TK_13= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_14= ';' TK_15= 'then' (TK_16= '\\n' )? TK_17= 'invoke-rc.d' scriptGen_1+= script TK_18= 'start' ORGen= OR error_handlerGen+= error_handler (TK_19= '\\n' )? TK_20= 'else' (TK_21= '\\n' )? script_pathGen_1+= script_path TK_22= 'start' ORGen_1= OR error_handlerGen_1+= error_handler (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA19_return templateA19() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA19_return retval = new GrammarShellForMancoosiParser.templateA19_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen_1=null;
        Token TK_11=null;
        Token DQUOTEGen_2=null;
        Token APGen=null;
        Token TK_12=null;
        Token TK_13=null;
        Token NUMBERGen=null;
        Token GREATGen_1=null;
        Token PATHNULLGen_1=null;
        Token APGen_1=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen_1=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token ORGen=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token ORGen_1=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token TK_29=null;
        Token TK_30=null;
        List list_script_pathGen=null;
        List list_scriptGen=null;
        List list_initparmsGen=null;
        List list_scriptGen_1=null;
        List list_error_handlerGen=null;
        List list_script_pathGen_1=null;
        List list_error_handlerGen_1=null;
        RuleReturnScope script_pathGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope initparmsGen = null;
        RuleReturnScope scriptGen_1 = null;
        RuleReturnScope error_handlerGen = null;
        RuleReturnScope script_pathGen_1 = null;
        RuleReturnScope error_handlerGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:4558:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_12= 'which' TK_13= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_14= ';' TK_15= 'then' (TK_16= '\\n' )? TK_17= 'invoke-rc.d' scriptGen_1+= script TK_18= 'start' ORGen= OR error_handlerGen+= error_handler (TK_19= '\\n' )? TK_20= 'else' (TK_21= '\\n' )? script_pathGen_1+= script_path TK_22= 'start' ORGen_1= OR error_handlerGen_1+= error_handler (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' ) )
            // GrammarShellForMancoosi.g:4558:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script (initparmsGen+= initparms )+ GREATGen= GREAT PATHNULLGen= PATHNULL (TK_7= '\\n' | TK_8= ';' ) TK_9= 'if' (TK_10= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_11= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_12= 'which' TK_13= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen_1= GREAT PATHNULLGen_1= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_14= ';' TK_15= 'then' (TK_16= '\\n' )? TK_17= 'invoke-rc.d' scriptGen_1+= script TK_18= 'start' ORGen= OR error_handlerGen+= error_handler (TK_19= '\\n' )? TK_20= 'else' (TK_21= '\\n' )? script_pathGen_1+= script_path TK_22= 'start' ORGen_1= OR error_handlerGen_1+= error_handler (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA194628); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4558:15: (TK_1= '\\n' )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==78) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // GrammarShellForMancoosi.g:4558:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA194634); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA194641); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA194646); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA194651); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA194656); if (state.failed) return retval;
            pushFollow(FOLLOW_script_path_in_templateA194661);
            script_pathGen=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen==null) list_script_pathGen=new ArrayList();
            list_script_pathGen.add(script_pathGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA194666); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA194671); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA194676); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA194681); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4558:185: (TK_5= '\\n' )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==78) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // GrammarShellForMancoosi.g:4558:187: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA194687); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,116,FOLLOW_116_in_templateA194694); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA194699);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            // GrammarShellForMancoosi.g:4558:251: (initparmsGen+= initparms )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( ((LA178_0>=PATHNULL && LA178_0<=NUMBER)||LA178_0==MINUS||(LA178_0>=PATHEMACSINST && LA178_0<=PATHCOMPYTH)||(LA178_0>=PSINGLE && LA178_0<=TILDE)||LA178_0==BSLASH||(LA178_0>=PATHMIME && LA178_0<=PATHP)||(LA178_0>=PATHXWINDOW && LA178_0<=PATHSCRIPT)||(LA178_0>=PATHREL && LA178_0<=ID)||(LA178_0>=80 && LA178_0<=82)||LA178_0==85||(LA178_0>=87 && LA178_0<=93)||(LA178_0>=95 && LA178_0<=101)||LA178_0==103||LA178_0==105||(LA178_0>=107 && LA178_0<=108)||(LA178_0>=110 && LA178_0<=112)||(LA178_0>=114 && LA178_0<=119)||(LA178_0>=121 && LA178_0<=144)||(LA178_0>=146 && LA178_0<=159)||(LA178_0>=161 && LA178_0<=175)||(LA178_0>=177 && LA178_0<=188)||(LA178_0>=190 && LA178_0<=195)||(LA178_0>=201 && LA178_0<=207)) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: initparmsGen+= initparms
            	    {
            	    pushFollow(FOLLOW_initparms_in_templateA194704);
            	    initparmsGen=initparms();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_initparmsGen==null) list_initparmsGen=new ArrayList();
            	    list_initparmsGen.add(initparmsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);

            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA194710); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA194715); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4558:302: (TK_7= '\\n' | TK_8= ';' )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==78) ) {
                alt179=1;
            }
            else if ( (LA179_0==83) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // GrammarShellForMancoosi.g:4558:304: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA194721); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4558:317: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA194728); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,79,FOLLOW_79_in_templateA194737); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4559:13: (TK_10= '\\n' )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==78) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // GrammarShellForMancoosi.g:4559:15: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA194743); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA194750); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA194755); if (state.failed) return retval;
            TK_11=(Token)match(input,92,FOLLOW_92_in_templateA194760); if (state.failed) return retval;
            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA194765); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA194770); if (state.failed) return retval;
            TK_12=(Token)match(input,81,FOLLOW_81_in_templateA194776); if (state.failed) return retval;
            TK_13=(Token)match(input,122,FOLLOW_122_in_templateA194781); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA194786); if (state.failed) return retval;
            GREATGen_1=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA194791); if (state.failed) return retval;
            PATHNULLGen_1=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA194796); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA194801); if (state.failed) return retval;
            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA194806); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA194811); if (state.failed) return retval;
            TK_14=(Token)match(input,83,FOLLOW_83_in_templateA194816); if (state.failed) return retval;
            TK_15=(Token)match(input,84,FOLLOW_84_in_templateA194821); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4559:285: (TK_16= '\\n' )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==78) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // GrammarShellForMancoosi.g:4559:287: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA194827); if (state.failed) return retval;

                    }
                    break;

            }

            TK_17=(Token)match(input,122,FOLLOW_122_in_templateA194835); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA194840);
            scriptGen_1=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen_1==null) list_scriptGen_1=new ArrayList();
            list_scriptGen_1.add(scriptGen_1);

            TK_18=(Token)match(input,121,FOLLOW_121_in_templateA194845); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA194850); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA194855);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:4559:401: (TK_19= '\\n' )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==78) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // GrammarShellForMancoosi.g:4559:403: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA194861); if (state.failed) return retval;

                    }
                    break;

            }

            TK_20=(Token)match(input,120,FOLLOW_120_in_templateA194870); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4560:16: (TK_21= '\\n' )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==78) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // GrammarShellForMancoosi.g:4560:18: TK_21= '\\n'
                    {
                    TK_21=(Token)match(input,78,FOLLOW_78_in_templateA194876); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_script_path_in_templateA194883);
            script_pathGen_1=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen_1==null) list_script_pathGen_1=new ArrayList();
            list_script_pathGen_1.add(script_pathGen_1);

            TK_22=(Token)match(input,121,FOLLOW_121_in_templateA194888); if (state.failed) return retval;
            ORGen_1=(Token)match(input,OR,FOLLOW_OR_in_templateA194893); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA194898);
            error_handlerGen_1=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen_1==null) list_error_handlerGen_1=new ArrayList();
            list_error_handlerGen_1.add(error_handlerGen_1);

            // GrammarShellForMancoosi.g:4560:125: (TK_23= '\\n' | TK_24= ';' )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==78) ) {
                alt184=1;
            }
            else if ( (LA184_0==83) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // GrammarShellForMancoosi.g:4560:127: TK_23= '\\n'
                    {
                    TK_23=(Token)match(input,78,FOLLOW_78_in_templateA194905); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4560:141: TK_24= ';'
                    {
                    TK_24=(Token)match(input,83,FOLLOW_83_in_templateA194912); if (state.failed) return retval;

                    }
                    break;

            }

            TK_25=(Token)match(input,86,FOLLOW_86_in_templateA194918); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4560:164: (TK_26= '\\n' | TK_27= ';' )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==78) ) {
                alt185=1;
            }
            else if ( (LA185_0==83) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // GrammarShellForMancoosi.g:4560:166: TK_26= '\\n'
                    {
                    TK_26=(Token)match(input,78,FOLLOW_78_in_templateA194924); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4560:180: TK_27= ';'
                    {
                    TK_27=(Token)match(input,83,FOLLOW_83_in_templateA194931); if (state.failed) return retval;

                    }
                    break;

            }

            TK_28=(Token)match(input,86,FOLLOW_86_in_templateA194937); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4560:203: (TK_29= '\\n' | TK_30= ';' )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==78) ) {
                alt186=1;
            }
            else if ( (LA186_0==83) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // GrammarShellForMancoosi.g:4560:205: TK_29= '\\n'
                    {
                    TK_29=(Token)match(input,78,FOLLOW_78_in_templateA194943); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4560:219: TK_30= ';'
                    {
                    TK_30=(Token)match(input,83,FOLLOW_83_in_templateA194950); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA19ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA19ReturnNode.setKind("templateA19");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA19ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA19ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA19ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_script_pathGen != null) {
              	        for(Iterator it = list_script_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA19ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_initparmsGen != null) {
              	        for(Iterator it = list_initparmsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.initparms_return r = (GrammarShellForMancoosiParser.initparms_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("initparms");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA19ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA19ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA19ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA19ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA19ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen_1 != null) {
              			Leaf GREATGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen_1!=null?GREATGen_1.getText():null), GREATGen_1.getCharPositionInLine(), GREATGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(GREATGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen_1 != null) {
              			Leaf PATHNULLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen_1!=null?PATHNULLGen_1.getText():null), PATHNULLGen_1.getCharPositionInLine(), PATHNULLGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(PATHNULLGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA19ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen_1 != null) {
              	        for(Iterator it = list_scriptGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA19ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_script_pathGen_1 != null) {
              	        for(Iterator it = list_script_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen_1 != null) {
              			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen_1!=null?ORGen_1.getText():null), ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
              			templateA19ReturnNode.getChildren().add(ORGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen_1 != null) {
              	        for(Iterator it = list_error_handlerGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA19ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA19ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA19ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA19"

    public static class templateA20_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA20"
    // GrammarShellForMancoosi.g:4890:1: templateA20 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_8= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_9= 'which' TK_10= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'invoke-rc.d' scriptGen+= script TK_15= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_16= '\\n' )? TK_17= 'else' (TK_18= '\\n' )? script_pathGen_1+= script_path TK_19= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler (TK_20= '\\n' | TK_21= ';' ) TK_22= 'fi' (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA20_return templateA20() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA20_return retval = new GrammarShellForMancoosiParser.templateA20_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen_1=null;
        Token TK_8=null;
        Token DQUOTEGen_2=null;
        Token APGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen_1=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token ORGen=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token ORGen_1=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        List list_script_pathGen=null;
        List list_scriptGen=null;
        List list_error_handlerGen=null;
        List list_script_pathGen_1=null;
        List list_error_handlerGen_1=null;
        RuleReturnScope script_pathGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope error_handlerGen = null;
        RuleReturnScope script_pathGen_1 = null;
        RuleReturnScope error_handlerGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:4891:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_8= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_9= 'which' TK_10= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'invoke-rc.d' scriptGen+= script TK_15= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_16= '\\n' )? TK_17= 'else' (TK_18= '\\n' )? script_pathGen_1+= script_path TK_19= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler (TK_20= '\\n' | TK_21= ';' ) TK_22= 'fi' (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' ) )
            // GrammarShellForMancoosi.g:4891:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE script_pathGen+= script_path DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_8= 'x' DQUOTEGen_2= DQUOTE APGen= AP TK_9= 'which' TK_10= 'invoke-rc.d' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_3= DQUOTE RSBRACKGen_1= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'invoke-rc.d' scriptGen+= script TK_15= 'stop' ORGen= OR error_handlerGen+= error_handler (TK_16= '\\n' )? TK_17= 'else' (TK_18= '\\n' )? script_pathGen_1+= script_path TK_19= 'stop' ORGen_1= OR error_handlerGen_1+= error_handler (TK_20= '\\n' | TK_21= ';' ) TK_22= 'fi' (TK_23= '\\n' | TK_24= ';' ) TK_25= 'fi' (TK_26= '\\n' | TK_27= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA204975); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4891:15: (TK_1= '\\n' )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==78) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // GrammarShellForMancoosi.g:4891:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA204981); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA204988); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA204993); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA204998); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA205003); if (state.failed) return retval;
            pushFollow(FOLLOW_script_path_in_templateA205008);
            script_pathGen=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen==null) list_script_pathGen=new ArrayList();
            list_script_pathGen.add(script_pathGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA205013); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA205018); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA205023); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA205028); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4891:185: (TK_5= '\\n' )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==78) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // GrammarShellForMancoosi.g:4891:187: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA205034); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,79,FOLLOW_79_in_templateA205041); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4891:210: (TK_7= '\\n' )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==78) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // GrammarShellForMancoosi.g:4891:212: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA205047); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA205054); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA205059); if (state.failed) return retval;
            TK_8=(Token)match(input,92,FOLLOW_92_in_templateA205064); if (state.failed) return retval;
            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA205069); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA205074); if (state.failed) return retval;
            TK_9=(Token)match(input,81,FOLLOW_81_in_templateA205080); if (state.failed) return retval;
            TK_10=(Token)match(input,122,FOLLOW_122_in_templateA205085); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA205090); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA205095); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA205100); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA205105); if (state.failed) return retval;
            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA205110); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA205115); if (state.failed) return retval;
            TK_11=(Token)match(input,83,FOLLOW_83_in_templateA205120); if (state.failed) return retval;
            TK_12=(Token)match(input,84,FOLLOW_84_in_templateA205127); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4892:16: (TK_13= '\\n' )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==78) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:18: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA205133); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,122,FOLLOW_122_in_templateA205141); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA205146);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            TK_15=(Token)match(input,124,FOLLOW_124_in_templateA205151); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA205156); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA205161);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:4892:129: (TK_16= '\\n' )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==78) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:131: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA205167); if (state.failed) return retval;

                    }
                    break;

            }

            TK_17=(Token)match(input,120,FOLLOW_120_in_templateA205174); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4892:158: (TK_18= '\\n' )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==78) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:160: TK_18= '\\n'
                    {
                    TK_18=(Token)match(input,78,FOLLOW_78_in_templateA205180); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_script_path_in_templateA205187);
            script_pathGen_1=script_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_script_pathGen_1==null) list_script_pathGen_1=new ArrayList();
            list_script_pathGen_1.add(script_pathGen_1);

            TK_19=(Token)match(input,124,FOLLOW_124_in_templateA205192); if (state.failed) return retval;
            ORGen_1=(Token)match(input,OR,FOLLOW_OR_in_templateA205197); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA205202);
            error_handlerGen_1=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen_1==null) list_error_handlerGen_1=new ArrayList();
            list_error_handlerGen_1.add(error_handlerGen_1);

            // GrammarShellForMancoosi.g:4892:266: (TK_20= '\\n' | TK_21= ';' )
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==78) ) {
                alt193=1;
            }
            else if ( (LA193_0==83) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }
            switch (alt193) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:268: TK_20= '\\n'
                    {
                    TK_20=(Token)match(input,78,FOLLOW_78_in_templateA205209); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4892:282: TK_21= ';'
                    {
                    TK_21=(Token)match(input,83,FOLLOW_83_in_templateA205216); if (state.failed) return retval;

                    }
                    break;

            }

            TK_22=(Token)match(input,86,FOLLOW_86_in_templateA205223); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4892:306: (TK_23= '\\n' | TK_24= ';' )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==78) ) {
                alt194=1;
            }
            else if ( (LA194_0==83) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:308: TK_23= '\\n'
                    {
                    TK_23=(Token)match(input,78,FOLLOW_78_in_templateA205229); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4892:322: TK_24= ';'
                    {
                    TK_24=(Token)match(input,83,FOLLOW_83_in_templateA205236); if (state.failed) return retval;

                    }
                    break;

            }

            TK_25=(Token)match(input,86,FOLLOW_86_in_templateA205242); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:4892:345: (TK_26= '\\n' | TK_27= ';' )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==78) ) {
                alt195=1;
            }
            else if ( (LA195_0==83) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // GrammarShellForMancoosi.g:4892:347: TK_26= '\\n'
                    {
                    TK_26=(Token)match(input,78,FOLLOW_78_in_templateA205248); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:4892:361: TK_27= ';'
                    {
                    TK_27=(Token)match(input,83,FOLLOW_83_in_templateA205255); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA20ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA20ReturnNode.setKind("templateA20");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA20ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA20ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA20ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_script_pathGen != null) {
              	        for(Iterator it = list_script_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA20ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA20ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA20ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA20ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA20ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA20ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA20ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA20ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA20ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA20ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA20ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_script_pathGen_1 != null) {
              	        for(Iterator it = list_script_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_path_return r = (GrammarShellForMancoosiParser.script_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script_path");
              	            	templateA20ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen_1 != null) {
              			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen_1!=null?ORGen_1.getText():null), ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
              			templateA20ReturnNode.getChildren().add(ORGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen_1 != null) {
              	        for(Iterator it = list_error_handlerGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA20ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA20ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA20ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA20"

    public static class templateA21_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA21"
    // GrammarShellForMancoosi.g:5177:1: templateA21 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script TK_7= 'remove' GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA21_return templateA21() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA21_return retval = new GrammarShellForMancoosiParser.templateA21_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token ORGen=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        List list_input_variableGen=null;
        List list_scriptGen=null;
        List list_error_handlerGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope scriptGen = null;
        RuleReturnScope error_handlerGen = null;
        try {
            // GrammarShellForMancoosi.g:5178:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script TK_7= 'remove' GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:5178:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'update-rc.d' scriptGen+= script TK_7= 'remove' GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR error_handlerGen+= error_handler (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA215279); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:14: (TK_1= '\\n' )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==78) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // GrammarShellForMancoosi.g:5178:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA215285); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA215292); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:58: (DQUOTEGen= DQUOTE )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==DQUOTE) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA215297); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA215303);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:5178:114: (DQUOTEGen_1= DQUOTE )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==DQUOTE) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA215308); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA215314); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:147: (DQUOTEGen_2= DQUOTE )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==DQUOTE) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA215319); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,97,FOLLOW_97_in_templateA215325); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:182: (DQUOTEGen_3= DQUOTE )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==DQUOTE) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA215330); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA215336); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA215341); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA215346); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:234: (TK_5= '\\n' )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==78) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // GrammarShellForMancoosi.g:5178:236: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA215352); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,116,FOLLOW_116_in_templateA215359); if (state.failed) return retval;
            pushFollow(FOLLOW_script_in_templateA215364);
            scriptGen=script();

            state._fsp--;
            if (state.failed) return retval;
            if (list_scriptGen==null) list_scriptGen=new ArrayList();
            list_scriptGen.add(scriptGen);

            TK_7=(Token)match(input,87,FOLLOW_87_in_templateA215369); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA215374); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA215379); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA215384); if (state.failed) return retval;
            pushFollow(FOLLOW_error_handler_in_templateA215389);
            error_handlerGen=error_handler();

            state._fsp--;
            if (state.failed) return retval;
            if (list_error_handlerGen==null) list_error_handlerGen=new ArrayList();
            list_error_handlerGen.add(error_handlerGen);

            // GrammarShellForMancoosi.g:5178:384: (TK_8= '\\n' | TK_9= ';' )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==78) ) {
                alt202=1;
            }
            else if ( (LA202_0==83) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // GrammarShellForMancoosi.g:5178:386: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA215396); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5178:399: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA215403); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA215409); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5178:421: (TK_11= '\\n' | TK_12= ';' )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==78) ) {
                alt203=1;
            }
            else if ( (LA203_0==83) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // GrammarShellForMancoosi.g:5178:423: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA215415); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5178:437: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA215422); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA21ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA21ReturnNode.setKind("templateA21");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA21ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA21ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA21ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA21ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA21ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA21ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA21ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA21ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_scriptGen != null) {
              	        for(Iterator it = list_scriptGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.script_return r = (GrammarShellForMancoosiParser.script_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("script");
              	            	templateA21ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA21ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA21ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA21ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_error_handlerGen != null) {
              	        for(Iterator it = list_error_handlerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.error_handler_return r = (GrammarShellForMancoosiParser.error_handler_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("error_handler");
              	            	templateA21ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA21ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA21ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA21"

    public static class templateA22_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA22"
    // GrammarShellForMancoosi.g:5333:1: templateA22 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA22_return templateA22() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA22_return retval = new GrammarShellForMancoosiParser.templateA22_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:5334:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) )
            // GrammarShellForMancoosi.g:5334:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA225446); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:14: (TK_1= '\\n' )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==78) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // GrammarShellForMancoosi.g:5334:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA225452); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA225459); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:58: (DQUOTEGen= DQUOTE )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==DQUOTE) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA225464); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA225470);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:5334:114: (DQUOTEGen_1= DQUOTE )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==DQUOTE) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA225475); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA225481); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:147: (DQUOTEGen_2= DQUOTE )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==DQUOTE) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA225486); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA225492); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:186: (DQUOTEGen_3= DQUOTE )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==DQUOTE) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA225497); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA225503); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA225508); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA225513); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:238: (TK_5= '\\n' )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==78) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // GrammarShellForMancoosi.g:5334:240: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA225519); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,125,FOLLOW_125_in_templateA225526); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:269: (TK_7= '\\n' | TK_8= ';' )
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==78) ) {
                alt210=1;
            }
            else if ( (LA210_0==83) ) {
                alt210=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }
            switch (alt210) {
                case 1 :
                    // GrammarShellForMancoosi.g:5334:271: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA225532); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5334:284: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA225539); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,86,FOLLOW_86_in_templateA225545); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5334:305: (TK_10= '\\n' | TK_11= ';' )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==78) ) {
                alt211=1;
            }
            else if ( (LA211_0==83) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // GrammarShellForMancoosi.g:5334:307: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA225551); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5334:321: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA225558); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA22ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA22ReturnNode.setKind("templateA22");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA22ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA22ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA22ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA22ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA22ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA22ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA22ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA22ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA22ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA22ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA22"

    public static class templateA23_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA23"
    // GrammarShellForMancoosi.g:5449:1: templateA23 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA23_return templateA23() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA23_return retval = new GrammarShellForMancoosiParser.templateA23_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:5450:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' ) )
            // GrammarShellForMancoosi.g:5450:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'ldconfig' (TK_7= '\\n' | TK_8= ';' ) TK_9= 'fi' (TK_10= '\\n' | TK_11= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA235582); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:14: (TK_1= '\\n' )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==78) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // GrammarShellForMancoosi.g:5450:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA235588); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA235595); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:58: (DQUOTEGen= DQUOTE )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==DQUOTE) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA235600); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA235606);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:5450:114: (DQUOTEGen_1= DQUOTE )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==DQUOTE) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA235611); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA235617); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:147: (DQUOTEGen_2= DQUOTE )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==DQUOTE) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA235622); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA235628); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:183: (DQUOTEGen_3= DQUOTE )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==DQUOTE) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA235633); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA235639); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA235644); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA235649); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:235: (TK_5= '\\n' )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==78) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // GrammarShellForMancoosi.g:5450:237: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA235655); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,125,FOLLOW_125_in_templateA235662); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:266: (TK_7= '\\n' | TK_8= ';' )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==78) ) {
                alt218=1;
            }
            else if ( (LA218_0==83) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // GrammarShellForMancoosi.g:5450:268: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA235668); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5450:281: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA235675); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,86,FOLLOW_86_in_templateA235681); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5450:302: (TK_10= '\\n' | TK_11= ';' )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==78) ) {
                alt219=1;
            }
            else if ( (LA219_0==83) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // GrammarShellForMancoosi.g:5450:304: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA235687); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5450:318: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA235694); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA23ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA23ReturnNode.setKind("templateA23");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA23ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA23ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA23ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA23ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA23ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA23ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA23ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA23ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA23ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA23ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA23"

    public static class templateA24_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA24"
    // GrammarShellForMancoosi.g:5565:1: templateA24 returns [Node returnNode] : TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK MINUSGen= MINUS TK_4= 'f' TK_5= '$inst' RSBRACKGen= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'chmod' TK_10= 'a+x' TK_11= '$inst' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'if' LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_15= 'x' DQUOTEGen= DQUOTE APGen= AP TK_16= 'which' TK_17= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen_1= RSBRACK TK_18= ';' TK_19= 'then' (TK_20= '\\n' )? TK_21= 'update-menus' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'fi' (TK_28= '\\n' | TK_29= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA24_return templateA24() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA24_return retval = new GrammarShellForMancoosiParser.templateA24_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token EQUGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token RSBRACKGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen_1=null;
        Token TK_15=null;
        Token DQUOTEGen=null;
        Token APGen=null;
        Token TK_16=null;
        Token TK_17=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen_1=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token TK_29=null;
        List list_pack_pathGen=null;
        RuleReturnScope pack_pathGen = null;
        try {
            // GrammarShellForMancoosi.g:5566:1: (TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK MINUSGen= MINUS TK_4= 'f' TK_5= '$inst' RSBRACKGen= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'chmod' TK_10= 'a+x' TK_11= '$inst' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'if' LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_15= 'x' DQUOTEGen= DQUOTE APGen= AP TK_16= 'which' TK_17= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen_1= RSBRACK TK_18= ';' TK_19= 'then' (TK_20= '\\n' )? TK_21= 'update-menus' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'fi' (TK_28= '\\n' | TK_29= ';' ) )
            // GrammarShellForMancoosi.g:5566:4: TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK MINUSGen= MINUS TK_4= 'f' TK_5= '$inst' RSBRACKGen= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'chmod' TK_10= 'a+x' TK_11= '$inst' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'if' LSBRACKGen_1= LSBRACK MINUSGen_1= MINUS TK_15= 'x' DQUOTEGen= DQUOTE APGen= AP TK_16= 'which' TK_17= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen_1= RSBRACK TK_18= ';' TK_19= 'then' (TK_20= '\\n' )? TK_21= 'update-menus' (TK_22= '\\n' | TK_23= ';' ) TK_24= 'fi' (TK_25= '\\n' | TK_26= ';' ) TK_27= 'fi' (TK_28= '\\n' | TK_29= ';' )
            {
            TK_0=(Token)match(input,126,FOLLOW_126_in_templateA245718); if (state.failed) return retval;
            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA245723); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_path_in_templateA245728);
            pack_pathGen=pack_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pack_pathGen==null) list_pack_pathGen=new ArrayList();
            list_pack_pathGen.add(pack_pathGen);

            // GrammarShellForMancoosi.g:5566:53: (TK_1= ';' | TK_2= '\\n' )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==83) ) {
                alt220=1;
            }
            else if ( (LA220_0==78) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // GrammarShellForMancoosi.g:5566:55: TK_1= ';'
                    {
                    TK_1=(Token)match(input,83,FOLLOW_83_in_templateA245734); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5566:67: TK_2= '\\n'
                    {
                    TK_2=(Token)match(input,78,FOLLOW_78_in_templateA245741); if (state.failed) return retval;

                    }
                    break;

            }

            TK_3=(Token)match(input,79,FOLLOW_79_in_templateA245747); if (state.failed) return retval;
            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA245753); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA245758); if (state.failed) return retval;
            TK_4=(Token)match(input,108,FOLLOW_108_in_templateA245763); if (state.failed) return retval;
            TK_5=(Token)match(input,127,FOLLOW_127_in_templateA245768); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA245773); if (state.failed) return retval;
            TK_6=(Token)match(input,83,FOLLOW_83_in_templateA245778); if (state.failed) return retval;
            TK_7=(Token)match(input,84,FOLLOW_84_in_templateA245783); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5566:193: (TK_8= '\\n' )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==78) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // GrammarShellForMancoosi.g:5566:195: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA245789); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,128,FOLLOW_128_in_templateA245796); if (state.failed) return retval;
            TK_10=(Token)match(input,129,FOLLOW_129_in_templateA245801); if (state.failed) return retval;
            TK_11=(Token)match(input,127,FOLLOW_127_in_templateA245806); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5566:249: (TK_12= '\\n' | TK_13= ';' )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==78) ) {
                alt222=1;
            }
            else if ( (LA222_0==83) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // GrammarShellForMancoosi.g:5566:251: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA245812); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5566:265: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA245819); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,79,FOLLOW_79_in_templateA245827); if (state.failed) return retval;
            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA245833); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA245838); if (state.failed) return retval;
            TK_15=(Token)match(input,92,FOLLOW_92_in_templateA245843); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA245848); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA245853); if (state.failed) return retval;
            TK_16=(Token)match(input,81,FOLLOW_81_in_templateA245859); if (state.failed) return retval;
            TK_17=(Token)match(input,130,FOLLOW_130_in_templateA245864); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA245869); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA245874); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA245879); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA245884); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA245889); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA245894); if (state.failed) return retval;
            TK_18=(Token)match(input,83,FOLLOW_83_in_templateA245899); if (state.failed) return retval;
            TK_19=(Token)match(input,84,FOLLOW_84_in_templateA245904); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5567:267: (TK_20= '\\n' )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==78) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // GrammarShellForMancoosi.g:5567:269: TK_20= '\\n'
                    {
                    TK_20=(Token)match(input,78,FOLLOW_78_in_templateA245910); if (state.failed) return retval;

                    }
                    break;

            }

            TK_21=(Token)match(input,130,FOLLOW_130_in_templateA245917); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5567:305: (TK_22= '\\n' | TK_23= ';' )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==78) ) {
                alt224=1;
            }
            else if ( (LA224_0==83) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    // GrammarShellForMancoosi.g:5567:307: TK_22= '\\n'
                    {
                    TK_22=(Token)match(input,78,FOLLOW_78_in_templateA245924); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5567:321: TK_23= ';'
                    {
                    TK_23=(Token)match(input,83,FOLLOW_83_in_templateA245931); if (state.failed) return retval;

                    }
                    break;

            }

            TK_24=(Token)match(input,86,FOLLOW_86_in_templateA245937); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5567:344: (TK_25= '\\n' | TK_26= ';' )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==78) ) {
                alt225=1;
            }
            else if ( (LA225_0==83) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // GrammarShellForMancoosi.g:5567:346: TK_25= '\\n'
                    {
                    TK_25=(Token)match(input,78,FOLLOW_78_in_templateA245943); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5567:360: TK_26= ';'
                    {
                    TK_26=(Token)match(input,83,FOLLOW_83_in_templateA245950); if (state.failed) return retval;

                    }
                    break;

            }

            TK_27=(Token)match(input,86,FOLLOW_86_in_templateA245956); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5567:383: (TK_28= '\\n' | TK_29= ';' )
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==78) ) {
                alt226=1;
            }
            else if ( (LA226_0==83) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    // GrammarShellForMancoosi.g:5567:385: TK_28= '\\n'
                    {
                    TK_28=(Token)match(input,78,FOLLOW_78_in_templateA245962); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5567:399: TK_29= ';'
                    {
                    TK_29=(Token)match(input,83,FOLLOW_83_in_templateA245969); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA24ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA24ReturnNode.setKind("templateA24");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA24ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_pack_pathGen != null) {
              	        for(Iterator it = list_pack_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_path_return r = (GrammarShellForMancoosiParser.pack_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack_path");
              	            	templateA24ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA24ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA24ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA24ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA24ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA24ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA24ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA24ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA24ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA24ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA24ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA24ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA24ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA24ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA24ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA24ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA24"

    public static class templateA25_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA25"
    // GrammarShellForMancoosi.g:5807:1: templateA25 returns [Node returnNode] : TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK DQUOTEGen= DQUOTE input_variableGen+= input_variable DQUOTEGen_1= DQUOTE EQUGen_1= EQU DQUOTEGen_2= DQUOTE TK_4= 'remove' DQUOTEGen_3= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'f' DQUOTEGen_4= DQUOTE TK_6= '$inst' DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'chmod' TK_11= 'a-x' TK_12= '$inst' (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_19= 'x' DQUOTEGen_6= DQUOTE APGen= AP TK_20= 'which' TK_21= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_7= DQUOTE RSBRACKGen_2= RSBRACK TK_22= ';' TK_23= 'then' (TK_24= '\\n' )? TK_25= 'update-menus' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA25_return templateA25() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA25_return retval = new GrammarShellForMancoosiParser.templateA25_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token EQUGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_2=null;
        Token TK_4=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token ANDGen=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token DQUOTEGen_4=null;
        Token TK_6=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen_1=null;
        Token TK_19=null;
        Token DQUOTEGen_6=null;
        Token APGen=null;
        Token TK_20=null;
        Token TK_21=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_2=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token TK_29=null;
        Token TK_30=null;
        List list_pack_pathGen=null;
        List list_input_variableGen=null;
        RuleReturnScope pack_pathGen = null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:5808:1: (TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK DQUOTEGen= DQUOTE input_variableGen+= input_variable DQUOTEGen_1= DQUOTE EQUGen_1= EQU DQUOTEGen_2= DQUOTE TK_4= 'remove' DQUOTEGen_3= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'f' DQUOTEGen_4= DQUOTE TK_6= '$inst' DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'chmod' TK_11= 'a-x' TK_12= '$inst' (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_19= 'x' DQUOTEGen_6= DQUOTE APGen= AP TK_20= 'which' TK_21= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_7= DQUOTE RSBRACKGen_2= RSBRACK TK_22= ';' TK_23= 'then' (TK_24= '\\n' )? TK_25= 'update-menus' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' ) )
            // GrammarShellForMancoosi.g:5808:5: TK_0= 'inst' EQUGen= EQU pack_pathGen+= pack_path (TK_1= ';' | TK_2= '\\n' ) TK_3= 'if' LSBRACKGen= LSBRACK DQUOTEGen= DQUOTE input_variableGen+= input_variable DQUOTEGen_1= DQUOTE EQUGen_1= EQU DQUOTEGen_2= DQUOTE TK_4= 'remove' DQUOTEGen_3= DQUOTE RSBRACKGen= RSBRACK ANDGen= AND LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'f' DQUOTEGen_4= DQUOTE TK_6= '$inst' DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'chmod' TK_11= 'a-x' TK_12= '$inst' (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_19= 'x' DQUOTEGen_6= DQUOTE APGen= AP TK_20= 'which' TK_21= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_7= DQUOTE RSBRACKGen_2= RSBRACK TK_22= ';' TK_23= 'then' (TK_24= '\\n' )? TK_25= 'update-menus' (TK_26= '\\n' | TK_27= ';' ) TK_28= 'fi' (TK_29= '\\n' | TK_30= ';' )
            {
            TK_0=(Token)match(input,126,FOLLOW_126_in_templateA255994); if (state.failed) return retval;
            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA255999); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_path_in_templateA256004);
            pack_pathGen=pack_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pack_pathGen==null) list_pack_pathGen=new ArrayList();
            list_pack_pathGen.add(pack_pathGen);

            // GrammarShellForMancoosi.g:5808:54: (TK_1= ';' | TK_2= '\\n' )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==83) ) {
                alt227=1;
            }
            else if ( (LA227_0==78) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // GrammarShellForMancoosi.g:5808:56: TK_1= ';'
                    {
                    TK_1=(Token)match(input,83,FOLLOW_83_in_templateA256010); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5808:68: TK_2= '\\n'
                    {
                    TK_2=(Token)match(input,78,FOLLOW_78_in_templateA256017); if (state.failed) return retval;

                    }
                    break;

            }

            TK_3=(Token)match(input,79,FOLLOW_79_in_templateA256023); if (state.failed) return retval;
            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA256029); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256034); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA256039);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256044); if (state.failed) return retval;
            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA256049); if (state.failed) return retval;
            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256054); if (state.failed) return retval;
            TK_4=(Token)match(input,87,FOLLOW_87_in_templateA256059); if (state.failed) return retval;
            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256064); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA256069); if (state.failed) return retval;
            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA256074); if (state.failed) return retval;
            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA256079); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA256084); if (state.failed) return retval;
            TK_5=(Token)match(input,108,FOLLOW_108_in_templateA256089); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256094); if (state.failed) return retval;
            TK_6=(Token)match(input,127,FOLLOW_127_in_templateA256099); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256104); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA256109); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA256114); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA256121); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:15: (TK_9= '\\n' )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==78) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:17: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA256127); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,128,FOLLOW_128_in_templateA256135); if (state.failed) return retval;
            TK_11=(Token)match(input,131,FOLLOW_131_in_templateA256140); if (state.failed) return retval;
            TK_12=(Token)match(input,127,FOLLOW_127_in_templateA256145); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:73: (TK_13= '\\n' | TK_14= ';' )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==78) ) {
                alt229=1;
            }
            else if ( (LA229_0==83) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:75: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA256151); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5809:89: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA256158); if (state.failed) return retval;

                    }
                    break;

            }

            TK_15=(Token)match(input,86,FOLLOW_86_in_templateA256164); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:112: (TK_16= '\\n' | TK_17= ';' )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==78) ) {
                alt230=1;
            }
            else if ( (LA230_0==83) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:114: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA256170); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5809:128: TK_17= ';'
                    {
                    TK_17=(Token)match(input,83,FOLLOW_83_in_templateA256177); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,79,FOLLOW_79_in_templateA256184); if (state.failed) return retval;
            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA256190); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA256195); if (state.failed) return retval;
            TK_19=(Token)match(input,92,FOLLOW_92_in_templateA256200); if (state.failed) return retval;
            DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256205); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA256210); if (state.failed) return retval;
            TK_20=(Token)match(input,81,FOLLOW_81_in_templateA256216); if (state.failed) return retval;
            TK_21=(Token)match(input,130,FOLLOW_130_in_templateA256221); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA256226); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA256231); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA256236); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA256241); if (state.failed) return retval;
            DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA256246); if (state.failed) return retval;
            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA256251); if (state.failed) return retval;
            TK_22=(Token)match(input,83,FOLLOW_83_in_templateA256256); if (state.failed) return retval;
            TK_23=(Token)match(input,84,FOLLOW_84_in_templateA256261); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:407: (TK_24= '\\n' )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==78) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:409: TK_24= '\\n'
                    {
                    TK_24=(Token)match(input,78,FOLLOW_78_in_templateA256267); if (state.failed) return retval;

                    }
                    break;

            }

            TK_25=(Token)match(input,130,FOLLOW_130_in_templateA256274); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:445: (TK_26= '\\n' | TK_27= ';' )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==78) ) {
                alt232=1;
            }
            else if ( (LA232_0==83) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:447: TK_26= '\\n'
                    {
                    TK_26=(Token)match(input,78,FOLLOW_78_in_templateA256281); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5809:461: TK_27= ';'
                    {
                    TK_27=(Token)match(input,83,FOLLOW_83_in_templateA256288); if (state.failed) return retval;

                    }
                    break;

            }

            TK_28=(Token)match(input,86,FOLLOW_86_in_templateA256294); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:5809:484: (TK_29= '\\n' | TK_30= ';' )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==78) ) {
                alt233=1;
            }
            else if ( (LA233_0==83) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // GrammarShellForMancoosi.g:5809:486: TK_29= '\\n'
                    {
                    TK_29=(Token)match(input,78,FOLLOW_78_in_templateA256300); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:5809:500: TK_30= ';'
                    {
                    TK_30=(Token)match(input,83,FOLLOW_83_in_templateA256307); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA25ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA25ReturnNode.setKind("templateA25");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA25ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_pack_pathGen != null) {
              	        for(Iterator it = list_pack_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_path_return r = (GrammarShellForMancoosiParser.pack_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack_path");
              	            	templateA25ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA25ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA25ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA25ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA25ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA25ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA25ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA25ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA25ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA25ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA25ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA25ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA25ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA25ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA25ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA25ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA25"

    public static class templateA26_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA26"
    // GrammarShellForMancoosi.g:6114:1: templateA26 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-menus' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA26_return templateA26() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA26_return retval = new GrammarShellForMancoosiParser.templateA26_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token DQUOTEGen_4=null;
        Token APGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_1=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:6115:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-menus' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:6115:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-menus' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA266330); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:14: (TK_1= '\\n' )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==78) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // GrammarShellForMancoosi.g:6115:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA266336); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA266343); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:58: (DQUOTEGen= DQUOTE )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==DQUOTE) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266348); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA266354);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:6115:114: (DQUOTEGen_1= DQUOTE )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==DQUOTE) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266359); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA266365); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:147: (DQUOTEGen_2= DQUOTE )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==DQUOTE) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266370); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA266376); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:186: (DQUOTEGen_3= DQUOTE )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==DQUOTE) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266381); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA266387); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:215: (TK_3= '\\n' )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==78) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // GrammarShellForMancoosi.g:6115:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA266393); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA266400); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6115:241: (TK_4= '\\n' )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==78) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // GrammarShellForMancoosi.g:6115:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA266406); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA266413); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA266418); if (state.failed) return retval;
            TK_5=(Token)match(input,92,FOLLOW_92_in_templateA266423); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266428); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA266433); if (state.failed) return retval;
            TK_6=(Token)match(input,81,FOLLOW_81_in_templateA266438); if (state.failed) return retval;
            TK_7=(Token)match(input,130,FOLLOW_130_in_templateA266443); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA266448); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA266453); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA266458); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA266463); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA266468); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA266473); if (state.failed) return retval;
            TK_8=(Token)match(input,83,FOLLOW_83_in_templateA266478); if (state.failed) return retval;
            TK_9=(Token)match(input,84,FOLLOW_84_in_templateA266485); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6116:15: (TK_10= '\\n' )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==78) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // GrammarShellForMancoosi.g:6116:17: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA266491); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,130,FOLLOW_130_in_templateA266498); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6116:52: (TK_12= '\\n' | TK_13= ';' )
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==78) ) {
                alt242=1;
            }
            else if ( (LA242_0==83) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    // GrammarShellForMancoosi.g:6116:54: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA266504); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6116:68: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA266511); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA266517); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6116:91: (TK_15= '\\n' | TK_16= ';' )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==78) ) {
                alt243=1;
            }
            else if ( (LA243_0==83) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // GrammarShellForMancoosi.g:6116:93: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA266523); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6116:107: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA266530); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA26ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA26ReturnNode.setKind("templateA26");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA26ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA26ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA26ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA26ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA26ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA26ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA26ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA26ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA26ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA26ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA26ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA26ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA26ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA26ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA26ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA26ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA26"

    public static class templateA27_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA27"
    // GrammarShellForMancoosi.g:6311:1: templateA27 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-menus' (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA27_return templateA27() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA27_return retval = new GrammarShellForMancoosiParser.templateA27_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token APGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;

        try {
            // GrammarShellForMancoosi.g:6312:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-menus' (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) )
            // GrammarShellForMancoosi.g:6312:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-menus' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-menus' (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA276558); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6312:15: (TK_1= '\\n' )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==78) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // GrammarShellForMancoosi.g:6312:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA276564); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA276571); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA276576); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA276581); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA276586); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA276591); if (state.failed) return retval;
            TK_3=(Token)match(input,81,FOLLOW_81_in_templateA276596); if (state.failed) return retval;
            TK_4=(Token)match(input,130,FOLLOW_130_in_templateA276601); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA276606); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA276611); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA276616); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA276621); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA276626); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA276631); if (state.failed) return retval;
            TK_5=(Token)match(input,83,FOLLOW_83_in_templateA276636); if (state.failed) return retval;
            TK_6=(Token)match(input,84,FOLLOW_84_in_templateA276641); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6312:269: (TK_7= '\\n' )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==78) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // GrammarShellForMancoosi.g:6312:271: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA276647); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,130,FOLLOW_130_in_templateA276654); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6312:304: (TK_9= '\\n' | TK_10= ';' )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==78) ) {
                alt246=1;
            }
            else if ( (LA246_0==83) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // GrammarShellForMancoosi.g:6312:306: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA276660); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6312:319: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA276667); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,86,FOLLOW_86_in_templateA276673); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6312:342: (TK_12= '\\n' | TK_13= ';' )
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==78) ) {
                alt247=1;
            }
            else if ( (LA247_0==83) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }
            switch (alt247) {
                case 1 :
                    // GrammarShellForMancoosi.g:6312:344: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA276679); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6312:358: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA276686); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA27ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA27ReturnNode.setKind("templateA27");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA27ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA27ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA27ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA27ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA27ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA27ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA27ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA27ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA27ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA27ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA27ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA27ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA27"

    public static class templateA28_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA28"
    // GrammarShellForMancoosi.g:6442:1: templateA28 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' kvers_pathGen+= kvers_path RSBRACKGen_1= RSBRACK TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'depmod' MINUSGen_1= MINUS TK_13= 'a' MINUSGen_2= MINUS TK_14= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_15= 'true' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'fi' (TK_19= '\\n' | TK_20= ';' ) TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA28_return templateA28() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA28_return retval = new GrammarShellForMancoosiParser.templateA28_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_8=null;
        Token RSBRACKGen_1=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token MINUSGen_1=null;
        Token TK_13=null;
        Token MINUSGen_2=null;
        Token TK_14=null;
        Token ORGen=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        List list_input_variableGen=null;
        List list_kvers_pathGen=null;
        List list_kvers_pathGen_1=null;
        List list_kversGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope kvers_pathGen = null;
        RuleReturnScope kvers_pathGen_1 = null;
        RuleReturnScope kversGen = null;
        try {
            // GrammarShellForMancoosi.g:6443:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' kvers_pathGen+= kvers_path RSBRACKGen_1= RSBRACK TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'depmod' MINUSGen_1= MINUS TK_13= 'a' MINUSGen_2= MINUS TK_14= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_15= 'true' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'fi' (TK_19= '\\n' | TK_20= ';' ) TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' ) )
            // GrammarShellForMancoosi.g:6443:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'if' (TK_7= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' kvers_pathGen+= kvers_path RSBRACKGen_1= RSBRACK TK_9= ';' TK_10= 'then' (TK_11= '\\n' )? TK_12= 'depmod' MINUSGen_1= MINUS TK_13= 'a' MINUSGen_2= MINUS TK_14= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_15= 'true' (TK_16= '\\n' | TK_17= ';' ) TK_18= 'fi' (TK_19= '\\n' | TK_20= ';' ) TK_21= 'fi' (TK_22= '\\n' | TK_23= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA286711); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:14: (TK_1= '\\n' )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==78) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // GrammarShellForMancoosi.g:6443:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA286717); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA286724); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:58: (DQUOTEGen= DQUOTE )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==DQUOTE) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA286729); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA286735);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:6443:114: (DQUOTEGen_1= DQUOTE )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==DQUOTE) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA286740); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA286746); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:147: (DQUOTEGen_2= DQUOTE )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==DQUOTE) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA286751); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA286757); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:186: (DQUOTEGen_3= DQUOTE )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==DQUOTE) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA286762); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA286768); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA286773); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA286778); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:238: (TK_5= '\\n' )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==78) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // GrammarShellForMancoosi.g:6443:240: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA286784); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,79,FOLLOW_79_in_templateA286792); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6443:264: (TK_7= '\\n' )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==78) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // GrammarShellForMancoosi.g:6443:266: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA286798); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA286805); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA286810); if (state.failed) return retval;
            TK_8=(Token)match(input,132,FOLLOW_132_in_templateA286815); if (state.failed) return retval;
            pushFollow(FOLLOW_kvers_path_in_templateA286820);
            kvers_pathGen=kvers_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kvers_pathGen==null) list_kvers_pathGen=new ArrayList();
            list_kvers_pathGen.add(kvers_pathGen);

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA286825); if (state.failed) return retval;
            TK_9=(Token)match(input,83,FOLLOW_83_in_templateA286830); if (state.failed) return retval;
            TK_10=(Token)match(input,84,FOLLOW_84_in_templateA286837); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6444:16: (TK_11= '\\n' )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==78) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // GrammarShellForMancoosi.g:6444:18: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA286843); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,133,FOLLOW_133_in_templateA286850); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA286855); if (state.failed) return retval;
            TK_13=(Token)match(input,134,FOLLOW_134_in_templateA286860); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA286865); if (state.failed) return retval;
            TK_14=(Token)match(input,135,FOLLOW_135_in_templateA286870); if (state.failed) return retval;
            pushFollow(FOLLOW_kvers_path_in_templateA286875);
            kvers_pathGen_1=kvers_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kvers_pathGen_1==null) list_kvers_pathGen_1=new ArrayList();
            list_kvers_pathGen_1.add(kvers_pathGen_1);

            pushFollow(FOLLOW_kvers_in_templateA286880);
            kversGen=kvers();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kversGen==null) list_kversGen=new ArrayList();
            list_kversGen.add(kversGen);

            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA286885); if (state.failed) return retval;
            TK_15=(Token)match(input,136,FOLLOW_136_in_templateA286891); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6444:176: (TK_16= '\\n' | TK_17= ';' )
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==78) ) {
                alt256=1;
            }
            else if ( (LA256_0==83) ) {
                alt256=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    // GrammarShellForMancoosi.g:6444:178: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA286897); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6444:192: TK_17= ';'
                    {
                    TK_17=(Token)match(input,83,FOLLOW_83_in_templateA286904); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,86,FOLLOW_86_in_templateA286910); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6444:215: (TK_19= '\\n' | TK_20= ';' )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==78) ) {
                alt257=1;
            }
            else if ( (LA257_0==83) ) {
                alt257=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    // GrammarShellForMancoosi.g:6444:217: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA286916); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6444:231: TK_20= ';'
                    {
                    TK_20=(Token)match(input,83,FOLLOW_83_in_templateA286923); if (state.failed) return retval;

                    }
                    break;

            }

            TK_21=(Token)match(input,86,FOLLOW_86_in_templateA286929); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6444:254: (TK_22= '\\n' | TK_23= ';' )
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==78) ) {
                alt258=1;
            }
            else if ( (LA258_0==83) ) {
                alt258=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    // GrammarShellForMancoosi.g:6444:256: TK_22= '\\n'
                    {
                    TK_22=(Token)match(input,78,FOLLOW_78_in_templateA286935); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6444:270: TK_23= ';'
                    {
                    TK_23=(Token)match(input,83,FOLLOW_83_in_templateA286942); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA28ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA28ReturnNode.setKind("templateA28");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA28ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA28ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA28ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA28ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA28ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA28ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA28ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA28ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA28ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA28ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_kvers_pathGen != null) {
              	        for(Iterator it = list_kvers_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_path_return r = (GrammarShellForMancoosiParser.kvers_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers_path");
              	            	templateA28ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA28ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA28ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA28ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_kvers_pathGen_1 != null) {
              	        for(Iterator it = list_kvers_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_path_return r = (GrammarShellForMancoosiParser.kvers_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers_path");
              	            	templateA28ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_kversGen != null) {
              	        for(Iterator it = list_kversGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_return r = (GrammarShellForMancoosiParser.kvers_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers");
              	            	templateA28ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA28ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA28ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA28ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA28"

    public static class templateA29_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA29"
    // GrammarShellForMancoosi.g:6679:1: templateA29 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'e' kvers_pathGen+= kvers_path RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'depmod' MINUSGen_1= MINUS TK_7= 'a' MINUSGen_2= MINUS TK_8= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA29_return templateA29() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA29_return retval = new GrammarShellForMancoosiParser.templateA29_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token MINUSGen_1=null;
        Token TK_7=null;
        Token MINUSGen_2=null;
        Token TK_8=null;
        Token ORGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        List list_kvers_pathGen=null;
        List list_kvers_pathGen_1=null;
        List list_kversGen=null;
        RuleReturnScope kvers_pathGen = null;
        RuleReturnScope kvers_pathGen_1 = null;
        RuleReturnScope kversGen = null;
        try {
            // GrammarShellForMancoosi.g:6680:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'e' kvers_pathGen+= kvers_path RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'depmod' MINUSGen_1= MINUS TK_7= 'a' MINUSGen_2= MINUS TK_8= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) )
            // GrammarShellForMancoosi.g:6680:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'e' kvers_pathGen+= kvers_path RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'depmod' MINUSGen_1= MINUS TK_7= 'a' MINUSGen_2= MINUS TK_8= 'F' kvers_pathGen_1+= kvers_path kversGen+= kvers ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA296966); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6680:15: (TK_1= '\\n' )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==78) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // GrammarShellForMancoosi.g:6680:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA296972); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA296979); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA296984); if (state.failed) return retval;
            TK_2=(Token)match(input,132,FOLLOW_132_in_templateA296989); if (state.failed) return retval;
            pushFollow(FOLLOW_kvers_path_in_templateA296994);
            kvers_pathGen=kvers_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kvers_pathGen==null) list_kvers_pathGen=new ArrayList();
            list_kvers_pathGen.add(kvers_pathGen);

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA296999); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA297004); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA297009); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6680:145: (TK_5= '\\n' )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==78) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // GrammarShellForMancoosi.g:6680:147: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA297015); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,133,FOLLOW_133_in_templateA297023); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA297028); if (state.failed) return retval;
            TK_7=(Token)match(input,134,FOLLOW_134_in_templateA297033); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA297038); if (state.failed) return retval;
            TK_8=(Token)match(input,135,FOLLOW_135_in_templateA297043); if (state.failed) return retval;
            pushFollow(FOLLOW_kvers_path_in_templateA297048);
            kvers_pathGen_1=kvers_path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kvers_pathGen_1==null) list_kvers_pathGen_1=new ArrayList();
            list_kvers_pathGen_1.add(kvers_pathGen_1);

            pushFollow(FOLLOW_kvers_in_templateA297053);
            kversGen=kvers();

            state._fsp--;
            if (state.failed) return retval;
            if (list_kversGen==null) list_kversGen=new ArrayList();
            list_kversGen.add(kversGen);

            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA297058); if (state.failed) return retval;
            TK_9=(Token)match(input,136,FOLLOW_136_in_templateA297063); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6680:300: (TK_10= '\\n' | TK_11= ';' )
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==78) ) {
                alt261=1;
            }
            else if ( (LA261_0==83) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    // GrammarShellForMancoosi.g:6680:302: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA297069); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6680:316: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA297076); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,86,FOLLOW_86_in_templateA297082); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6680:339: (TK_13= '\\n' | TK_14= ';' )
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==78) ) {
                alt262=1;
            }
            else if ( (LA262_0==83) ) {
                alt262=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    // GrammarShellForMancoosi.g:6680:341: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA297088); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6680:355: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA297095); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA29ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA29ReturnNode.setKind("templateA29");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA29ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA29ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_kvers_pathGen != null) {
              	        for(Iterator it = list_kvers_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_path_return r = (GrammarShellForMancoosiParser.kvers_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers_path");
              	            	templateA29ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA29ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA29ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA29ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_kvers_pathGen_1 != null) {
              	        for(Iterator it = list_kvers_pathGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_path_return r = (GrammarShellForMancoosiParser.kvers_path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers_path");
              	            	templateA29ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_kversGen != null) {
              	        for(Iterator it = list_kversGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.kvers_return r = (GrammarShellForMancoosiParser.kvers_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("kvers");
              	            	templateA29ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA29ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA29ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA29ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA29"

    public static class templateA30_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA30"
    // GrammarShellForMancoosi.g:6825:1: templateA30 returns [Node returnNode] : TK_0= 'PYTHON' EQUGen= EQU pyverGen+= pyver (TK_1= '\\n' | TK_2= ';' ) TK_3= 'if' (TK_4= '\\n' )? TK_5= 'which' TK_6= '$PYTHON' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_7= '\\n' )? ANDGen= AND (TK_8= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_9= 'e' PATHCOMPYTHGen= PATHCOMPYTH RSBRACKGen= RSBRACK TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'DIRLIST' EQUGen_1= EQU DQUOTEGen= DQUOTE (dirlistGen+= dirlist (TK_14= '\\n' )? )+ DQUOTEGen_1= DQUOTE (TK_15= '\\n' | TK_16= ';' ) TK_17= 'for' (TK_18= '\\n' )? TK_19= 'i' TK_20= 'in' TK_21= '$DIRLIST' TK_22= ';' TK_23= 'do' TK_24= '\\n' TK_25= '$PYTHON' PATHCOMPYTHGen_1= PATHCOMPYTH MINUSGen_1= MINUS TK_26= 'q' TK_27= '$i' (TK_28= '\\n' | TK_29= ';' ) TK_30= 'done' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'fi' (TK_34= '\\n' | TK_35= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA30_return templateA30() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA30_return retval = new GrammarShellForMancoosiParser.templateA30_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token EQUGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token ANDGen=null;
        Token TK_8=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_9=null;
        Token PATHCOMPYTHGen=null;
        Token RSBRACKGen=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token EQUGen_1=null;
        Token DQUOTEGen=null;
        Token TK_14=null;
        Token DQUOTEGen_1=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token PATHCOMPYTHGen_1=null;
        Token MINUSGen_1=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token TK_29=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        Token TK_35=null;
        List list_pyverGen=null;
        List list_dirlistGen=null;
        RuleReturnScope pyverGen = null;
        RuleReturnScope dirlistGen = null;
        try {
            // GrammarShellForMancoosi.g:6826:1: (TK_0= 'PYTHON' EQUGen= EQU pyverGen+= pyver (TK_1= '\\n' | TK_2= ';' ) TK_3= 'if' (TK_4= '\\n' )? TK_5= 'which' TK_6= '$PYTHON' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_7= '\\n' )? ANDGen= AND (TK_8= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_9= 'e' PATHCOMPYTHGen= PATHCOMPYTH RSBRACKGen= RSBRACK TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'DIRLIST' EQUGen_1= EQU DQUOTEGen= DQUOTE (dirlistGen+= dirlist (TK_14= '\\n' )? )+ DQUOTEGen_1= DQUOTE (TK_15= '\\n' | TK_16= ';' ) TK_17= 'for' (TK_18= '\\n' )? TK_19= 'i' TK_20= 'in' TK_21= '$DIRLIST' TK_22= ';' TK_23= 'do' TK_24= '\\n' TK_25= '$PYTHON' PATHCOMPYTHGen_1= PATHCOMPYTH MINUSGen_1= MINUS TK_26= 'q' TK_27= '$i' (TK_28= '\\n' | TK_29= ';' ) TK_30= 'done' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'fi' (TK_34= '\\n' | TK_35= ';' ) )
            // GrammarShellForMancoosi.g:6826:4: TK_0= 'PYTHON' EQUGen= EQU pyverGen+= pyver (TK_1= '\\n' | TK_2= ';' ) TK_3= 'if' (TK_4= '\\n' )? TK_5= 'which' TK_6= '$PYTHON' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_7= '\\n' )? ANDGen= AND (TK_8= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_9= 'e' PATHCOMPYTHGen= PATHCOMPYTH RSBRACKGen= RSBRACK TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'DIRLIST' EQUGen_1= EQU DQUOTEGen= DQUOTE (dirlistGen+= dirlist (TK_14= '\\n' )? )+ DQUOTEGen_1= DQUOTE (TK_15= '\\n' | TK_16= ';' ) TK_17= 'for' (TK_18= '\\n' )? TK_19= 'i' TK_20= 'in' TK_21= '$DIRLIST' TK_22= ';' TK_23= 'do' TK_24= '\\n' TK_25= '$PYTHON' PATHCOMPYTHGen_1= PATHCOMPYTH MINUSGen_1= MINUS TK_26= 'q' TK_27= '$i' (TK_28= '\\n' | TK_29= ';' ) TK_30= 'done' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'fi' (TK_34= '\\n' | TK_35= ';' )
            {
            TK_0=(Token)match(input,137,FOLLOW_137_in_templateA307118); if (state.failed) return retval;
            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA307123); if (state.failed) return retval;
            pushFollow(FOLLOW_pyver_in_templateA307128);
            pyverGen=pyver();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pyverGen==null) list_pyverGen=new ArrayList();
            list_pyverGen.add(pyverGen);

            // GrammarShellForMancoosi.g:6826:47: (TK_1= '\\n' | TK_2= ';' )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==78) ) {
                alt263=1;
            }
            else if ( (LA263_0==83) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    // GrammarShellForMancoosi.g:6826:49: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA307134); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6826:62: TK_2= ';'
                    {
                    TK_2=(Token)match(input,83,FOLLOW_83_in_templateA307141); if (state.failed) return retval;

                    }
                    break;

            }

            TK_3=(Token)match(input,79,FOLLOW_79_in_templateA307147); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6826:83: (TK_4= '\\n' )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==78) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // GrammarShellForMancoosi.g:6826:85: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA307153); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA307160); if (state.failed) return retval;
            TK_6=(Token)match(input,138,FOLLOW_138_in_templateA307165); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA307170); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA307175); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA307180); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA307185); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA307190); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6826:225: (TK_7= '\\n' )?
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==78) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    // GrammarShellForMancoosi.g:6826:227: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA307196); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA307203); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6826:251: (TK_8= '\\n' )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==78) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // GrammarShellForMancoosi.g:6826:253: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA307209); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA307217); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA307222); if (state.failed) return retval;
            TK_9=(Token)match(input,132,FOLLOW_132_in_templateA307227); if (state.failed) return retval;
            PATHCOMPYTHGen=(Token)match(input,PATHCOMPYTH,FOLLOW_PATHCOMPYTH_in_templateA307232); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA307237); if (state.failed) return retval;
            TK_10=(Token)match(input,83,FOLLOW_83_in_templateA307242); if (state.failed) return retval;
            TK_11=(Token)match(input,84,FOLLOW_84_in_templateA307249); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:16: (TK_12= '\\n' )?
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==78) ) {
                alt267=1;
            }
            switch (alt267) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:18: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA307255); if (state.failed) return retval;

                    }
                    break;

            }

            TK_13=(Token)match(input,139,FOLLOW_139_in_templateA307262); if (state.failed) return retval;
            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA307267); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA307272); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:80: (dirlistGen+= dirlist (TK_14= '\\n' )? )+
            int cnt269=0;
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==PATHNULL||(LA269_0>=PATHEMACSINST && LA269_0<=PATHEMACSREM)||(LA269_0>=PATHGCONFSCH && LA269_0<=PATHOLDSCHEMA)||LA269_0==PATHCOMPYTH||(LA269_0>=PATHMIME && LA269_0<=PATHSUID)||LA269_0==PATHSS||LA269_0==PATHP||(LA269_0>=PATHXWINDOW && LA269_0<=PATHSCRIPT)||(LA269_0>=PATHREL && LA269_0<=PATH)) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:6827:82: dirlistGen+= dirlist (TK_14= '\\n' )?
            	    {
            	    pushFollow(FOLLOW_dirlist_in_templateA307278);
            	    dirlistGen=dirlist();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirlistGen==null) list_dirlistGen=new ArrayList();
            	    list_dirlistGen.add(dirlistGen);

            	    // GrammarShellForMancoosi.g:6827:108: (TK_14= '\\n' )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==78) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: TK_14= '\\n'
            	            {
            	            TK_14=(Token)match(input,78,FOLLOW_78_in_templateA307283); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt269 >= 1 ) break loop269;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(269, input);
                        throw eee;
                }
                cnt269++;
            } while (true);

            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA307291); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:137: (TK_15= '\\n' | TK_16= ';' )
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==78) ) {
                alt270=1;
            }
            else if ( (LA270_0==83) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:140: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA307298); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6827:154: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA307305); if (state.failed) return retval;

                    }
                    break;

            }

            TK_17=(Token)match(input,102,FOLLOW_102_in_templateA307312); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:179: (TK_18= '\\n' )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==78) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:181: TK_18= '\\n'
                    {
                    TK_18=(Token)match(input,78,FOLLOW_78_in_templateA307318); if (state.failed) return retval;

                    }
                    break;

            }

            TK_19=(Token)match(input,89,FOLLOW_89_in_templateA307325); if (state.failed) return retval;
            TK_20=(Token)match(input,104,FOLLOW_104_in_templateA307330); if (state.failed) return retval;
            TK_21=(Token)match(input,140,FOLLOW_140_in_templateA307335); if (state.failed) return retval;
            TK_22=(Token)match(input,83,FOLLOW_83_in_templateA307340); if (state.failed) return retval;
            TK_23=(Token)match(input,106,FOLLOW_106_in_templateA307345); if (state.failed) return retval;
            TK_24=(Token)match(input,78,FOLLOW_78_in_templateA307350); if (state.failed) return retval;
            TK_25=(Token)match(input,138,FOLLOW_138_in_templateA307355); if (state.failed) return retval;
            PATHCOMPYTHGen_1=(Token)match(input,PATHCOMPYTH,FOLLOW_PATHCOMPYTH_in_templateA307360); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA307365); if (state.failed) return retval;
            TK_26=(Token)match(input,85,FOLLOW_85_in_templateA307370); if (state.failed) return retval;
            TK_27=(Token)match(input,141,FOLLOW_141_in_templateA307375); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:358: (TK_28= '\\n' | TK_29= ';' )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==78) ) {
                alt272=1;
            }
            else if ( (LA272_0==83) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:360: TK_28= '\\n'
                    {
                    TK_28=(Token)match(input,78,FOLLOW_78_in_templateA307381); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6827:374: TK_29= ';'
                    {
                    TK_29=(Token)match(input,83,FOLLOW_83_in_templateA307388); if (state.failed) return retval;

                    }
                    break;

            }

            TK_30=(Token)match(input,109,FOLLOW_109_in_templateA307394); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:399: (TK_31= '\\n' | TK_32= ';' )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==78) ) {
                alt273=1;
            }
            else if ( (LA273_0==83) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:401: TK_31= '\\n'
                    {
                    TK_31=(Token)match(input,78,FOLLOW_78_in_templateA307400); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6827:415: TK_32= ';'
                    {
                    TK_32=(Token)match(input,83,FOLLOW_83_in_templateA307407); if (state.failed) return retval;

                    }
                    break;

            }

            TK_33=(Token)match(input,86,FOLLOW_86_in_templateA307413); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:6827:438: (TK_34= '\\n' | TK_35= ';' )
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==78) ) {
                alt274=1;
            }
            else if ( (LA274_0==83) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    // GrammarShellForMancoosi.g:6827:440: TK_34= '\\n'
                    {
                    TK_34=(Token)match(input,78,FOLLOW_78_in_templateA307419); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:6827:454: TK_35= ';'
                    {
                    TK_35=(Token)match(input,83,FOLLOW_83_in_templateA307426); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA30ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA30ReturnNode.setKind("templateA30");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA30ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_pyverGen != null) {
              	        for(Iterator it = list_pyverGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pyver_return r = (GrammarShellForMancoosiParser.pyver_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pyver");
              	            	templateA30ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA30ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA30ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA30ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA30ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA30ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA30ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA30ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA30ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHCOMPYTHGen != null) {
              			Leaf PATHCOMPYTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", (PATHCOMPYTHGen!=null?PATHCOMPYTHGen.getText():null), PATHCOMPYTHGen.getCharPositionInLine(), PATHCOMPYTHGen.getLine());
              			templateA30ReturnNode.getChildren().add(PATHCOMPYTHGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA30ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA30ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA30ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}

              		// Create a special CST Node for terminal dirlistGen aggregation
              		if(list_dirlistGen != null) {
              	    for(int pos = 0; pos < list_dirlistGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_dirlistGen != null) {		
              	    	GrammarShellForMancoosiParser.dirlist_return r = (GrammarShellForMancoosiParser.dirlist_return) list_dirlistGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("dirlist");
              	    		templateA30ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              		}
              		}

              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA30ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHCOMPYTHGen_1 != null) {
              			Leaf PATHCOMPYTHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", (PATHCOMPYTHGen_1!=null?PATHCOMPYTHGen_1.getText():null), PATHCOMPYTHGen_1.getCharPositionInLine(), PATHCOMPYTHGen_1.getLine());
              			templateA30ReturnNode.getChildren().add(PATHCOMPYTHGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA30ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA30ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA30ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA30"

    public static class templateA31_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA31"
    // GrammarShellForMancoosi.g:7122:1: templateA31 returns [Node returnNode] : TK_0= 'dpkg' MINUSGen= MINUS TK_1= 'L' packGen+= pack VBARGen= VBAR (TK_2= '\\n' )? TK_3= 'awk' PSINGLEGen= PSINGLE input_variableGen+= input_variable TILDEGen= TILDE SLASHGen= SLASH BSLASHGen= BSLASH TK_4= '.py' TK_5= '$' SLASHGen_1= SLASH LGRAFGen= LGRAF TK_6= 'print' input_variableGen_1+= input_variable DQUOTEGen= DQUOTE TK_7= 'c' BSLASHGen_1= BSLASH TK_8= 'n' DQUOTEGen_1= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_2= DQUOTE TK_9= 'o' DQUOTEGen_3= DQUOTE RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE VBARGen_1= VBAR (TK_10= '\\n' )? TK_11= 'xargs' TK_12= 'rm' MINUSGen_1= MINUS TK_13= 'f' GREATANDGen= GREATAND NUMBERGen= NUMBER (TK_14= '\\n' | TK_15= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA31_return templateA31() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA31_return retval = new GrammarShellForMancoosiParser.templateA31_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token MINUSGen=null;
        Token TK_1=null;
        Token VBARGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token PSINGLEGen=null;
        Token TILDEGen=null;
        Token SLASHGen=null;
        Token BSLASHGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token SLASHGen_1=null;
        Token LGRAFGen=null;
        Token TK_6=null;
        Token DQUOTEGen=null;
        Token TK_7=null;
        Token BSLASHGen_1=null;
        Token TK_8=null;
        Token DQUOTEGen_1=null;
        Token DQUOTEGen_2=null;
        Token TK_9=null;
        Token DQUOTEGen_3=null;
        Token RGRAFGen=null;
        Token PSINGLEGen_1=null;
        Token VBARGen_1=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token MINUSGen_1=null;
        Token TK_13=null;
        Token GREATANDGen=null;
        Token NUMBERGen=null;
        Token TK_14=null;
        Token TK_15=null;
        List list_packGen=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_input_variableGen_2=null;
        RuleReturnScope packGen = null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope input_variableGen_2 = null;
        try {
            // GrammarShellForMancoosi.g:7123:1: (TK_0= 'dpkg' MINUSGen= MINUS TK_1= 'L' packGen+= pack VBARGen= VBAR (TK_2= '\\n' )? TK_3= 'awk' PSINGLEGen= PSINGLE input_variableGen+= input_variable TILDEGen= TILDE SLASHGen= SLASH BSLASHGen= BSLASH TK_4= '.py' TK_5= '$' SLASHGen_1= SLASH LGRAFGen= LGRAF TK_6= 'print' input_variableGen_1+= input_variable DQUOTEGen= DQUOTE TK_7= 'c' BSLASHGen_1= BSLASH TK_8= 'n' DQUOTEGen_1= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_2= DQUOTE TK_9= 'o' DQUOTEGen_3= DQUOTE RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE VBARGen_1= VBAR (TK_10= '\\n' )? TK_11= 'xargs' TK_12= 'rm' MINUSGen_1= MINUS TK_13= 'f' GREATANDGen= GREATAND NUMBERGen= NUMBER (TK_14= '\\n' | TK_15= ';' ) )
            // GrammarShellForMancoosi.g:7123:4: TK_0= 'dpkg' MINUSGen= MINUS TK_1= 'L' packGen+= pack VBARGen= VBAR (TK_2= '\\n' )? TK_3= 'awk' PSINGLEGen= PSINGLE input_variableGen+= input_variable TILDEGen= TILDE SLASHGen= SLASH BSLASHGen= BSLASH TK_4= '.py' TK_5= '$' SLASHGen_1= SLASH LGRAFGen= LGRAF TK_6= 'print' input_variableGen_1+= input_variable DQUOTEGen= DQUOTE TK_7= 'c' BSLASHGen_1= BSLASH TK_8= 'n' DQUOTEGen_1= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_2= DQUOTE TK_9= 'o' DQUOTEGen_3= DQUOTE RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE VBARGen_1= VBAR (TK_10= '\\n' )? TK_11= 'xargs' TK_12= 'rm' MINUSGen_1= MINUS TK_13= 'f' GREATANDGen= GREATAND NUMBERGen= NUMBER (TK_14= '\\n' | TK_15= ';' )
            {
            TK_0=(Token)match(input,142,FOLLOW_142_in_templateA317449); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA317454); if (state.failed) return retval;
            TK_1=(Token)match(input,143,FOLLOW_143_in_templateA317459); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_in_templateA317464);
            packGen=pack();

            state._fsp--;
            if (state.failed) return retval;
            if (list_packGen==null) list_packGen=new ArrayList();
            list_packGen.add(packGen);

            VBARGen=(Token)match(input,VBAR,FOLLOW_VBAR_in_templateA317469); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7123:71: (TK_2= '\\n' )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==78) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // GrammarShellForMancoosi.g:7123:73: TK_2= '\\n'
                    {
                    TK_2=(Token)match(input,78,FOLLOW_78_in_templateA317475); if (state.failed) return retval;

                    }
                    break;

            }

            TK_3=(Token)match(input,144,FOLLOW_144_in_templateA317482); if (state.failed) return retval;
            PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA317487); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA317492);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            TILDEGen=(Token)match(input,TILDE,FOLLOW_TILDE_in_templateA317497); if (state.failed) return retval;
            SLASHGen=(Token)match(input,SLASH,FOLLOW_SLASH_in_templateA317503); if (state.failed) return retval;
            BSLASHGen=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA317508); if (state.failed) return retval;
            TK_4=(Token)match(input,145,FOLLOW_145_in_templateA317513); if (state.failed) return retval;
            TK_5=(Token)match(input,146,FOLLOW_146_in_templateA317518); if (state.failed) return retval;
            SLASHGen_1=(Token)match(input,SLASH,FOLLOW_SLASH_in_templateA317523); if (state.failed) return retval;
            LGRAFGen=(Token)match(input,LGRAF,FOLLOW_LGRAF_in_templateA317528); if (state.failed) return retval;
            TK_6=(Token)match(input,147,FOLLOW_147_in_templateA317533); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA317538);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA317543); if (state.failed) return retval;
            TK_7=(Token)match(input,148,FOLLOW_148_in_templateA317548); if (state.failed) return retval;
            BSLASHGen_1=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA317553); if (state.failed) return retval;
            TK_8=(Token)match(input,117,FOLLOW_117_in_templateA317558); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA317563); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA317568);
            input_variableGen_2=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_2==null) list_input_variableGen_2=new ArrayList();
            list_input_variableGen_2.add(input_variableGen_2);

            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA317573); if (state.failed) return retval;
            TK_9=(Token)match(input,149,FOLLOW_149_in_templateA317578); if (state.failed) return retval;
            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA317583); if (state.failed) return retval;
            RGRAFGen=(Token)match(input,RGRAF,FOLLOW_RGRAF_in_templateA317588); if (state.failed) return retval;
            PSINGLEGen_1=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA317593); if (state.failed) return retval;
            VBARGen_1=(Token)match(input,VBAR,FOLLOW_VBAR_in_templateA317598); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7123:529: (TK_10= '\\n' )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==78) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    // GrammarShellForMancoosi.g:7123:531: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA317604); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,150,FOLLOW_150_in_templateA317611); if (state.failed) return retval;
            TK_12=(Token)match(input,107,FOLLOW_107_in_templateA317616); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA317621); if (state.failed) return retval;
            TK_13=(Token)match(input,108,FOLLOW_108_in_templateA317626); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA317631); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA317636); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7123:640: (TK_14= '\\n' | TK_15= ';' )
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==78) ) {
                alt277=1;
            }
            else if ( (LA277_0==83) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    // GrammarShellForMancoosi.g:7123:642: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA317642); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7123:656: TK_15= ';'
                    {
                    TK_15=(Token)match(input,83,FOLLOW_83_in_templateA317649); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA31ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA31ReturnNode.setKind("templateA31");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA31ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_packGen != null) {
              	        for(Iterator it = list_packGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_return r = (GrammarShellForMancoosiParser.pack_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack");
              	            	templateA31ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(VBARGen != null) {
              			Leaf VBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", (VBARGen!=null?VBARGen.getText():null), VBARGen.getCharPositionInLine(), VBARGen.getLine());
              			templateA31ReturnNode.getChildren().add(VBARGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PSINGLEGen != null) {
              			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen!=null?PSINGLEGen.getText():null), PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
              			templateA31ReturnNode.getChildren().add(PSINGLEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA31ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(TILDEGen != null) {
              			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", (TILDEGen!=null?TILDEGen.getText():null), TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
              			templateA31ReturnNode.getChildren().add(TILDEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SLASHGen != null) {
              			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen!=null?SLASHGen.getText():null), SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
              			templateA31ReturnNode.getChildren().add(SLASHGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen != null) {
              			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen!=null?BSLASHGen.getText():null), BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
              			templateA31ReturnNode.getChildren().add(BSLASHGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(SLASHGen_1 != null) {
              			Leaf SLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen_1!=null?SLASHGen_1.getText():null), SLASHGen_1.getCharPositionInLine(), SLASHGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(SLASHGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(LGRAFGen != null) {
              			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", (LGRAFGen!=null?LGRAFGen.getText():null), LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
              			templateA31ReturnNode.getChildren().add(LGRAFGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA31ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA31ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(BSLASHGen_1 != null) {
              			Leaf BSLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_1!=null?BSLASHGen_1.getText():null), BSLASHGen_1.getCharPositionInLine(), BSLASHGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(BSLASHGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_2 != null) {
              	        for(Iterator it = list_input_variableGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA31ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA31ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA31ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RGRAFGen != null) {
              			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", (RGRAFGen!=null?RGRAFGen.getText():null), RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
              			templateA31ReturnNode.getChildren().add(RGRAFGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PSINGLEGen_1 != null) {
              			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen_1!=null?PSINGLEGen_1.getText():null), PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(PSINGLEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(VBARGen_1 != null) {
              			Leaf VBARGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", (VBARGen_1!=null?VBARGen_1.getText():null), VBARGen_1.getCharPositionInLine(), VBARGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(VBARGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA31ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA31ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA31ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA31ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA31ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA31"

    public static class templateA32_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA32"
    // GrammarShellForMancoosi.g:7348:1: templateA32 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA32_return templateA32() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA32_return retval = new GrammarShellForMancoosiParser.templateA32_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token MINUSGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:7349:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:7349:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA327672); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:14: (TK_1= '\\n' )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==78) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA327678); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA327685); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:58: (DQUOTEGen= DQUOTE )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==DQUOTE) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA327690); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA327696);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:7349:114: (DQUOTEGen_1= DQUOTE )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==DQUOTE) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA327701); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA327707); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:147: (DQUOTEGen_2= DQUOTE )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==DQUOTE) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA327712); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA327718); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:186: (DQUOTEGen_3= DQUOTE )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==DQUOTE) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA327723); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA327729); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:215: (TK_3= '\\n' )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==78) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA327735); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA327742); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:241: (TK_4= '\\n' )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==78) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA327748); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA327755); if (state.failed) return retval;
            TK_6=(Token)match(input,151,FOLLOW_151_in_templateA327760); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA327765); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA327770); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA327775); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA327780); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA327785); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA327790); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA327795); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:418: (TK_9= '\\n' )?
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==78) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:420: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA327801); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,151,FOLLOW_151_in_templateA327808); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA327813); if (state.failed) return retval;
            TK_11=(Token)match(input,85,FOLLOW_85_in_templateA327818); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:488: (TK_12= '\\n' | TK_13= ';' )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==78) ) {
                alt286=1;
            }
            else if ( (LA286_0==83) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:490: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA327824); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7349:504: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA327831); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA327837); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7349:527: (TK_15= '\\n' | TK_16= ';' )
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==78) ) {
                alt287=1;
            }
            else if ( (LA287_0==83) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    // GrammarShellForMancoosi.g:7349:529: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA327843); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7349:543: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA327850); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA32ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA32ReturnNode.setKind("templateA32");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA32ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA32ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA32ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA32ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA32ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA32ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA32ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA32ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA32ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA32ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA32ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA32ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA32ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA32ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA32ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA32ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA32ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA32"

    public static class templateA33_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA33"
    // GrammarShellForMancoosi.g:7524:1: templateA33 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA33_return templateA33() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA33_return retval = new GrammarShellForMancoosiParser.templateA33_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token MINUSGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:7525:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:7525:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? TK_5= 'which' TK_6= 'scrollkeeper-update' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_7= ';' TK_8= 'then' (TK_9= '\\n' )? TK_10= 'scrollkeeper-update' MINUSGen= MINUS TK_11= 'q' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA337875); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:14: (TK_1= '\\n' )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==78) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA337881); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA337888); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:58: (DQUOTEGen= DQUOTE )?
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==DQUOTE) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA337893); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA337899);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:7525:114: (DQUOTEGen_1= DQUOTE )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==DQUOTE) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA337904); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA337910); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:147: (DQUOTEGen_2= DQUOTE )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==DQUOTE) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA337915); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA337921); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:183: (DQUOTEGen_3= DQUOTE )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==DQUOTE) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA337926); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA337932); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:212: (TK_3= '\\n' )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==78) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA337938); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA337945); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:238: (TK_4= '\\n' )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==78) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:240: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA337951); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,81,FOLLOW_81_in_templateA337958); if (state.failed) return retval;
            TK_6=(Token)match(input,151,FOLLOW_151_in_templateA337963); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA337968); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA337973); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA337978); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA337983); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA337988); if (state.failed) return retval;
            TK_7=(Token)match(input,83,FOLLOW_83_in_templateA337993); if (state.failed) return retval;
            TK_8=(Token)match(input,84,FOLLOW_84_in_templateA337998); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:415: (TK_9= '\\n' )?
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==78) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:417: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA338004); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,151,FOLLOW_151_in_templateA338011); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA338016); if (state.failed) return retval;
            TK_11=(Token)match(input,85,FOLLOW_85_in_templateA338021); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:485: (TK_12= '\\n' | TK_13= ';' )
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==78) ) {
                alt296=1;
            }
            else if ( (LA296_0==83) ) {
                alt296=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 296, 0, input);

                throw nvae;
            }
            switch (alt296) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:487: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA338027); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7525:501: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA338034); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA338040); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7525:524: (TK_15= '\\n' | TK_16= ';' )
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==78) ) {
                alt297=1;
            }
            else if ( (LA297_0==83) ) {
                alt297=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 297, 0, input);

                throw nvae;
            }
            switch (alt297) {
                case 1 :
                    // GrammarShellForMancoosi.g:7525:526: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA338046); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7525:540: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA338053); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA33ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA33ReturnNode.setKind("templateA33");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA33ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA33ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA33ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA33ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA33ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA33ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA33ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA33ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA33ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA33ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA33ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA33ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA33ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA33ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA33ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA33ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA33ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA33"

    public static class templateA34_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA34"
    // GrammarShellForMancoosi.g:7700:2: templateA34 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'rm' MINUSGen= MINUS TK_7= 'f' centralcatGen+= centralcat (TK_8= '\\n' | TK_9= ';' ) TK_10= 'for' TK_11= 'ordcat' TK_12= 'in' (ordcatsGen+= ordcats )+ TK_13= ';' TK_14= 'do' (TK_15= '\\n' )? TK_16= 'update-catalog' DMINUSGen= DMINUS TK_17= 'quiet' DMINUSGen_1= DMINUS TK_18= 'add' centralcatGen_1+= centralcat TK_19= '$' LGRAFGen= LGRAF TK_20= 'ordcat' RGRAFGen= RGRAF (TK_21= '\\n' | TK_22= ';' ) TK_23= 'done' (TK_24= '\\n' | TK_25= ';' ) TK_26= 'update-catalog' DMINUSGen_2= DMINUS TK_27= 'quiet' DMINUSGen_3= DMINUS TK_28= 'add' DMINUSGen_4= DMINUS TK_29= 'super' centralcatGen_2+= centralcat (TK_30= '\\n' | TK_31= ';' ) TK_32= 'fi' (TK_33= '\\n' | TK_34= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA34_return templateA34() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA34_return retval = new GrammarShellForMancoosiParser.templateA34_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token MINUSGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token DMINUSGen=null;
        Token TK_17=null;
        Token DMINUSGen_1=null;
        Token TK_18=null;
        Token TK_19=null;
        Token LGRAFGen=null;
        Token TK_20=null;
        Token RGRAFGen=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token DMINUSGen_2=null;
        Token TK_27=null;
        Token DMINUSGen_3=null;
        Token TK_28=null;
        Token DMINUSGen_4=null;
        Token TK_29=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        List list_input_variableGen=null;
        List list_centralcatGen=null;
        List list_ordcatsGen=null;
        List list_centralcatGen_1=null;
        List list_centralcatGen_2=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope centralcatGen = null;
        RuleReturnScope ordcatsGen = null;
        RuleReturnScope centralcatGen_1 = null;
        RuleReturnScope centralcatGen_2 = null;
        try {
            // GrammarShellForMancoosi.g:7701:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'rm' MINUSGen= MINUS TK_7= 'f' centralcatGen+= centralcat (TK_8= '\\n' | TK_9= ';' ) TK_10= 'for' TK_11= 'ordcat' TK_12= 'in' (ordcatsGen+= ordcats )+ TK_13= ';' TK_14= 'do' (TK_15= '\\n' )? TK_16= 'update-catalog' DMINUSGen= DMINUS TK_17= 'quiet' DMINUSGen_1= DMINUS TK_18= 'add' centralcatGen_1+= centralcat TK_19= '$' LGRAFGen= LGRAF TK_20= 'ordcat' RGRAFGen= RGRAF (TK_21= '\\n' | TK_22= ';' ) TK_23= 'done' (TK_24= '\\n' | TK_25= ';' ) TK_26= 'update-catalog' DMINUSGen_2= DMINUS TK_27= 'quiet' DMINUSGen_3= DMINUS TK_28= 'add' DMINUSGen_4= DMINUS TK_29= 'super' centralcatGen_2+= centralcat (TK_30= '\\n' | TK_31= ';' ) TK_32= 'fi' (TK_33= '\\n' | TK_34= ';' ) )
            // GrammarShellForMancoosi.g:7701:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? TK_6= 'rm' MINUSGen= MINUS TK_7= 'f' centralcatGen+= centralcat (TK_8= '\\n' | TK_9= ';' ) TK_10= 'for' TK_11= 'ordcat' TK_12= 'in' (ordcatsGen+= ordcats )+ TK_13= ';' TK_14= 'do' (TK_15= '\\n' )? TK_16= 'update-catalog' DMINUSGen= DMINUS TK_17= 'quiet' DMINUSGen_1= DMINUS TK_18= 'add' centralcatGen_1+= centralcat TK_19= '$' LGRAFGen= LGRAF TK_20= 'ordcat' RGRAFGen= RGRAF (TK_21= '\\n' | TK_22= ';' ) TK_23= 'done' (TK_24= '\\n' | TK_25= ';' ) TK_26= 'update-catalog' DMINUSGen_2= DMINUS TK_27= 'quiet' DMINUSGen_3= DMINUS TK_28= 'add' DMINUSGen_4= DMINUS TK_29= 'super' centralcatGen_2+= centralcat (TK_30= '\\n' | TK_31= ';' ) TK_32= 'fi' (TK_33= '\\n' | TK_34= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA348080); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:14: (TK_1= '\\n' )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==78) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // GrammarShellForMancoosi.g:7701:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA348086); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA348093); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:58: (DQUOTEGen= DQUOTE )?
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==DQUOTE) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA348098); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA348104);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:7701:114: (DQUOTEGen_1= DQUOTE )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==DQUOTE) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA348109); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA348115); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:147: (DQUOTEGen_2= DQUOTE )?
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==DQUOTE) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA348120); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA348126); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:186: (DQUOTEGen_3= DQUOTE )?
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==DQUOTE) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA348131); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA348137); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA348142); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA348147); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:238: (TK_5= '\\n' )?
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==78) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    // GrammarShellForMancoosi.g:7701:240: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA348153); if (state.failed) return retval;

                    }
                    break;

            }

            TK_6=(Token)match(input,107,FOLLOW_107_in_templateA348160); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA348165); if (state.failed) return retval;
            TK_7=(Token)match(input,108,FOLLOW_108_in_templateA348170); if (state.failed) return retval;
            pushFollow(FOLLOW_centralcat_in_templateA348175);
            centralcatGen=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen==null) list_centralcatGen=new ArrayList();
            list_centralcatGen.add(centralcatGen);

            // GrammarShellForMancoosi.g:7701:316: (TK_8= '\\n' | TK_9= ';' )
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==78) ) {
                alt304=1;
            }
            else if ( (LA304_0==83) ) {
                alt304=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);

                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    // GrammarShellForMancoosi.g:7701:318: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA348181); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7701:331: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA348188); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,102,FOLLOW_102_in_templateA348194); if (state.failed) return retval;
            TK_11=(Token)match(input,152,FOLLOW_152_in_templateA348199); if (state.failed) return retval;
            TK_12=(Token)match(input,104,FOLLOW_104_in_templateA348204); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7701:393: (ordcatsGen+= ordcats )+
            int cnt305=0;
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( ((LA305_0>=GREAT && LA305_0<=MINUS)||(LA305_0>=PATHEMACSINST && LA305_0<=PATHCOMPYTH)||(LA305_0>=PSINGLE && LA305_0<=BSLASH)||(LA305_0>=PATHMIME && LA305_0<=PATHP)||(LA305_0>=DLESS && LA305_0<=CLOBBER)||(LA305_0>=PATHREL && LA305_0<=ID)||(LA305_0>=80 && LA305_0<=82)||LA305_0==85||(LA305_0>=87 && LA305_0<=93)||(LA305_0>=95 && LA305_0<=101)||LA305_0==103||LA305_0==105||(LA305_0>=107 && LA305_0<=108)||(LA305_0>=110 && LA305_0<=112)||(LA305_0>=114 && LA305_0<=119)||(LA305_0>=121 && LA305_0<=144)||(LA305_0>=146 && LA305_0<=159)||(LA305_0>=161 && LA305_0<=175)||(LA305_0>=177 && LA305_0<=188)||(LA305_0>=190 && LA305_0<=195)||(LA305_0>=201 && LA305_0<=207)) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: ordcatsGen+= ordcats
            	    {
            	    pushFollow(FOLLOW_ordcats_in_templateA348209);
            	    ordcatsGen=ordcats();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ordcatsGen==null) list_ordcatsGen=new ArrayList();
            	    list_ordcatsGen.add(ordcatsGen);


            	    }
            	    break;

            	default :
            	    if ( cnt305 >= 1 ) break loop305;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(305, input);
                        throw eee;
                }
                cnt305++;
            } while (true);

            TK_13=(Token)match(input,83,FOLLOW_83_in_templateA348215); if (state.failed) return retval;
            TK_14=(Token)match(input,106,FOLLOW_106_in_templateA348223); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7702:15: (TK_15= '\\n' )?
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==78) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    // GrammarShellForMancoosi.g:7702:17: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA348229); if (state.failed) return retval;

                    }
                    break;

            }

            TK_16=(Token)match(input,153,FOLLOW_153_in_templateA348236); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA348241); if (state.failed) return retval;
            TK_17=(Token)match(input,115,FOLLOW_115_in_templateA348246); if (state.failed) return retval;
            DMINUSGen_1=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA348252); if (state.failed) return retval;
            TK_18=(Token)match(input,154,FOLLOW_154_in_templateA348257); if (state.failed) return retval;
            pushFollow(FOLLOW_centralcat_in_templateA348262);
            centralcatGen_1=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen_1==null) list_centralcatGen_1=new ArrayList();
            list_centralcatGen_1.add(centralcatGen_1);

            TK_19=(Token)match(input,146,FOLLOW_146_in_templateA348267); if (state.failed) return retval;
            LGRAFGen=(Token)match(input,LGRAF,FOLLOW_LGRAF_in_templateA348272); if (state.failed) return retval;
            TK_20=(Token)match(input,152,FOLLOW_152_in_templateA348277); if (state.failed) return retval;
            RGRAFGen=(Token)match(input,RGRAF,FOLLOW_RGRAF_in_templateA348282); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7702:209: (TK_21= '\\n' | TK_22= ';' )
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==78) ) {
                alt307=1;
            }
            else if ( (LA307_0==83) ) {
                alt307=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);

                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    // GrammarShellForMancoosi.g:7702:211: TK_21= '\\n'
                    {
                    TK_21=(Token)match(input,78,FOLLOW_78_in_templateA348288); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7702:225: TK_22= ';'
                    {
                    TK_22=(Token)match(input,83,FOLLOW_83_in_templateA348295); if (state.failed) return retval;

                    }
                    break;

            }

            TK_23=(Token)match(input,109,FOLLOW_109_in_templateA348301); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7702:250: (TK_24= '\\n' | TK_25= ';' )
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==78) ) {
                alt308=1;
            }
            else if ( (LA308_0==83) ) {
                alt308=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);

                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    // GrammarShellForMancoosi.g:7702:252: TK_24= '\\n'
                    {
                    TK_24=(Token)match(input,78,FOLLOW_78_in_templateA348307); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7702:266: TK_25= ';'
                    {
                    TK_25=(Token)match(input,83,FOLLOW_83_in_templateA348314); if (state.failed) return retval;

                    }
                    break;

            }

            TK_26=(Token)match(input,153,FOLLOW_153_in_templateA348320); if (state.failed) return retval;
            DMINUSGen_2=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA348325); if (state.failed) return retval;
            TK_27=(Token)match(input,115,FOLLOW_115_in_templateA348330); if (state.failed) return retval;
            DMINUSGen_3=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA348335); if (state.failed) return retval;
            TK_28=(Token)match(input,154,FOLLOW_154_in_templateA348340); if (state.failed) return retval;
            DMINUSGen_4=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA348345); if (state.failed) return retval;
            TK_29=(Token)match(input,155,FOLLOW_155_in_templateA348350); if (state.failed) return retval;
            pushFollow(FOLLOW_centralcat_in_templateA348355);
            centralcatGen_2=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen_2==null) list_centralcatGen_2=new ArrayList();
            list_centralcatGen_2.add(centralcatGen_2);

            // GrammarShellForMancoosi.g:7702:433: (TK_30= '\\n' | TK_31= ';' )
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==78) ) {
                alt309=1;
            }
            else if ( (LA309_0==83) ) {
                alt309=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);

                throw nvae;
            }
            switch (alt309) {
                case 1 :
                    // GrammarShellForMancoosi.g:7702:435: TK_30= '\\n'
                    {
                    TK_30=(Token)match(input,78,FOLLOW_78_in_templateA348361); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7702:449: TK_31= ';'
                    {
                    TK_31=(Token)match(input,83,FOLLOW_83_in_templateA348368); if (state.failed) return retval;

                    }
                    break;

            }

            TK_32=(Token)match(input,86,FOLLOW_86_in_templateA348374); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:7702:472: (TK_33= '\\n' | TK_34= ';' )
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==78) ) {
                alt310=1;
            }
            else if ( (LA310_0==83) ) {
                alt310=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    // GrammarShellForMancoosi.g:7702:474: TK_33= '\\n'
                    {
                    TK_33=(Token)match(input,78,FOLLOW_78_in_templateA348380); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:7702:488: TK_34= ';'
                    {
                    TK_34=(Token)match(input,83,FOLLOW_83_in_templateA348387); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA34ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA34ReturnNode.setKind("templateA34");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA34ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA34ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA34ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA34ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA34ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA34ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA34ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA34ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA34ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_centralcatGen != null) {
              	        for(Iterator it = list_centralcatGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA34ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_ordcatsGen != null) {
              	        for(Iterator it = list_ordcatsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.ordcats_return r = (GrammarShellForMancoosiParser.ordcats_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ordcats");
              	            	templateA34ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA34ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_1 != null) {
              			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_1!=null?DMINUSGen_1.getText():null), DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
              			templateA34ReturnNode.getChildren().add(DMINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_centralcatGen_1 != null) {
              	        for(Iterator it = list_centralcatGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA34ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LGRAFGen != null) {
              			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", (LGRAFGen!=null?LGRAFGen.getText():null), LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
              			templateA34ReturnNode.getChildren().add(LGRAFGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RGRAFGen != null) {
              			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", (RGRAFGen!=null?RGRAFGen.getText():null), RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
              			templateA34ReturnNode.getChildren().add(RGRAFGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_2 != null) {
              			Leaf DMINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_2!=null?DMINUSGen_2.getText():null), DMINUSGen_2.getCharPositionInLine(), DMINUSGen_2.getLine());
              			templateA34ReturnNode.getChildren().add(DMINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_3 != null) {
              			Leaf DMINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_3!=null?DMINUSGen_3.getText():null), DMINUSGen_3.getCharPositionInLine(), DMINUSGen_3.getLine());
              			templateA34ReturnNode.getChildren().add(DMINUSGen_3Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_4 != null) {
              			Leaf DMINUSGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_4!=null?DMINUSGen_4.getText():null), DMINUSGen_4.getCharPositionInLine(), DMINUSGen_4.getLine());
              			templateA34ReturnNode.getChildren().add(DMINUSGen_4Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_centralcatGen_2 != null) {
              	        for(Iterator it = list_centralcatGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA34ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA34ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA34ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA34"

    public static class templateA35_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA35"
    // GrammarShellForMancoosi.g:8012:2: templateA35 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'update-catalog' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' DMINUSGen_2= DMINUS TK_12= 'super' centralcatGen+= centralcat (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA35_return templateA35() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA35_return retval = new GrammarShellForMancoosiParser.templateA35_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ORGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_6=null;
        Token TK_5=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_1=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token DMINUSGen=null;
        Token TK_10=null;
        Token DMINUSGen_1=null;
        Token TK_11=null;
        Token DMINUSGen_2=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_centralcatGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope centralcatGen = null;
        try {
            // GrammarShellForMancoosi.g:8013:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'update-catalog' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' DMINUSGen_2= DMINUS TK_12= 'super' centralcatGen+= centralcat (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' ) )
            // GrammarShellForMancoosi.g:8013:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ORGen= OR (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_5= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? TK_9= 'update-catalog' DMINUSGen= DMINUS TK_10= 'quiet' DMINUSGen_1= DMINUS TK_11= 'remove' DMINUSGen_2= DMINUS TK_12= 'super' centralcatGen+= centralcat (TK_13= '\\n' | TK_14= ';' ) TK_15= 'fi' (TK_16= '\\n' | TK_17= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA358412); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:14: (TK_1= '\\n' )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==78) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // GrammarShellForMancoosi.g:8013:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA358418); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA358425); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:58: (DQUOTEGen= DQUOTE )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==DQUOTE) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358430); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA358436);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:8013:114: (DQUOTEGen_1= DQUOTE )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==DQUOTE) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358441); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA358447); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:147: (DQUOTEGen_2= DQUOTE )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==DQUOTE) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358452); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA358458); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:183: (DQUOTEGen_3= DQUOTE )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==DQUOTE) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358463); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA358469); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:212: (TK_3= '\\n' )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==78) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // GrammarShellForMancoosi.g:8013:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA358475); if (state.failed) return retval;

                    }
                    break;

            }

            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA358482); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:236: (TK_4= '\\n' )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==78) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // GrammarShellForMancoosi.g:8013:238: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA358488); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA358495); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:284: (DQUOTEGen_4= DQUOTE )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==DQUOTE) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_4= DQUOTE
                    {
                    DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358500); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA358506);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            // GrammarShellForMancoosi.g:8013:342: (DQUOTEGen_5= DQUOTE )?
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==DQUOTE) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_5= DQUOTE
                    {
                    DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358511); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA358517); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:377: (DQUOTEGen_6= DQUOTE )?
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==DQUOTE) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_6= DQUOTE
                    {
                    DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358522); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,90,FOLLOW_90_in_templateA358528); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8013:414: (DQUOTEGen_7= DQUOTE )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==DQUOTE) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_7= DQUOTE
                    {
                    DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA358533); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA358539); if (state.failed) return retval;
            TK_6=(Token)match(input,83,FOLLOW_83_in_templateA358544); if (state.failed) return retval;
            TK_7=(Token)match(input,84,FOLLOW_84_in_templateA358552); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8014:16: (TK_8= '\\n' )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==78) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    // GrammarShellForMancoosi.g:8014:18: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA358558); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,153,FOLLOW_153_in_templateA358565); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA358570); if (state.failed) return retval;
            TK_10=(Token)match(input,115,FOLLOW_115_in_templateA358575); if (state.failed) return retval;
            DMINUSGen_1=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA358580); if (state.failed) return retval;
            TK_11=(Token)match(input,87,FOLLOW_87_in_templateA358585); if (state.failed) return retval;
            DMINUSGen_2=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA358590); if (state.failed) return retval;
            TK_12=(Token)match(input,155,FOLLOW_155_in_templateA358595); if (state.failed) return retval;
            pushFollow(FOLLOW_centralcat_in_templateA358600);
            centralcatGen=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen==null) list_centralcatGen=new ArrayList();
            list_centralcatGen.add(centralcatGen);

            // GrammarShellForMancoosi.g:8014:184: (TK_13= '\\n' | TK_14= ';' )
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==78) ) {
                alt323=1;
            }
            else if ( (LA323_0==83) ) {
                alt323=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);

                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    // GrammarShellForMancoosi.g:8014:186: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA358606); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8014:200: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA358613); if (state.failed) return retval;

                    }
                    break;

            }

            TK_15=(Token)match(input,86,FOLLOW_86_in_templateA358619); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8014:223: (TK_16= '\\n' | TK_17= ';' )
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==78) ) {
                alt324=1;
            }
            else if ( (LA324_0==83) ) {
                alt324=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);

                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    // GrammarShellForMancoosi.g:8014:225: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA358625); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8014:239: TK_17= ';'
                    {
                    TK_17=(Token)match(input,83,FOLLOW_83_in_templateA358632); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA35ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA35ReturnNode.setKind("templateA35");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA35ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA35ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA35ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA35ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA35ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA35ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA35ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA35ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA35ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA35ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA35ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_1 != null) {
              			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_1!=null?DMINUSGen_1.getText():null), DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
              			templateA35ReturnNode.getChildren().add(DMINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen_2 != null) {
              			Leaf DMINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_2!=null?DMINUSGen_2.getText():null), DMINUSGen_2.getCharPositionInLine(), DMINUSGen_2.getLine());
              			templateA35ReturnNode.getChildren().add(DMINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_centralcatGen != null) {
              	        for(Iterator it = list_centralcatGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA35ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA35ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA35ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA35"

    public static class templateA36_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA36"
    // GrammarShellForMancoosi.g:8235:2: templateA36 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'rm' MINUSGen= MINUS TK_8= 'f' centralcatGen+= centralcat centralcatGen_1+= centralcat (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA36_return templateA36() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA36_return retval = new GrammarShellForMancoosiParser.templateA36_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token MINUSGen=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        List list_input_variableGen=null;
        List list_centralcatGen=null;
        List list_centralcatGen_1=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope centralcatGen = null;
        RuleReturnScope centralcatGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:8236:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'rm' MINUSGen= MINUS TK_8= 'f' centralcatGen+= centralcat centralcatGen_1+= centralcat (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) )
            // GrammarShellForMancoosi.g:8236:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'rm' MINUSGen= MINUS TK_8= 'f' centralcatGen+= centralcat centralcatGen_1+= centralcat (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA368659); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:14: (TK_1= '\\n' )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==78) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    // GrammarShellForMancoosi.g:8236:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA368665); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA368672); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:58: (DQUOTEGen= DQUOTE )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==DQUOTE) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA368677); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA368683);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:8236:114: (DQUOTEGen_1= DQUOTE )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==DQUOTE) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA368688); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA368694); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:147: (DQUOTEGen_2= DQUOTE )?
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==DQUOTE) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA368699); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,97,FOLLOW_97_in_templateA368705); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:182: (DQUOTEGen_3= DQUOTE )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==DQUOTE) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA368710); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA368716); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:211: (TK_3= '\\n' )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==78) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    // GrammarShellForMancoosi.g:8236:213: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA368722); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA368729); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA368734); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:248: (TK_6= '\\n' )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==78) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // GrammarShellForMancoosi.g:8236:250: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA368740); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,107,FOLLOW_107_in_templateA368747); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA368752); if (state.failed) return retval;
            TK_8=(Token)match(input,108,FOLLOW_108_in_templateA368757); if (state.failed) return retval;
            pushFollow(FOLLOW_centralcat_in_templateA368762);
            centralcatGen=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen==null) list_centralcatGen=new ArrayList();
            list_centralcatGen.add(centralcatGen);

            pushFollow(FOLLOW_centralcat_in_templateA368767);
            centralcatGen_1=centralcat();

            state._fsp--;
            if (state.failed) return retval;
            if (list_centralcatGen_1==null) list_centralcatGen_1=new ArrayList();
            list_centralcatGen_1.add(centralcatGen_1);

            // GrammarShellForMancoosi.g:8236:355: (TK_9= '\\n' | TK_10= ';' )
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==78) ) {
                alt332=1;
            }
            else if ( (LA332_0==83) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    // GrammarShellForMancoosi.g:8236:357: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA368773); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8236:370: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA368780); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,86,FOLLOW_86_in_templateA368786); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8236:393: (TK_12= '\\n' | TK_13= ';' )
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==78) ) {
                alt333=1;
            }
            else if ( (LA333_0==83) ) {
                alt333=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);

                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    // GrammarShellForMancoosi.g:8236:395: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA368792); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8236:409: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA368799); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA36ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA36ReturnNode.setKind("templateA36");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA36ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA36ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA36ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA36ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA36ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA36ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA36ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA36ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA36ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_centralcatGen != null) {
              	        for(Iterator it = list_centralcatGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA36ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_centralcatGen_1 != null) {
              	        for(Iterator it = list_centralcatGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.centralcat_return r = (GrammarShellForMancoosiParser.centralcat_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("centralcat");
              	            	templateA36ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA36ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA36ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA36"

    public static class templateA37_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA37"
    // GrammarShellForMancoosi.g:8386:1: templateA37 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA37_return templateA37() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA37_return retval = new GrammarShellForMancoosiParser.templateA37_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token DQUOTEGen_4=null;
        Token APGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_1=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token PATHMIMEGen=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:8387:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:8387:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA378822); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:14: (TK_1= '\\n' )?
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==78) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    // GrammarShellForMancoosi.g:8387:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA378828); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA378835); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:58: (DQUOTEGen= DQUOTE )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==DQUOTE) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378840); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA378846);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:8387:114: (DQUOTEGen_1= DQUOTE )?
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==DQUOTE) ) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378851); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA378857); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:147: (DQUOTEGen_2= DQUOTE )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==DQUOTE) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378862); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA378868); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:186: (DQUOTEGen_3= DQUOTE )?
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==DQUOTE) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378873); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA378879); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:215: (TK_3= '\\n' )?
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==78) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    // GrammarShellForMancoosi.g:8387:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA378885); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA378892); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8387:241: (TK_4= '\\n' )?
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==78) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    // GrammarShellForMancoosi.g:8387:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA378898); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA378905); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA378910); if (state.failed) return retval;
            TK_5=(Token)match(input,92,FOLLOW_92_in_templateA378915); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378920); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA378925); if (state.failed) return retval;
            TK_6=(Token)match(input,81,FOLLOW_81_in_templateA378930); if (state.failed) return retval;
            TK_7=(Token)match(input,156,FOLLOW_156_in_templateA378935); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA378940); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA378945); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA378950); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA378955); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA378960); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA378965); if (state.failed) return retval;
            TK_8=(Token)match(input,83,FOLLOW_83_in_templateA378970); if (state.failed) return retval;
            TK_9=(Token)match(input,84,FOLLOW_84_in_templateA378977); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8388:15: (TK_10= '\\n' )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==78) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // GrammarShellForMancoosi.g:8388:17: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA378983); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,156,FOLLOW_156_in_templateA378990); if (state.failed) return retval;
            PATHMIMEGen=(Token)match(input,PATHMIME,FOLLOW_PATHMIME_in_templateA378995); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8388:82: (TK_12= '\\n' | TK_13= ';' )
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==78) ) {
                alt342=1;
            }
            else if ( (LA342_0==83) ) {
                alt342=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    // GrammarShellForMancoosi.g:8388:84: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA379001); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8388:98: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA379008); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA379014); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8388:121: (TK_15= '\\n' | TK_16= ';' )
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==78) ) {
                alt343=1;
            }
            else if ( (LA343_0==83) ) {
                alt343=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    // GrammarShellForMancoosi.g:8388:123: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA379020); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8388:137: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA379027); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA37ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA37ReturnNode.setKind("templateA37");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA37ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA37ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA37ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA37ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA37ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA37ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA37ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA37ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA37ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA37ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA37ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA37ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA37ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA37ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHMIMEGen != null) {
              			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", (PATHMIMEGen!=null?PATHMIMEGen.getText():null), PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
              			templateA37ReturnNode.getChildren().add(PATHMIMEGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA37ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA37ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA37"

    public static class templateA38_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA38"
    // GrammarShellForMancoosi.g:8588:1: templateA38 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA38_return templateA38() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA38_return retval = new GrammarShellForMancoosiParser.templateA38_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token MINUSGen=null;
        Token TK_2=null;
        Token DQUOTEGen=null;
        Token APGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token PATHMIMEGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;

        try {
            // GrammarShellForMancoosi.g:8589:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' ) )
            // GrammarShellForMancoosi.g:8589:5: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK MINUSGen= MINUS TK_2= 'x' DQUOTEGen= DQUOTE APGen= AP TK_3= 'which' TK_4= 'update-mime-database' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'update-mime-database' PATHMIMEGen= PATHMIME (TK_9= '\\n' | TK_10= ';' ) TK_11= 'fi' (TK_12= '\\n' | TK_13= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA389051); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8589:15: (TK_1= '\\n' )?
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==78) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    // GrammarShellForMancoosi.g:8589:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA389057); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA389064); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA389069); if (state.failed) return retval;
            TK_2=(Token)match(input,92,FOLLOW_92_in_templateA389074); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA389079); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA389084); if (state.failed) return retval;
            TK_3=(Token)match(input,81,FOLLOW_81_in_templateA389089); if (state.failed) return retval;
            TK_4=(Token)match(input,156,FOLLOW_156_in_templateA389094); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA389099); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA389104); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA389109); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA389114); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA389119); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA389124); if (state.failed) return retval;
            TK_5=(Token)match(input,83,FOLLOW_83_in_templateA389129); if (state.failed) return retval;
            TK_6=(Token)match(input,84,FOLLOW_84_in_templateA389134); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8589:277: (TK_7= '\\n' )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==78) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // GrammarShellForMancoosi.g:8589:279: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA389140); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,156,FOLLOW_156_in_templateA389147); if (state.failed) return retval;
            PATHMIMEGen=(Token)match(input,PATHMIME,FOLLOW_PATHMIME_in_templateA389152); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8589:342: (TK_9= '\\n' | TK_10= ';' )
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==78) ) {
                alt346=1;
            }
            else if ( (LA346_0==83) ) {
                alt346=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 0, input);

                throw nvae;
            }
            switch (alt346) {
                case 1 :
                    // GrammarShellForMancoosi.g:8589:344: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA389158); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8589:357: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA389165); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,86,FOLLOW_86_in_templateA389171); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8589:380: (TK_12= '\\n' | TK_13= ';' )
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==78) ) {
                alt347=1;
            }
            else if ( (LA347_0==83) ) {
                alt347=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);

                throw nvae;
            }
            switch (alt347) {
                case 1 :
                    // GrammarShellForMancoosi.g:8589:382: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA389177); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8589:396: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA389184); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA38ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA38ReturnNode.setKind("templateA38");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA38ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA38ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA38ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA38ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA38ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA38ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA38ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA38ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA38ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA38ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHMIMEGen != null) {
              			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", (PATHMIMEGen!=null?PATHMIMEGen.getText():null), PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
              			templateA38ReturnNode.getChildren().add(PATHMIMEGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA38ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA38ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA38"

    public static class templateA39_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA39"
    // GrammarShellForMancoosi.g:8724:1: templateA39 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA39_return templateA39() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA39_return retval = new GrammarShellForMancoosiParser.templateA39_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token DQUOTEGen_4=null;
        Token APGen=null;
        Token TK_6=null;
        Token TK_7=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_1=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:8725:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:8725:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'x' DQUOTEGen_4= DQUOTE APGen= AP TK_6= 'which' TK_7= 'update-mime' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK TK_8= ';' TK_9= 'then' (TK_10= '\\n' )? TK_11= 'update-mime' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA399209); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:14: (TK_1= '\\n' )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==78) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // GrammarShellForMancoosi.g:8725:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA399215); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA399222); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:58: (DQUOTEGen= DQUOTE )?
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( (LA349_0==DQUOTE) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399227); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA399233);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:8725:114: (DQUOTEGen_1= DQUOTE )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==DQUOTE) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399238); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA399244); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:147: (DQUOTEGen_2= DQUOTE )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==DQUOTE) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399249); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA399255); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:186: (DQUOTEGen_3= DQUOTE )?
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==DQUOTE) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399260); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA399266); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:215: (TK_3= '\\n' )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==78) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // GrammarShellForMancoosi.g:8725:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA399272); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA399279); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8725:241: (TK_4= '\\n' )?
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==78) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    // GrammarShellForMancoosi.g:8725:243: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA399285); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA399292); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA399297); if (state.failed) return retval;
            TK_5=(Token)match(input,92,FOLLOW_92_in_templateA399302); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399307); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA399312); if (state.failed) return retval;
            TK_6=(Token)match(input,81,FOLLOW_81_in_templateA399317); if (state.failed) return retval;
            TK_7=(Token)match(input,157,FOLLOW_157_in_templateA399322); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA399327); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA399332); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA399337); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA399342); if (state.failed) return retval;
            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA399347); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA399352); if (state.failed) return retval;
            TK_8=(Token)match(input,83,FOLLOW_83_in_templateA399357); if (state.failed) return retval;
            TK_9=(Token)match(input,84,FOLLOW_84_in_templateA399364); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8726:16: (TK_10= '\\n' )?
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==78) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    // GrammarShellForMancoosi.g:8726:18: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA399371); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,157,FOLLOW_157_in_templateA399378); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8726:52: (TK_12= '\\n' | TK_13= ';' )
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==78) ) {
                alt356=1;
            }
            else if ( (LA356_0==83) ) {
                alt356=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);

                throw nvae;
            }
            switch (alt356) {
                case 1 :
                    // GrammarShellForMancoosi.g:8726:54: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA399384); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8726:68: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA399391); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA399397); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8726:91: (TK_15= '\\n' | TK_16= ';' )
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( (LA357_0==78) ) {
                alt357=1;
            }
            else if ( (LA357_0==83) ) {
                alt357=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);

                throw nvae;
            }
            switch (alt357) {
                case 1 :
                    // GrammarShellForMancoosi.g:8726:93: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA399403); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8726:107: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA399410); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA39ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA39ReturnNode.setKind("templateA39");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA39ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA39ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA39ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA39ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA39ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA39ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA39ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA39ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA39ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA39ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA39ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA39ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA39ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA39ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA39ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA39ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA39"

    public static class templateA40_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA40"
    // GrammarShellForMancoosi.g:8921:1: templateA40 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-mime' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-mime' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA40_return templateA40() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA40_return retval = new GrammarShellForMancoosiParser.templateA40_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;

        try {
            // GrammarShellForMancoosi.g:8922:1: (TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-mime' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-mime' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' ) )
            // GrammarShellForMancoosi.g:8922:5: TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-mime' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-mime' (TK_8= '\\n' | TK_9= ';' ) TK_10= 'fi' (TK_11= '\\n' | TK_12= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA409434); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8922:15: (TK_1= '\\n' )?
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==78) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    // GrammarShellForMancoosi.g:8922:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA409440); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,81,FOLLOW_81_in_templateA409448); if (state.failed) return retval;
            TK_3=(Token)match(input,157,FOLLOW_157_in_templateA409453); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA409458); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA409463); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA409468); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA409473); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA409478); if (state.failed) return retval;
            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA409483); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA409488); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8922:185: (TK_6= '\\n' )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==78) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // GrammarShellForMancoosi.g:8922:187: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA409494); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,157,FOLLOW_157_in_templateA409501); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8922:219: (TK_8= '\\n' | TK_9= ';' )
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==78) ) {
                alt360=1;
            }
            else if ( (LA360_0==83) ) {
                alt360=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);

                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    // GrammarShellForMancoosi.g:8922:221: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA409507); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8922:234: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA409514); if (state.failed) return retval;

                    }
                    break;

            }

            TK_10=(Token)match(input,86,FOLLOW_86_in_templateA409520); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:8922:256: (TK_11= '\\n' | TK_12= ';' )
            int alt361=2;
            int LA361_0 = input.LA(1);

            if ( (LA361_0==78) ) {
                alt361=1;
            }
            else if ( (LA361_0==83) ) {
                alt361=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);

                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    // GrammarShellForMancoosi.g:8922:258: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA409526); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:8922:272: TK_12= ';'
                    {
                    TK_12=(Token)match(input,83,FOLLOW_83_in_templateA409533); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA40ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA40ReturnNode.setKind("templateA40");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA40ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA40ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA40ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA40ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA40ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA40ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA40ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA40"

    public static class templateA41_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA41"
    // GrammarShellForMancoosi.g:9022:1: templateA41 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? TK_9= 'which' TK_10= 'suidregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_11= '\\n' )? ANDGen= AND (TK_12= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_13= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_14= '\\n' | TK_15= ';' ) TK_16= 'then' (TK_17= '\\n' )? TK_18= 'suidregister' MINUSGen_1= MINUS TK_19= 's' packGen+= pack fileGen+= file ownerGen+= owner groupGen+= group permsGen+= perms (TK_20= '\\n' | TK_21= ';' ) TK_22= 'elif' (TK_23= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_24= 'e' fileGen_1+= file RSBRACKGen_2= RSBRACK (TK_25= ';' | TK_26= '\\n' ) TK_27= 'then' (TK_28= '\\n' )? TK_29= 'chown' ownerGen_1+= owner COLONGen= COLON groupGen_1+= group fileGen_2+= file (TK_30= '\\n' | TK_31= ';' ) TK_32= 'chmod' permsGen_1+= perms fileGen_3+= file (TK_33= '\\n' | TK_34= ';' ) TK_35= 'fi' (TK_36= '\\n' | TK_37= ';' ) TK_38= 'fi' (TK_39= '\\n' | TK_40= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA41_return templateA41() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA41_return retval = new GrammarShellForMancoosiParser.templateA41_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_11=null;
        Token ANDGen=null;
        Token TK_12=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_13=null;
        Token PATHSUIDGen=null;
        Token RSBRACKGen_1=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token MINUSGen_1=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        Token TK_23=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen_2=null;
        Token TK_24=null;
        Token RSBRACKGen_2=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token TK_28=null;
        Token TK_29=null;
        Token COLONGen=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        Token TK_35=null;
        Token TK_36=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        List list_input_variableGen=null;
        List list_packGen=null;
        List list_fileGen=null;
        List list_ownerGen=null;
        List list_groupGen=null;
        List list_permsGen=null;
        List list_fileGen_1=null;
        List list_ownerGen_1=null;
        List list_groupGen_1=null;
        List list_fileGen_2=null;
        List list_permsGen_1=null;
        List list_fileGen_3=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope packGen = null;
        RuleReturnScope fileGen = null;
        RuleReturnScope ownerGen = null;
        RuleReturnScope groupGen = null;
        RuleReturnScope permsGen = null;
        RuleReturnScope fileGen_1 = null;
        RuleReturnScope ownerGen_1 = null;
        RuleReturnScope groupGen_1 = null;
        RuleReturnScope fileGen_2 = null;
        RuleReturnScope permsGen_1 = null;
        RuleReturnScope fileGen_3 = null;
        try {
            // GrammarShellForMancoosi.g:9023:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? TK_9= 'which' TK_10= 'suidregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_11= '\\n' )? ANDGen= AND (TK_12= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_13= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_14= '\\n' | TK_15= ';' ) TK_16= 'then' (TK_17= '\\n' )? TK_18= 'suidregister' MINUSGen_1= MINUS TK_19= 's' packGen+= pack fileGen+= file ownerGen+= owner groupGen+= group permsGen+= perms (TK_20= '\\n' | TK_21= ';' ) TK_22= 'elif' (TK_23= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_24= 'e' fileGen_1+= file RSBRACKGen_2= RSBRACK (TK_25= ';' | TK_26= '\\n' ) TK_27= 'then' (TK_28= '\\n' )? TK_29= 'chown' ownerGen_1+= owner COLONGen= COLON groupGen_1+= group fileGen_2+= file (TK_30= '\\n' | TK_31= ';' ) TK_32= 'chmod' permsGen_1+= perms fileGen_3+= file (TK_33= '\\n' | TK_34= ';' ) TK_35= 'fi' (TK_36= '\\n' | TK_37= ';' ) TK_38= 'fi' (TK_39= '\\n' | TK_40= ';' ) )
            // GrammarShellForMancoosi.g:9023:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' (TK_8= '\\n' )? TK_9= 'which' TK_10= 'suidregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER (TK_11= '\\n' )? ANDGen= AND (TK_12= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_13= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_14= '\\n' | TK_15= ';' ) TK_16= 'then' (TK_17= '\\n' )? TK_18= 'suidregister' MINUSGen_1= MINUS TK_19= 's' packGen+= pack fileGen+= file ownerGen+= owner groupGen+= group permsGen+= perms (TK_20= '\\n' | TK_21= ';' ) TK_22= 'elif' (TK_23= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen_2= MINUS TK_24= 'e' fileGen_1+= file RSBRACKGen_2= RSBRACK (TK_25= ';' | TK_26= '\\n' ) TK_27= 'then' (TK_28= '\\n' )? TK_29= 'chown' ownerGen_1+= owner COLONGen= COLON groupGen_1+= group fileGen_2+= file (TK_30= '\\n' | TK_31= ';' ) TK_32= 'chmod' permsGen_1+= perms fileGen_3+= file (TK_33= '\\n' | TK_34= ';' ) TK_35= 'fi' (TK_36= '\\n' | TK_37= ';' ) TK_38= 'fi' (TK_39= '\\n' | TK_40= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA419556); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:14: (TK_1= '\\n' )?
            int alt362=2;
            int LA362_0 = input.LA(1);

            if ( (LA362_0==78) ) {
                alt362=1;
            }
            switch (alt362) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA419562); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA419569); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:58: (DQUOTEGen= DQUOTE )?
            int alt363=2;
            int LA363_0 = input.LA(1);

            if ( (LA363_0==DQUOTE) ) {
                alt363=1;
            }
            switch (alt363) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA419574); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA419580);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:9023:114: (DQUOTEGen_1= DQUOTE )?
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==DQUOTE) ) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA419585); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA419591); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:147: (DQUOTEGen_2= DQUOTE )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==DQUOTE) ) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA419596); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA419602); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:186: (DQUOTEGen_3= DQUOTE )?
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==DQUOTE) ) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA419607); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA419613); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:215: (TK_3= '\\n' | TK_4= ';' )
            int alt367=2;
            int LA367_0 = input.LA(1);

            if ( (LA367_0==78) ) {
                alt367=1;
            }
            else if ( (LA367_0==83) ) {
                alt367=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);

                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA419619); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9023:230: TK_4= ';'
                    {
                    TK_4=(Token)match(input,83,FOLLOW_83_in_templateA419626); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA419632); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:253: (TK_6= '\\n' )?
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( (LA368_0==78) ) {
                alt368=1;
            }
            switch (alt368) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:255: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA419638); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,79,FOLLOW_79_in_templateA419645); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:278: (TK_8= '\\n' )?
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==78) ) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:280: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA419651); if (state.failed) return retval;

                    }
                    break;

            }

            TK_9=(Token)match(input,81,FOLLOW_81_in_templateA419658); if (state.failed) return retval;
            TK_10=(Token)match(input,158,FOLLOW_158_in_templateA419663); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA419668); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA419673); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA419678); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA419683); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA419688); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:426: (TK_11= '\\n' )?
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==78) ) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:428: TK_11= '\\n'
                    {
                    TK_11=(Token)match(input,78,FOLLOW_78_in_templateA419694); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA419701); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:453: (TK_12= '\\n' )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==78) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:455: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA419707); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA419714); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA419719); if (state.failed) return retval;
            TK_13=(Token)match(input,132,FOLLOW_132_in_templateA419724); if (state.failed) return retval;
            PATHSUIDGen=(Token)match(input,PATHSUID,FOLLOW_PATHSUID_in_templateA419729); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA419734); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9023:561: (TK_14= '\\n' | TK_15= ';' )
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( (LA372_0==78) ) {
                alt372=1;
            }
            else if ( (LA372_0==83) ) {
                alt372=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);

                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    // GrammarShellForMancoosi.g:9023:563: TK_14= '\\n'
                    {
                    TK_14=(Token)match(input,78,FOLLOW_78_in_templateA419740); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9023:577: TK_15= ';'
                    {
                    TK_15=(Token)match(input,83,FOLLOW_83_in_templateA419747); if (state.failed) return retval;

                    }
                    break;

            }

            TK_16=(Token)match(input,84,FOLLOW_84_in_templateA419755); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9024:16: (TK_17= '\\n' )?
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==78) ) {
                alt373=1;
            }
            switch (alt373) {
                case 1 :
                    // GrammarShellForMancoosi.g:9024:18: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA419761); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,158,FOLLOW_158_in_templateA419768); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA419773); if (state.failed) return retval;
            TK_19=(Token)match(input,159,FOLLOW_159_in_templateA419778); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_in_templateA419783);
            packGen=pack();

            state._fsp--;
            if (state.failed) return retval;
            if (list_packGen==null) list_packGen=new ArrayList();
            list_packGen.add(packGen);

            pushFollow(FOLLOW_file_in_templateA419788);
            fileGen=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen==null) list_fileGen=new ArrayList();
            list_fileGen.add(fileGen);

            pushFollow(FOLLOW_owner_in_templateA419793);
            ownerGen=owner();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ownerGen==null) list_ownerGen=new ArrayList();
            list_ownerGen.add(ownerGen);

            pushFollow(FOLLOW_group_in_templateA419798);
            groupGen=group();

            state._fsp--;
            if (state.failed) return retval;
            if (list_groupGen==null) list_groupGen=new ArrayList();
            list_groupGen.add(groupGen);

            pushFollow(FOLLOW_perms_in_templateA419803);
            permsGen=perms();

            state._fsp--;
            if (state.failed) return retval;
            if (list_permsGen==null) list_permsGen=new ArrayList();
            list_permsGen.add(permsGen);

            // GrammarShellForMancoosi.g:9024:163: (TK_20= '\\n' | TK_21= ';' )
            int alt374=2;
            int LA374_0 = input.LA(1);

            if ( (LA374_0==78) ) {
                alt374=1;
            }
            else if ( (LA374_0==83) ) {
                alt374=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);

                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    // GrammarShellForMancoosi.g:9024:165: TK_20= '\\n'
                    {
                    TK_20=(Token)match(input,78,FOLLOW_78_in_templateA419809); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9024:179: TK_21= ';'
                    {
                    TK_21=(Token)match(input,83,FOLLOW_83_in_templateA419816); if (state.failed) return retval;

                    }
                    break;

            }

            TK_22=(Token)match(input,160,FOLLOW_160_in_templateA419824); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9025:16: (TK_23= '\\n' )?
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==78) ) {
                alt375=1;
            }
            switch (alt375) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:18: TK_23= '\\n'
                    {
                    TK_23=(Token)match(input,78,FOLLOW_78_in_templateA419830); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA419837); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA419842); if (state.failed) return retval;
            TK_24=(Token)match(input,132,FOLLOW_132_in_templateA419847); if (state.failed) return retval;
            pushFollow(FOLLOW_file_in_templateA419852);
            fileGen_1=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen_1==null) list_fileGen_1=new ArrayList();
            list_fileGen_1.add(fileGen_1);

            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA419857); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9025:121: (TK_25= ';' | TK_26= '\\n' )
            int alt376=2;
            int LA376_0 = input.LA(1);

            if ( (LA376_0==83) ) {
                alt376=1;
            }
            else if ( (LA376_0==78) ) {
                alt376=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);

                throw nvae;
            }
            switch (alt376) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:123: TK_25= ';'
                    {
                    TK_25=(Token)match(input,83,FOLLOW_83_in_templateA419863); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9025:135: TK_26= '\\n'
                    {
                    TK_26=(Token)match(input,78,FOLLOW_78_in_templateA419869); if (state.failed) return retval;

                    }
                    break;

            }

            TK_27=(Token)match(input,84,FOLLOW_84_in_templateA419875); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9025:161: (TK_28= '\\n' )?
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==78) ) {
                alt377=1;
            }
            switch (alt377) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:163: TK_28= '\\n'
                    {
                    TK_28=(Token)match(input,78,FOLLOW_78_in_templateA419881); if (state.failed) return retval;

                    }
                    break;

            }

            TK_29=(Token)match(input,161,FOLLOW_161_in_templateA419888); if (state.failed) return retval;
            pushFollow(FOLLOW_owner_in_templateA419893);
            ownerGen_1=owner();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ownerGen_1==null) list_ownerGen_1=new ArrayList();
            list_ownerGen_1.add(ownerGen_1);

            COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_templateA419898); if (state.failed) return retval;
            pushFollow(FOLLOW_group_in_templateA419903);
            groupGen_1=group();

            state._fsp--;
            if (state.failed) return retval;
            if (list_groupGen_1==null) list_groupGen_1=new ArrayList();
            list_groupGen_1.add(groupGen_1);

            pushFollow(FOLLOW_file_in_templateA419908);
            fileGen_2=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen_2==null) list_fileGen_2=new ArrayList();
            list_fileGen_2.add(fileGen_2);

            // GrammarShellForMancoosi.g:9025:262: (TK_30= '\\n' | TK_31= ';' )
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==78) ) {
                alt378=1;
            }
            else if ( (LA378_0==83) ) {
                alt378=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);

                throw nvae;
            }
            switch (alt378) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:264: TK_30= '\\n'
                    {
                    TK_30=(Token)match(input,78,FOLLOW_78_in_templateA419914); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9025:278: TK_31= ';'
                    {
                    TK_31=(Token)match(input,83,FOLLOW_83_in_templateA419921); if (state.failed) return retval;

                    }
                    break;

            }

            TK_32=(Token)match(input,128,FOLLOW_128_in_templateA419927); if (state.failed) return retval;
            pushFollow(FOLLOW_perms_in_templateA419932);
            permsGen_1=perms();

            state._fsp--;
            if (state.failed) return retval;
            if (list_permsGen_1==null) list_permsGen_1=new ArrayList();
            list_permsGen_1.add(permsGen_1);

            pushFollow(FOLLOW_file_in_templateA419937);
            fileGen_3=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen_3==null) list_fileGen_3=new ArrayList();
            list_fileGen_3.add(fileGen_3);

            // GrammarShellForMancoosi.g:9025:340: (TK_33= '\\n' | TK_34= ';' )
            int alt379=2;
            int LA379_0 = input.LA(1);

            if ( (LA379_0==78) ) {
                alt379=1;
            }
            else if ( (LA379_0==83) ) {
                alt379=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 379, 0, input);

                throw nvae;
            }
            switch (alt379) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:342: TK_33= '\\n'
                    {
                    TK_33=(Token)match(input,78,FOLLOW_78_in_templateA419943); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9025:356: TK_34= ';'
                    {
                    TK_34=(Token)match(input,83,FOLLOW_83_in_templateA419950); if (state.failed) return retval;

                    }
                    break;

            }

            TK_35=(Token)match(input,86,FOLLOW_86_in_templateA419956); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9025:379: (TK_36= '\\n' | TK_37= ';' )
            int alt380=2;
            int LA380_0 = input.LA(1);

            if ( (LA380_0==78) ) {
                alt380=1;
            }
            else if ( (LA380_0==83) ) {
                alt380=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 380, 0, input);

                throw nvae;
            }
            switch (alt380) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:381: TK_36= '\\n'
                    {
                    TK_36=(Token)match(input,78,FOLLOW_78_in_templateA419962); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9025:395: TK_37= ';'
                    {
                    TK_37=(Token)match(input,83,FOLLOW_83_in_templateA419969); if (state.failed) return retval;

                    }
                    break;

            }

            TK_38=(Token)match(input,86,FOLLOW_86_in_templateA419975); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9025:418: (TK_39= '\\n' | TK_40= ';' )
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==78) ) {
                alt381=1;
            }
            else if ( (LA381_0==83) ) {
                alt381=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 381, 0, input);

                throw nvae;
            }
            switch (alt381) {
                case 1 :
                    // GrammarShellForMancoosi.g:9025:420: TK_39= '\\n'
                    {
                    TK_39=(Token)match(input,78,FOLLOW_78_in_templateA419981); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9025:434: TK_40= ';'
                    {
                    TK_40=(Token)match(input,83,FOLLOW_83_in_templateA419988); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA41ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA41ReturnNode.setKind("templateA41");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA41ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA41ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA41ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA41ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA41ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA41ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA41ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA41ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA41ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA41ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA41ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA41ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA41ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA41ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA41ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHSUIDGen != null) {
              			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", (PATHSUIDGen!=null?PATHSUIDGen.getText():null), PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
              			templateA41ReturnNode.getChildren().add(PATHSUIDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA41ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA41ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_packGen != null) {
              	        for(Iterator it = list_packGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_return r = (GrammarShellForMancoosiParser.pack_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_fileGen != null) {
              	        for(Iterator it = list_fileGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_ownerGen != null) {
              	        for(Iterator it = list_ownerGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.owner_return r = (GrammarShellForMancoosiParser.owner_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("owner");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_groupGen != null) {
              	        for(Iterator it = list_groupGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.group_return r = (GrammarShellForMancoosiParser.group_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("group");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_permsGen != null) {
              	        for(Iterator it = list_permsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.perms_return r = (GrammarShellForMancoosiParser.perms_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("perms");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA41ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA41ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_fileGen_1 != null) {
              	        for(Iterator it = list_fileGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA41ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_ownerGen_1 != null) {
              	        for(Iterator it = list_ownerGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.owner_return r = (GrammarShellForMancoosiParser.owner_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("owner");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(COLONGen != null) {
              			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", (COLONGen!=null?COLONGen.getText():null), COLONGen.getCharPositionInLine(), COLONGen.getLine());
              			templateA41ReturnNode.getChildren().add(COLONGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_groupGen_1 != null) {
              	        for(Iterator it = list_groupGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.group_return r = (GrammarShellForMancoosiParser.group_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("group");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_fileGen_2 != null) {
              	        for(Iterator it = list_fileGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_permsGen_1 != null) {
              	        for(Iterator it = list_permsGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.perms_return r = (GrammarShellForMancoosiParser.perms_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("perms");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_fileGen_3 != null) {
              	        for(Iterator it = list_fileGen_3.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA41ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA41ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA41ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA41"

    public static class templateA42_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA42"
    // GrammarShellForMancoosi.g:9470:1: templateA42 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_6= '\\n' )? ANDGen_1= AND (TK_7= '\\n' )? TK_8= 'which' TK_9= 'suidunregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'suidunregister' MINUSGen_1= MINUS TK_14= 's' packGen+= pack fileGen+= file (TK_15= '\\n' | TK_16= ';' ) TK_17= 'fi' (TK_18= '\\n' | TK_19= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA42_return templateA42() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA42_return retval = new GrammarShellForMancoosiParser.templateA42_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token PATHSUIDGen=null;
        Token RSBRACKGen_1=null;
        Token TK_6=null;
        Token ANDGen_1=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token MINUSGen_1=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        List list_input_variableGen=null;
        List list_packGen=null;
        List list_fileGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope packGen = null;
        RuleReturnScope fileGen = null;
        try {
            // GrammarShellForMancoosi.g:9471:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_6= '\\n' )? ANDGen_1= AND (TK_7= '\\n' )? TK_8= 'which' TK_9= 'suidunregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'suidunregister' MINUSGen_1= MINUS TK_14= 's' packGen+= pack fileGen+= file (TK_15= '\\n' | TK_16= ';' ) TK_17= 'fi' (TK_18= '\\n' | TK_19= ';' ) )
            // GrammarShellForMancoosi.g:9471:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHSUIDGen= PATHSUID RSBRACKGen_1= RSBRACK (TK_6= '\\n' )? ANDGen_1= AND (TK_7= '\\n' )? TK_8= 'which' TK_9= 'suidunregister' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_10= ';' TK_11= 'then' (TK_12= '\\n' )? TK_13= 'suidunregister' MINUSGen_1= MINUS TK_14= 's' packGen+= pack fileGen+= file (TK_15= '\\n' | TK_16= ';' ) TK_17= 'fi' (TK_18= '\\n' | TK_19= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4210011); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:14: (TK_1= '\\n' )?
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==78) ) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4210017); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4210024); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:58: (DQUOTEGen= DQUOTE )?
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==DQUOTE) ) {
                alt383=1;
            }
            switch (alt383) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4210029); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4210035);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:9471:114: (DQUOTEGen_1= DQUOTE )?
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==DQUOTE) ) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4210040); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4210046); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:147: (DQUOTEGen_2= DQUOTE )?
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==DQUOTE) ) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4210051); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA4210057); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:183: (DQUOTEGen_3= DQUOTE )?
            int alt386=2;
            int LA386_0 = input.LA(1);

            if ( (LA386_0==DQUOTE) ) {
                alt386=1;
            }
            switch (alt386) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4210062); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4210068); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:212: (TK_3= '\\n' )?
            int alt387=2;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==78) ) {
                alt387=1;
            }
            switch (alt387) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA4210074); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA4210081); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:238: (TK_4= '\\n' )?
            int alt388=2;
            int LA388_0 = input.LA(1);

            if ( (LA388_0==78) ) {
                alt388=1;
            }
            switch (alt388) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:240: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA4210087); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4210094); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4210099); if (state.failed) return retval;
            TK_5=(Token)match(input,132,FOLLOW_132_in_templateA4210104); if (state.failed) return retval;
            PATHSUIDGen=(Token)match(input,PATHSUID,FOLLOW_PATHSUID_in_templateA4210109); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4210114); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:344: (TK_6= '\\n' )?
            int alt389=2;
            int LA389_0 = input.LA(1);

            if ( (LA389_0==78) ) {
                alt389=1;
            }
            switch (alt389) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:346: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4210120); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen_1=(Token)match(input,AND,FOLLOW_AND_in_templateA4210127); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:372: (TK_7= '\\n' )?
            int alt390=2;
            int LA390_0 = input.LA(1);

            if ( (LA390_0==78) ) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:374: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA4210133); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,81,FOLLOW_81_in_templateA4210140); if (state.failed) return retval;
            TK_9=(Token)match(input,162,FOLLOW_162_in_templateA4210145); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA4210150); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA4210155); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA4210160); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA4210165); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA4210170); if (state.failed) return retval;
            TK_10=(Token)match(input,83,FOLLOW_83_in_templateA4210175); if (state.failed) return retval;
            TK_11=(Token)match(input,84,FOLLOW_84_in_templateA4210180); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:546: (TK_12= '\\n' )?
            int alt391=2;
            int LA391_0 = input.LA(1);

            if ( (LA391_0==78) ) {
                alt391=1;
            }
            switch (alt391) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:548: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA4210186); if (state.failed) return retval;

                    }
                    break;

            }

            TK_13=(Token)match(input,162,FOLLOW_162_in_templateA4210193); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4210198); if (state.failed) return retval;
            TK_14=(Token)match(input,159,FOLLOW_159_in_templateA4210203); if (state.failed) return retval;
            pushFollow(FOLLOW_pack_in_templateA4210208);
            packGen=pack();

            state._fsp--;
            if (state.failed) return retval;
            if (list_packGen==null) list_packGen=new ArrayList();
            list_packGen.add(packGen);

            pushFollow(FOLLOW_file_in_templateA4210213);
            fileGen=file();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fileGen==null) list_fileGen=new ArrayList();
            list_fileGen.add(fileGen);

            // GrammarShellForMancoosi.g:9471:644: (TK_15= '\\n' | TK_16= ';' )
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==78) ) {
                alt392=1;
            }
            else if ( (LA392_0==83) ) {
                alt392=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 392, 0, input);

                throw nvae;
            }
            switch (alt392) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:646: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA4210219); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9471:660: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA4210226); if (state.failed) return retval;

                    }
                    break;

            }

            TK_17=(Token)match(input,86,FOLLOW_86_in_templateA4210232); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9471:683: (TK_18= '\\n' | TK_19= ';' )
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==78) ) {
                alt393=1;
            }
            else if ( (LA393_0==83) ) {
                alt393=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 393, 0, input);

                throw nvae;
            }
            switch (alt393) {
                case 1 :
                    // GrammarShellForMancoosi.g:9471:685: TK_18= '\\n'
                    {
                    TK_18=(Token)match(input,78,FOLLOW_78_in_templateA4210238); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9471:699: TK_19= ';'
                    {
                    TK_19=(Token)match(input,83,FOLLOW_83_in_templateA4210245); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA42ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA42ReturnNode.setKind("templateA42");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA42ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA42ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA42ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA42ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA42ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA42ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA42ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA42ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA42ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHSUIDGen != null) {
              			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", (PATHSUIDGen!=null?PATHSUIDGen.getText():null), PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
              			templateA42ReturnNode.getChildren().add(PATHSUIDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen_1 != null) {
              			Leaf ANDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen_1!=null?ANDGen_1.getText():null), ANDGen_1.getCharPositionInLine(), ANDGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(ANDGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA42ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA42ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA42ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA42ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA42ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_packGen != null) {
              	        for(Iterator it = list_packGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pack_return r = (GrammarShellForMancoosiParser.pack_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pack");
              	            	templateA42ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_fileGen != null) {
              	        for(Iterator it = list_fileGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.file_return r = (GrammarShellForMancoosiParser.file_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("file");
              	            	templateA42ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA42ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA42ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA42"

    public static class templateA43_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA43"
    // GrammarShellForMancoosi.g:9706:1: templateA43 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'install' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'if' (TK_9= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen= MINUS TK_10= 'e' DQUOTEGen_8= DQUOTE oldGen+= old DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'if' (TK_15= '\\n' )? LSBRACKGen_3= LSBRACK DQUOTEGen_10= DQUOTE APGen= AP TK_16= 'md5sum' BSLASHGen= BSLASH DQUOTEGen_11= DQUOTE oldGen_1+= old BSLASHGen_1= BSLASH DQUOTEGen_12= DQUOTE VBARGen= VBAR TK_17= 'sed' MINUSGen_1= MINUS TK_18= 'e' BSLASHGen_2= BSLASH DQUOTEGen_13= DQUOTE PATHSSGen= PATHSS DOTGen= DOT TK_19= '*' SLASHGen= SLASH SLASHGen_1= SLASH BSLASHGen_3= BSLASH DQUOTEGen_14= DQUOTE APGen_1= AP DQUOTEGen_15= DQUOTE EQUGen_2= EQU DQUOTEGen_16= DQUOTE APGen_2= AP TK_20= 'dpkg-query' MINUSGen_2= MINUS TK_21= 'W' MINUSGen_3= MINUS TK_22= 'f' EQUGen_3= EQU PSINGLEGen= PSINGLE TK_23= '$' LGRAFGen= LGRAF TK_24= 'Conffiles' RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE oldGen_2+= old VBARGen_1= VBAR TK_25= 'sed' MINUSGen_4= MINUS TK_26= 'n' MINUSGen_5= MINUS TK_27= 'e' BSLASHGen_4= BSLASH DQUOTEGen_17= DQUOTE BSLASHGen_5= BSLASH BSLASHGen_6= BSLASH BSLASHGen_7= BSLASH BSLASHGen_8= BSLASH PSINGLEGen_2= PSINGLE oldGen_3+= old PSINGLEGen_3= PSINGLE PATHSSGen_1= PATHSS DOTGen_1= DOT TK_28= '*' SLASHGen_2= SLASH PATHPGen= PATHP BSLASHGen_9= BSLASH DQUOTEGen_18= DQUOTE APGen_3= AP DQUOTEGen_19= DQUOTE RSBRACKGen_3= RSBRACK (TK_29= '\\n' )? TK_30= 'then' (TK_31= '\\n' )? TK_32= 'rm' MINUSGen_6= MINUS TK_33= 'f' DQUOTEGen_20= DQUOTE oldGen_4+= old DQUOTEGen_21= DQUOTE (TK_34= '\\n' | TK_35= ';' ) TK_36= 'fi' (TK_37= '\\n' | TK_38= ';' ) TK_39= 'fi' (TK_40= '\\n' | TK_41= ';' ) TK_42= 'if' (TK_43= '\\n' )? LSBRACKGen_4= LSBRACK MINUSGen_7= MINUS TK_44= 'L' DQUOTEGen_22= DQUOTE rule_placeholderGen+= rule_placeholder DQUOTEGen_23= DQUOTE RSBRACKGen_4= RSBRACK TK_45= ';' TK_46= 'then' (TK_47= '\\n' )? TK_48= 'rm' MINUSGen_8= MINUS TK_49= 'f' DQUOTEGen_24= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= '\\n' | TK_57= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA43_return templateA43() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA43_return retval = new GrammarShellForMancoosiParser.templateA43_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token ORGen=null;
        Token TK_3=null;
        Token LSBRACKGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_6=null;
        Token TK_4=null;
        Token DQUOTEGen_7=null;
        Token RSBRACKGen_1=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen=null;
        Token TK_10=null;
        Token DQUOTEGen_8=null;
        Token DQUOTEGen_9=null;
        Token RSBRACKGen_2=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token LSBRACKGen_3=null;
        Token DQUOTEGen_10=null;
        Token APGen=null;
        Token TK_16=null;
        Token BSLASHGen=null;
        Token DQUOTEGen_11=null;
        Token BSLASHGen_1=null;
        Token DQUOTEGen_12=null;
        Token VBARGen=null;
        Token TK_17=null;
        Token MINUSGen_1=null;
        Token TK_18=null;
        Token BSLASHGen_2=null;
        Token DQUOTEGen_13=null;
        Token PATHSSGen=null;
        Token DOTGen=null;
        Token TK_19=null;
        Token SLASHGen=null;
        Token SLASHGen_1=null;
        Token BSLASHGen_3=null;
        Token DQUOTEGen_14=null;
        Token APGen_1=null;
        Token DQUOTEGen_15=null;
        Token EQUGen_2=null;
        Token DQUOTEGen_16=null;
        Token APGen_2=null;
        Token TK_20=null;
        Token MINUSGen_2=null;
        Token TK_21=null;
        Token MINUSGen_3=null;
        Token TK_22=null;
        Token EQUGen_3=null;
        Token PSINGLEGen=null;
        Token TK_23=null;
        Token LGRAFGen=null;
        Token TK_24=null;
        Token RGRAFGen=null;
        Token PSINGLEGen_1=null;
        Token VBARGen_1=null;
        Token TK_25=null;
        Token MINUSGen_4=null;
        Token TK_26=null;
        Token MINUSGen_5=null;
        Token TK_27=null;
        Token BSLASHGen_4=null;
        Token DQUOTEGen_17=null;
        Token BSLASHGen_5=null;
        Token BSLASHGen_6=null;
        Token BSLASHGen_7=null;
        Token BSLASHGen_8=null;
        Token PSINGLEGen_2=null;
        Token PSINGLEGen_3=null;
        Token PATHSSGen_1=null;
        Token DOTGen_1=null;
        Token TK_28=null;
        Token SLASHGen_2=null;
        Token PATHPGen=null;
        Token BSLASHGen_9=null;
        Token DQUOTEGen_18=null;
        Token APGen_3=null;
        Token DQUOTEGen_19=null;
        Token RSBRACKGen_3=null;
        Token TK_29=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token MINUSGen_6=null;
        Token TK_33=null;
        Token DQUOTEGen_20=null;
        Token DQUOTEGen_21=null;
        Token TK_34=null;
        Token TK_35=null;
        Token TK_36=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        Token TK_41=null;
        Token TK_42=null;
        Token TK_43=null;
        Token LSBRACKGen_4=null;
        Token MINUSGen_7=null;
        Token TK_44=null;
        Token DQUOTEGen_22=null;
        Token DQUOTEGen_23=null;
        Token RSBRACKGen_4=null;
        Token TK_45=null;
        Token TK_46=null;
        Token TK_47=null;
        Token TK_48=null;
        Token MINUSGen_8=null;
        Token TK_49=null;
        Token DQUOTEGen_24=null;
        Token DQUOTEGen_25=null;
        Token TK_50=null;
        Token TK_51=null;
        Token TK_52=null;
        Token TK_53=null;
        Token TK_54=null;
        Token TK_55=null;
        Token TK_56=null;
        Token TK_57=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_oldGen=null;
        List list_oldGen_1=null;
        List list_oldGen_2=null;
        List list_oldGen_3=null;
        List list_oldGen_4=null;
        List list_rule_placeholderGen=null;
        List list_rule_placeholderGen_1=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope oldGen = null;
        RuleReturnScope oldGen_1 = null;
        RuleReturnScope oldGen_2 = null;
        RuleReturnScope oldGen_3 = null;
        RuleReturnScope oldGen_4 = null;
        RuleReturnScope rule_placeholderGen = null;
        RuleReturnScope rule_placeholderGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:9707:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'install' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'if' (TK_9= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen= MINUS TK_10= 'e' DQUOTEGen_8= DQUOTE oldGen+= old DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'if' (TK_15= '\\n' )? LSBRACKGen_3= LSBRACK DQUOTEGen_10= DQUOTE APGen= AP TK_16= 'md5sum' BSLASHGen= BSLASH DQUOTEGen_11= DQUOTE oldGen_1+= old BSLASHGen_1= BSLASH DQUOTEGen_12= DQUOTE VBARGen= VBAR TK_17= 'sed' MINUSGen_1= MINUS TK_18= 'e' BSLASHGen_2= BSLASH DQUOTEGen_13= DQUOTE PATHSSGen= PATHSS DOTGen= DOT TK_19= '*' SLASHGen= SLASH SLASHGen_1= SLASH BSLASHGen_3= BSLASH DQUOTEGen_14= DQUOTE APGen_1= AP DQUOTEGen_15= DQUOTE EQUGen_2= EQU DQUOTEGen_16= DQUOTE APGen_2= AP TK_20= 'dpkg-query' MINUSGen_2= MINUS TK_21= 'W' MINUSGen_3= MINUS TK_22= 'f' EQUGen_3= EQU PSINGLEGen= PSINGLE TK_23= '$' LGRAFGen= LGRAF TK_24= 'Conffiles' RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE oldGen_2+= old VBARGen_1= VBAR TK_25= 'sed' MINUSGen_4= MINUS TK_26= 'n' MINUSGen_5= MINUS TK_27= 'e' BSLASHGen_4= BSLASH DQUOTEGen_17= DQUOTE BSLASHGen_5= BSLASH BSLASHGen_6= BSLASH BSLASHGen_7= BSLASH BSLASHGen_8= BSLASH PSINGLEGen_2= PSINGLE oldGen_3+= old PSINGLEGen_3= PSINGLE PATHSSGen_1= PATHSS DOTGen_1= DOT TK_28= '*' SLASHGen_2= SLASH PATHPGen= PATHP BSLASHGen_9= BSLASH DQUOTEGen_18= DQUOTE APGen_3= AP DQUOTEGen_19= DQUOTE RSBRACKGen_3= RSBRACK (TK_29= '\\n' )? TK_30= 'then' (TK_31= '\\n' )? TK_32= 'rm' MINUSGen_6= MINUS TK_33= 'f' DQUOTEGen_20= DQUOTE oldGen_4+= old DQUOTEGen_21= DQUOTE (TK_34= '\\n' | TK_35= ';' ) TK_36= 'fi' (TK_37= '\\n' | TK_38= ';' ) TK_39= 'fi' (TK_40= '\\n' | TK_41= ';' ) TK_42= 'if' (TK_43= '\\n' )? LSBRACKGen_4= LSBRACK MINUSGen_7= MINUS TK_44= 'L' DQUOTEGen_22= DQUOTE rule_placeholderGen+= rule_placeholder DQUOTEGen_23= DQUOTE RSBRACKGen_4= RSBRACK TK_45= ';' TK_46= 'then' (TK_47= '\\n' )? TK_48= 'rm' MINUSGen_8= MINUS TK_49= 'f' DQUOTEGen_24= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= '\\n' | TK_57= ';' ) )
            // GrammarShellForMancoosi.g:9707:3: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'install' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK ORGen= OR (TK_3= '\\n' )? LSBRACKGen_1= LSBRACK (DQUOTEGen_4= DQUOTE )? input_variableGen_1+= input_variable (DQUOTEGen_5= DQUOTE )? EQUGen_1= EQU (DQUOTEGen_6= DQUOTE )? TK_4= 'upgrade' (DQUOTEGen_7= DQUOTE )? RSBRACKGen_1= RSBRACK TK_5= ';' TK_6= 'then' (TK_7= '\\n' )? TK_8= 'if' (TK_9= '\\n' )? LSBRACKGen_2= LSBRACK MINUSGen= MINUS TK_10= 'e' DQUOTEGen_8= DQUOTE oldGen+= old DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK TK_11= ';' TK_12= 'then' (TK_13= '\\n' )? TK_14= 'if' (TK_15= '\\n' )? LSBRACKGen_3= LSBRACK DQUOTEGen_10= DQUOTE APGen= AP TK_16= 'md5sum' BSLASHGen= BSLASH DQUOTEGen_11= DQUOTE oldGen_1+= old BSLASHGen_1= BSLASH DQUOTEGen_12= DQUOTE VBARGen= VBAR TK_17= 'sed' MINUSGen_1= MINUS TK_18= 'e' BSLASHGen_2= BSLASH DQUOTEGen_13= DQUOTE PATHSSGen= PATHSS DOTGen= DOT TK_19= '*' SLASHGen= SLASH SLASHGen_1= SLASH BSLASHGen_3= BSLASH DQUOTEGen_14= DQUOTE APGen_1= AP DQUOTEGen_15= DQUOTE EQUGen_2= EQU DQUOTEGen_16= DQUOTE APGen_2= AP TK_20= 'dpkg-query' MINUSGen_2= MINUS TK_21= 'W' MINUSGen_3= MINUS TK_22= 'f' EQUGen_3= EQU PSINGLEGen= PSINGLE TK_23= '$' LGRAFGen= LGRAF TK_24= 'Conffiles' RGRAFGen= RGRAF PSINGLEGen_1= PSINGLE oldGen_2+= old VBARGen_1= VBAR TK_25= 'sed' MINUSGen_4= MINUS TK_26= 'n' MINUSGen_5= MINUS TK_27= 'e' BSLASHGen_4= BSLASH DQUOTEGen_17= DQUOTE BSLASHGen_5= BSLASH BSLASHGen_6= BSLASH BSLASHGen_7= BSLASH BSLASHGen_8= BSLASH PSINGLEGen_2= PSINGLE oldGen_3+= old PSINGLEGen_3= PSINGLE PATHSSGen_1= PATHSS DOTGen_1= DOT TK_28= '*' SLASHGen_2= SLASH PATHPGen= PATHP BSLASHGen_9= BSLASH DQUOTEGen_18= DQUOTE APGen_3= AP DQUOTEGen_19= DQUOTE RSBRACKGen_3= RSBRACK (TK_29= '\\n' )? TK_30= 'then' (TK_31= '\\n' )? TK_32= 'rm' MINUSGen_6= MINUS TK_33= 'f' DQUOTEGen_20= DQUOTE oldGen_4+= old DQUOTEGen_21= DQUOTE (TK_34= '\\n' | TK_35= ';' ) TK_36= 'fi' (TK_37= '\\n' | TK_38= ';' ) TK_39= 'fi' (TK_40= '\\n' | TK_41= ';' ) TK_42= 'if' (TK_43= '\\n' )? LSBRACKGen_4= LSBRACK MINUSGen_7= MINUS TK_44= 'L' DQUOTEGen_22= DQUOTE rule_placeholderGen+= rule_placeholder DQUOTEGen_23= DQUOTE RSBRACKGen_4= RSBRACK TK_45= ';' TK_46= 'then' (TK_47= '\\n' )? TK_48= 'rm' MINUSGen_8= MINUS TK_49= 'f' DQUOTEGen_24= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= '\\n' | TK_57= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4310267); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:13: (TK_1= '\\n' )?
            int alt394=2;
            int LA394_0 = input.LA(1);

            if ( (LA394_0==78) ) {
                alt394=1;
            }
            switch (alt394) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:15: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4310273); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4310280); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:57: (DQUOTEGen= DQUOTE )?
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==DQUOTE) ) {
                alt395=1;
            }
            switch (alt395) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310285); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4310291);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:9707:113: (DQUOTEGen_1= DQUOTE )?
            int alt396=2;
            int LA396_0 = input.LA(1);

            if ( (LA396_0==DQUOTE) ) {
                alt396=1;
            }
            switch (alt396) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310296); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4310302); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:146: (DQUOTEGen_2= DQUOTE )?
            int alt397=2;
            int LA397_0 = input.LA(1);

            if ( (LA397_0==DQUOTE) ) {
                alt397=1;
            }
            switch (alt397) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310307); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,163,FOLLOW_163_in_templateA4310313); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:183: (DQUOTEGen_3= DQUOTE )?
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==DQUOTE) ) {
                alt398=1;
            }
            switch (alt398) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310318); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4310324); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA4310329); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:222: (TK_3= '\\n' )?
            int alt399=2;
            int LA399_0 = input.LA(1);

            if ( (LA399_0==78) ) {
                alt399=1;
            }
            switch (alt399) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:224: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA4310335); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4310342); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:270: (DQUOTEGen_4= DQUOTE )?
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==DQUOTE) ) {
                alt400=1;
            }
            switch (alt400) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_4= DQUOTE
                    {
                    DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310347); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4310353);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            // GrammarShellForMancoosi.g:9707:328: (DQUOTEGen_5= DQUOTE )?
            int alt401=2;
            int LA401_0 = input.LA(1);

            if ( (LA401_0==DQUOTE) ) {
                alt401=1;
            }
            switch (alt401) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_5= DQUOTE
                    {
                    DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310358); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4310364); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:363: (DQUOTEGen_6= DQUOTE )?
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==DQUOTE) ) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_6= DQUOTE
                    {
                    DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310369); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,90,FOLLOW_90_in_templateA4310375); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:400: (DQUOTEGen_7= DQUOTE )?
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==DQUOTE) ) {
                alt403=1;
            }
            switch (alt403) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_7= DQUOTE
                    {
                    DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310380); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4310386); if (state.failed) return retval;
            TK_5=(Token)match(input,83,FOLLOW_83_in_templateA4310391); if (state.failed) return retval;
            TK_6=(Token)match(input,84,FOLLOW_84_in_templateA4310396); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:454: (TK_7= '\\n' )?
            int alt404=2;
            int LA404_0 = input.LA(1);

            if ( (LA404_0==78) ) {
                alt404=1;
            }
            switch (alt404) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:456: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA4310402); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,79,FOLLOW_79_in_templateA4310409); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:479: (TK_9= '\\n' )?
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==78) ) {
                alt405=1;
            }
            switch (alt405) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:481: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA4310415); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4310422); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310427); if (state.failed) return retval;
            TK_10=(Token)match(input,132,FOLLOW_132_in_templateA4310432); if (state.failed) return retval;
            DQUOTEGen_8=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310437); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4310442);
            oldGen=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen==null) list_oldGen=new ArrayList();
            list_oldGen.add(oldGen);

            DQUOTEGen_9=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310447); if (state.failed) return retval;
            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4310452); if (state.failed) return retval;
            TK_11=(Token)match(input,83,FOLLOW_83_in_templateA4310457); if (state.failed) return retval;
            TK_12=(Token)match(input,84,FOLLOW_84_in_templateA4310462); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:642: (TK_13= '\\n' )?
            int alt406=2;
            int LA406_0 = input.LA(1);

            if ( (LA406_0==78) ) {
                alt406=1;
            }
            switch (alt406) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:644: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA4310468); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,79,FOLLOW_79_in_templateA4310475); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9707:669: (TK_15= '\\n' )?
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==78) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    // GrammarShellForMancoosi.g:9707:671: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA4310481); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_3=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4310488); if (state.failed) return retval;
            DQUOTEGen_10=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310495); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA4310500); if (state.failed) return retval;
            TK_16=(Token)match(input,164,FOLLOW_164_in_templateA4310505); if (state.failed) return retval;
            BSLASHGen=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310511); if (state.failed) return retval;
            DQUOTEGen_11=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310516); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4310521);
            oldGen_1=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen_1==null) list_oldGen_1=new ArrayList();
            list_oldGen_1.add(oldGen_1);

            BSLASHGen_1=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310526); if (state.failed) return retval;
            DQUOTEGen_12=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310531); if (state.failed) return retval;
            VBARGen=(Token)match(input,VBAR,FOLLOW_VBAR_in_templateA4310536); if (state.failed) return retval;
            TK_17=(Token)match(input,165,FOLLOW_165_in_templateA4310541); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310546); if (state.failed) return retval;
            TK_18=(Token)match(input,132,FOLLOW_132_in_templateA4310551); if (state.failed) return retval;
            BSLASHGen_2=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310556); if (state.failed) return retval;
            DQUOTEGen_13=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310561); if (state.failed) return retval;
            PATHSSGen=(Token)match(input,PATHSS,FOLLOW_PATHSS_in_templateA4310566); if (state.failed) return retval;
            DOTGen=(Token)match(input,DOT,FOLLOW_DOT_in_templateA4310571); if (state.failed) return retval;
            TK_19=(Token)match(input,166,FOLLOW_166_in_templateA4310576); if (state.failed) return retval;
            SLASHGen=(Token)match(input,SLASH,FOLLOW_SLASH_in_templateA4310581); if (state.failed) return retval;
            SLASHGen_1=(Token)match(input,SLASH,FOLLOW_SLASH_in_templateA4310586); if (state.failed) return retval;
            BSLASHGen_3=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310591); if (state.failed) return retval;
            DQUOTEGen_14=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310596); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA4310601); if (state.failed) return retval;
            DQUOTEGen_15=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310606); if (state.failed) return retval;
            EQUGen_2=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4310611); if (state.failed) return retval;
            DQUOTEGen_16=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310616); if (state.failed) return retval;
            APGen_2=(Token)match(input,AP,FOLLOW_AP_in_templateA4310621); if (state.failed) return retval;
            TK_20=(Token)match(input,167,FOLLOW_167_in_templateA4310626); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310631); if (state.failed) return retval;
            TK_21=(Token)match(input,168,FOLLOW_168_in_templateA4310636); if (state.failed) return retval;
            MINUSGen_3=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310641); if (state.failed) return retval;
            TK_22=(Token)match(input,108,FOLLOW_108_in_templateA4310646); if (state.failed) return retval;
            EQUGen_3=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4310651); if (state.failed) return retval;
            PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA4310656); if (state.failed) return retval;
            TK_23=(Token)match(input,146,FOLLOW_146_in_templateA4310661); if (state.failed) return retval;
            LGRAFGen=(Token)match(input,LGRAF,FOLLOW_LGRAF_in_templateA4310666); if (state.failed) return retval;
            TK_24=(Token)match(input,169,FOLLOW_169_in_templateA4310671); if (state.failed) return retval;
            RGRAFGen=(Token)match(input,RGRAF,FOLLOW_RGRAF_in_templateA4310676); if (state.failed) return retval;
            PSINGLEGen_1=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA4310681); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4310686);
            oldGen_2=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen_2==null) list_oldGen_2=new ArrayList();
            list_oldGen_2.add(oldGen_2);

            VBARGen_1=(Token)match(input,VBAR,FOLLOW_VBAR_in_templateA4310691); if (state.failed) return retval;
            TK_25=(Token)match(input,165,FOLLOW_165_in_templateA4310696); if (state.failed) return retval;
            MINUSGen_4=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310701); if (state.failed) return retval;
            TK_26=(Token)match(input,117,FOLLOW_117_in_templateA4310706); if (state.failed) return retval;
            MINUSGen_5=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310711); if (state.failed) return retval;
            TK_27=(Token)match(input,132,FOLLOW_132_in_templateA4310716); if (state.failed) return retval;
            BSLASHGen_4=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310721); if (state.failed) return retval;
            DQUOTEGen_17=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310726); if (state.failed) return retval;
            BSLASHGen_5=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310733); if (state.failed) return retval;
            BSLASHGen_6=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310738); if (state.failed) return retval;
            BSLASHGen_7=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310743); if (state.failed) return retval;
            BSLASHGen_8=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310748); if (state.failed) return retval;
            PSINGLEGen_2=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA4310753); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4310758);
            oldGen_3=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen_3==null) list_oldGen_3=new ArrayList();
            list_oldGen_3.add(oldGen_3);

            PSINGLEGen_3=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_templateA4310763); if (state.failed) return retval;
            PATHSSGen_1=(Token)match(input,PATHSS,FOLLOW_PATHSS_in_templateA4310768); if (state.failed) return retval;
            DOTGen_1=(Token)match(input,DOT,FOLLOW_DOT_in_templateA4310773); if (state.failed) return retval;
            TK_28=(Token)match(input,166,FOLLOW_166_in_templateA4310778); if (state.failed) return retval;
            SLASHGen_2=(Token)match(input,SLASH,FOLLOW_SLASH_in_templateA4310783); if (state.failed) return retval;
            PATHPGen=(Token)match(input,PATHP,FOLLOW_PATHP_in_templateA4310788); if (state.failed) return retval;
            BSLASHGen_9=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_templateA4310793); if (state.failed) return retval;
            DQUOTEGen_18=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310798); if (state.failed) return retval;
            APGen_3=(Token)match(input,AP,FOLLOW_AP_in_templateA4310803); if (state.failed) return retval;
            DQUOTEGen_19=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310808); if (state.failed) return retval;
            RSBRACKGen_3=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4310813); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:317: (TK_29= '\\n' )?
            int alt408=2;
            int LA408_0 = input.LA(1);

            if ( (LA408_0==78) ) {
                alt408=1;
            }
            switch (alt408) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:319: TK_29= '\\n'
                    {
                    TK_29=(Token)match(input,78,FOLLOW_78_in_templateA4310819); if (state.failed) return retval;

                    }
                    break;

            }

            TK_30=(Token)match(input,84,FOLLOW_84_in_templateA4310826); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:346: (TK_31= '\\n' )?
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==78) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:348: TK_31= '\\n'
                    {
                    TK_31=(Token)match(input,78,FOLLOW_78_in_templateA4310832); if (state.failed) return retval;

                    }
                    break;

            }

            TK_32=(Token)match(input,107,FOLLOW_107_in_templateA4310839); if (state.failed) return retval;
            MINUSGen_6=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310844); if (state.failed) return retval;
            TK_33=(Token)match(input,108,FOLLOW_108_in_templateA4310849); if (state.failed) return retval;
            DQUOTEGen_20=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310854); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4310859);
            oldGen_4=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen_4==null) list_oldGen_4=new ArrayList();
            list_oldGen_4.add(oldGen_4);

            DQUOTEGen_21=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310864); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:459: (TK_34= '\\n' | TK_35= ';' )
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==78) ) {
                alt410=1;
            }
            else if ( (LA410_0==83) ) {
                alt410=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 410, 0, input);

                throw nvae;
            }
            switch (alt410) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:461: TK_34= '\\n'
                    {
                    TK_34=(Token)match(input,78,FOLLOW_78_in_templateA4310870); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9709:475: TK_35= ';'
                    {
                    TK_35=(Token)match(input,83,FOLLOW_83_in_templateA4310877); if (state.failed) return retval;

                    }
                    break;

            }

            TK_36=(Token)match(input,86,FOLLOW_86_in_templateA4310883); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:498: (TK_37= '\\n' | TK_38= ';' )
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==78) ) {
                alt411=1;
            }
            else if ( (LA411_0==83) ) {
                alt411=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);

                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:500: TK_37= '\\n'
                    {
                    TK_37=(Token)match(input,78,FOLLOW_78_in_templateA4310889); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9709:514: TK_38= ';'
                    {
                    TK_38=(Token)match(input,83,FOLLOW_83_in_templateA4310896); if (state.failed) return retval;

                    }
                    break;

            }

            TK_39=(Token)match(input,86,FOLLOW_86_in_templateA4310902); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:537: (TK_40= '\\n' | TK_41= ';' )
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==78) ) {
                alt412=1;
            }
            else if ( (LA412_0==83) ) {
                alt412=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);

                throw nvae;
            }
            switch (alt412) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:539: TK_40= '\\n'
                    {
                    TK_40=(Token)match(input,78,FOLLOW_78_in_templateA4310908); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9709:553: TK_41= ';'
                    {
                    TK_41=(Token)match(input,83,FOLLOW_83_in_templateA4310915); if (state.failed) return retval;

                    }
                    break;

            }

            TK_42=(Token)match(input,79,FOLLOW_79_in_templateA4310921); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9709:575: (TK_43= '\\n' )?
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==78) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    // GrammarShellForMancoosi.g:9709:577: TK_43= '\\n'
                    {
                    TK_43=(Token)match(input,78,FOLLOW_78_in_templateA4310926); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_4=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4310933); if (state.failed) return retval;
            MINUSGen_7=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310938); if (state.failed) return retval;
            TK_44=(Token)match(input,143,FOLLOW_143_in_templateA4310943); if (state.failed) return retval;
            DQUOTEGen_22=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310948); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4310953);
            rule_placeholderGen=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen==null) list_rule_placeholderGen=new ArrayList();
            list_rule_placeholderGen.add(rule_placeholderGen);

            DQUOTEGen_23=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4310958); if (state.failed) return retval;
            RSBRACKGen_4=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4310963); if (state.failed) return retval;
            TK_45=(Token)match(input,83,FOLLOW_83_in_templateA4310968); if (state.failed) return retval;
            TK_46=(Token)match(input,84,FOLLOW_84_in_templateA4310976); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9710:17: (TK_47= '\\n' )?
            int alt414=2;
            int LA414_0 = input.LA(1);

            if ( (LA414_0==78) ) {
                alt414=1;
            }
            switch (alt414) {
                case 1 :
                    // GrammarShellForMancoosi.g:9710:19: TK_47= '\\n'
                    {
                    TK_47=(Token)match(input,78,FOLLOW_78_in_templateA4310982); if (state.failed) return retval;

                    }
                    break;

            }

            TK_48=(Token)match(input,107,FOLLOW_107_in_templateA4310989); if (state.failed) return retval;
            MINUSGen_8=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4310994); if (state.failed) return retval;
            TK_49=(Token)match(input,108,FOLLOW_108_in_templateA4310999); if (state.failed) return retval;
            DQUOTEGen_24=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4311004); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4311009);
            rule_placeholderGen_1=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen_1==null) list_rule_placeholderGen_1=new ArrayList();
            list_rule_placeholderGen_1.add(rule_placeholderGen_1);

            DQUOTEGen_25=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4311014); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9710:156: (TK_50= '\\n' | TK_51= ';' )
            int alt415=2;
            int LA415_0 = input.LA(1);

            if ( (LA415_0==78) ) {
                alt415=1;
            }
            else if ( (LA415_0==83) ) {
                alt415=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);

                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    // GrammarShellForMancoosi.g:9710:158: TK_50= '\\n'
                    {
                    TK_50=(Token)match(input,78,FOLLOW_78_in_templateA4311020); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9710:172: TK_51= ';'
                    {
                    TK_51=(Token)match(input,83,FOLLOW_83_in_templateA4311027); if (state.failed) return retval;

                    }
                    break;

            }

            TK_52=(Token)match(input,86,FOLLOW_86_in_templateA4311033); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9710:195: (TK_53= '\\n' | TK_54= ';' )
            int alt416=2;
            int LA416_0 = input.LA(1);

            if ( (LA416_0==78) ) {
                alt416=1;
            }
            else if ( (LA416_0==83) ) {
                alt416=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    // GrammarShellForMancoosi.g:9710:197: TK_53= '\\n'
                    {
                    TK_53=(Token)match(input,78,FOLLOW_78_in_templateA4311039); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9710:211: TK_54= ';'
                    {
                    TK_54=(Token)match(input,83,FOLLOW_83_in_templateA4311046); if (state.failed) return retval;

                    }
                    break;

            }

            TK_55=(Token)match(input,86,FOLLOW_86_in_templateA4311052); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:9710:234: (TK_56= '\\n' | TK_57= ';' )
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==78) ) {
                alt417=1;
            }
            else if ( (LA417_0==83) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    // GrammarShellForMancoosi.g:9710:236: TK_56= '\\n'
                    {
                    TK_56=(Token)match(input,78,FOLLOW_78_in_templateA4311058); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:9710:250: TK_57= ';'
                    {
                    TK_57=(Token)match(input,83,FOLLOW_83_in_templateA4311065); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA43ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA43ReturnNode.setKind("templateA43");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA43ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA43ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA43ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA43ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_8 != null) {
              			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_8!=null?DQUOTEGen_8.getText():null), DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen != null) {
              	        for(Iterator it = list_oldGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_9 != null) {
              			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_9!=null?DQUOTEGen_9.getText():null), DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_3 != null) {
              			Leaf LSBRACKGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_3!=null?LSBRACKGen_3.getText():null), LSBRACKGen_3.getCharPositionInLine(), LSBRACKGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(LSBRACKGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_10 != null) {
              			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_10!=null?DQUOTEGen_10.getText():null), DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA43ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(BSLASHGen != null) {
              			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen!=null?BSLASHGen.getText():null), BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_11 != null) {
              			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_11!=null?DQUOTEGen_11.getText():null), DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen_1 != null) {
              	        for(Iterator it = list_oldGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(BSLASHGen_1 != null) {
              			Leaf BSLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_1!=null?BSLASHGen_1.getText():null), BSLASHGen_1.getCharPositionInLine(), BSLASHGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_12 != null) {
              			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_12!=null?DQUOTEGen_12.getText():null), DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
              		}
              	    // Create a CST Leaf
              		if(VBARGen != null) {
              			Leaf VBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", (VBARGen!=null?VBARGen.getText():null), VBARGen.getCharPositionInLine(), VBARGen.getLine());
              			templateA43ReturnNode.getChildren().add(VBARGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(BSLASHGen_2 != null) {
              			Leaf BSLASHGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_2!=null?BSLASHGen_2.getText():null), BSLASHGen_2.getCharPositionInLine(), BSLASHGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_13 != null) {
              			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_13!=null?DQUOTEGen_13.getText():null), DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHSSGen != null) {
              			Leaf PATHSSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", (PATHSSGen!=null?PATHSSGen.getText():null), PATHSSGen.getCharPositionInLine(), PATHSSGen.getLine());
              			templateA43ReturnNode.getChildren().add(PATHSSGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen!=null?DOTGen.getText():null), DOTGen.getCharPositionInLine(), DOTGen.getLine());
              			templateA43ReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(SLASHGen != null) {
              			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen!=null?SLASHGen.getText():null), SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
              			templateA43ReturnNode.getChildren().add(SLASHGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(SLASHGen_1 != null) {
              			Leaf SLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen_1!=null?SLASHGen_1.getText():null), SLASHGen_1.getCharPositionInLine(), SLASHGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(SLASHGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_3 != null) {
              			Leaf BSLASHGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_3!=null?BSLASHGen_3.getText():null), BSLASHGen_3.getCharPositionInLine(), BSLASHGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_14 != null) {
              			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_14!=null?DQUOTEGen_14.getText():null), DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_15 != null) {
              			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_15!=null?DQUOTEGen_15.getText():null), DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen_2 != null) {
              			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_2!=null?EQUGen_2.getText():null), EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(EQUGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_16 != null) {
              			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_16!=null?DQUOTEGen_16.getText():null), DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_2 != null) {
              			Leaf APGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_2!=null?APGen_2.getText():null), APGen_2.getCharPositionInLine(), APGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(APGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_3 != null) {
              			Leaf MINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_3!=null?MINUSGen_3.getText():null), MINUSGen_3.getCharPositionInLine(), MINUSGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_3Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_3 != null) {
              			Leaf EQUGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_3!=null?EQUGen_3.getText():null), EQUGen_3.getCharPositionInLine(), EQUGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(EQUGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(PSINGLEGen != null) {
              			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen!=null?PSINGLEGen.getText():null), PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
              			templateA43ReturnNode.getChildren().add(PSINGLEGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LGRAFGen != null) {
              			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", (LGRAFGen!=null?LGRAFGen.getText():null), LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
              			templateA43ReturnNode.getChildren().add(LGRAFGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RGRAFGen != null) {
              			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", (RGRAFGen!=null?RGRAFGen.getText():null), RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
              			templateA43ReturnNode.getChildren().add(RGRAFGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PSINGLEGen_1 != null) {
              			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen_1!=null?PSINGLEGen_1.getText():null), PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(PSINGLEGen_1Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen_2 != null) {
              	        for(Iterator it = list_oldGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(VBARGen_1 != null) {
              			Leaf VBARGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", (VBARGen_1!=null?VBARGen_1.getText():null), VBARGen_1.getCharPositionInLine(), VBARGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(VBARGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_4 != null) {
              			Leaf MINUSGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_4!=null?MINUSGen_4.getText():null), MINUSGen_4.getCharPositionInLine(), MINUSGen_4.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_4Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_5 != null) {
              			Leaf MINUSGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_5!=null?MINUSGen_5.getText():null), MINUSGen_5.getCharPositionInLine(), MINUSGen_5.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_5Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(BSLASHGen_4 != null) {
              			Leaf BSLASHGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_4!=null?BSLASHGen_4.getText():null), BSLASHGen_4.getCharPositionInLine(), BSLASHGen_4.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_17 != null) {
              			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_17!=null?DQUOTEGen_17.getText():null), DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_5 != null) {
              			Leaf BSLASHGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_5!=null?BSLASHGen_5.getText():null), BSLASHGen_5.getCharPositionInLine(), BSLASHGen_5.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_6 != null) {
              			Leaf BSLASHGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_6!=null?BSLASHGen_6.getText():null), BSLASHGen_6.getCharPositionInLine(), BSLASHGen_6.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_6Leaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_7 != null) {
              			Leaf BSLASHGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_7!=null?BSLASHGen_7.getText():null), BSLASHGen_7.getCharPositionInLine(), BSLASHGen_7.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_7Leaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_8 != null) {
              			Leaf BSLASHGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_8!=null?BSLASHGen_8.getText():null), BSLASHGen_8.getCharPositionInLine(), BSLASHGen_8.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_8Leaf);
              		}
              	    // Create a CST Leaf
              		if(PSINGLEGen_2 != null) {
              			Leaf PSINGLEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen_2!=null?PSINGLEGen_2.getText():null), PSINGLEGen_2.getCharPositionInLine(), PSINGLEGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(PSINGLEGen_2Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen_3 != null) {
              	        for(Iterator it = list_oldGen_3.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(PSINGLEGen_3 != null) {
              			Leaf PSINGLEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen_3!=null?PSINGLEGen_3.getText():null), PSINGLEGen_3.getCharPositionInLine(), PSINGLEGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(PSINGLEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHSSGen_1 != null) {
              			Leaf PATHSSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", (PATHSSGen_1!=null?PATHSSGen_1.getText():null), PATHSSGen_1.getCharPositionInLine(), PATHSSGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(PATHSSGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DOTGen_1 != null) {
              			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen_1!=null?DOTGen_1.getText():null), DOTGen_1.getCharPositionInLine(), DOTGen_1.getLine());
              			templateA43ReturnNode.getChildren().add(DOTGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(SLASHGen_2 != null) {
              			Leaf SLASHGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen_2!=null?SLASHGen_2.getText():null), SLASHGen_2.getCharPositionInLine(), SLASHGen_2.getLine());
              			templateA43ReturnNode.getChildren().add(SLASHGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(PATHPGen != null) {
              			Leaf PATHPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHP", (PATHPGen!=null?PATHPGen.getText():null), PATHPGen.getCharPositionInLine(), PATHPGen.getLine());
              			templateA43ReturnNode.getChildren().add(PATHPGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(BSLASHGen_9 != null) {
              			Leaf BSLASHGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen_9!=null?BSLASHGen_9.getText():null), BSLASHGen_9.getCharPositionInLine(), BSLASHGen_9.getLine());
              			templateA43ReturnNode.getChildren().add(BSLASHGen_9Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_18 != null) {
              			Leaf DQUOTEGen_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_18!=null?DQUOTEGen_18.getText():null), DQUOTEGen_18.getCharPositionInLine(), DQUOTEGen_18.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_18Leaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_3 != null) {
              			Leaf APGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_3!=null?APGen_3.getText():null), APGen_3.getCharPositionInLine(), APGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(APGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_19 != null) {
              			Leaf DQUOTEGen_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_19!=null?DQUOTEGen_19.getText():null), DQUOTEGen_19.getCharPositionInLine(), DQUOTEGen_19.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_19Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_3 != null) {
              			Leaf RSBRACKGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_3!=null?RSBRACKGen_3.getText():null), RSBRACKGen_3.getCharPositionInLine(), RSBRACKGen_3.getLine());
              			templateA43ReturnNode.getChildren().add(RSBRACKGen_3Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_6 != null) {
              			Leaf MINUSGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_6!=null?MINUSGen_6.getText():null), MINUSGen_6.getCharPositionInLine(), MINUSGen_6.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_20 != null) {
              			Leaf DQUOTEGen_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_20!=null?DQUOTEGen_20.getText():null), DQUOTEGen_20.getCharPositionInLine(), DQUOTEGen_20.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_20Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen_4 != null) {
              	        for(Iterator it = list_oldGen_4.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_21 != null) {
              			Leaf DQUOTEGen_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_21!=null?DQUOTEGen_21.getText():null), DQUOTEGen_21.getCharPositionInLine(), DQUOTEGen_21.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_21Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_41 != null) {
              			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_41!=null?TK_41.getText():null), TK_41.getCharPositionInLine(), TK_41.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_41Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_42 != null) {
              			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_42!=null?TK_42.getText():null), TK_42.getCharPositionInLine(), TK_42.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_42Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_43 != null) {
              			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_43!=null?TK_43.getText():null), TK_43.getCharPositionInLine(), TK_43.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_43Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_4 != null) {
              			Leaf LSBRACKGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_4!=null?LSBRACKGen_4.getText():null), LSBRACKGen_4.getCharPositionInLine(), LSBRACKGen_4.getLine());
              			templateA43ReturnNode.getChildren().add(LSBRACKGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_7 != null) {
              			Leaf MINUSGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_7!=null?MINUSGen_7.getText():null), MINUSGen_7.getCharPositionInLine(), MINUSGen_7.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_7Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_44 != null) {
              			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_44!=null?TK_44.getText():null), TK_44.getCharPositionInLine(), TK_44.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_44Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_22 != null) {
              			Leaf DQUOTEGen_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_22!=null?DQUOTEGen_22.getText():null), DQUOTEGen_22.getCharPositionInLine(), DQUOTEGen_22.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_22Leaf);
              		}
              	    // Create a CST Node
              		if(list_rule_placeholderGen != null) {
              	        for(Iterator it = list_rule_placeholderGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_23 != null) {
              			Leaf DQUOTEGen_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_23!=null?DQUOTEGen_23.getText():null), DQUOTEGen_23.getCharPositionInLine(), DQUOTEGen_23.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_23Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_4 != null) {
              			Leaf RSBRACKGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_4!=null?RSBRACKGen_4.getText():null), RSBRACKGen_4.getCharPositionInLine(), RSBRACKGen_4.getLine());
              			templateA43ReturnNode.getChildren().add(RSBRACKGen_4Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_45 != null) {
              			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_45!=null?TK_45.getText():null), TK_45.getCharPositionInLine(), TK_45.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_45Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_46 != null) {
              			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_46!=null?TK_46.getText():null), TK_46.getCharPositionInLine(), TK_46.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_46Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_47 != null) {
              			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_47!=null?TK_47.getText():null), TK_47.getCharPositionInLine(), TK_47.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_47Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_48 != null) {
              			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_48!=null?TK_48.getText():null), TK_48.getCharPositionInLine(), TK_48.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_48Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_8 != null) {
              			Leaf MINUSGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_8!=null?MINUSGen_8.getText():null), MINUSGen_8.getCharPositionInLine(), MINUSGen_8.getLine());
              			templateA43ReturnNode.getChildren().add(MINUSGen_8Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_49 != null) {
              			Leaf TK_49Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_49!=null?TK_49.getText():null), TK_49.getCharPositionInLine(), TK_49.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_49Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_24 != null) {
              			Leaf DQUOTEGen_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_24!=null?DQUOTEGen_24.getText():null), DQUOTEGen_24.getCharPositionInLine(), DQUOTEGen_24.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_24Leaf);
              		}
              	    // Create a CST Node
              		if(list_rule_placeholderGen_1 != null) {
              	        for(Iterator it = list_rule_placeholderGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA43ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_25 != null) {
              			Leaf DQUOTEGen_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_25!=null?DQUOTEGen_25.getText():null), DQUOTEGen_25.getCharPositionInLine(), DQUOTEGen_25.getLine());
              			templateA43ReturnNode.getChildren().add(DQUOTEGen_25Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_50 != null) {
              			Leaf TK_50Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_50!=null?TK_50.getText():null), TK_50.getCharPositionInLine(), TK_50.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_50Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_51 != null) {
              			Leaf TK_51Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_51!=null?TK_51.getText():null), TK_51.getCharPositionInLine(), TK_51.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_51Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_52 != null) {
              			Leaf TK_52Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_52!=null?TK_52.getText():null), TK_52.getCharPositionInLine(), TK_52.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_52Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_53 != null) {
              			Leaf TK_53Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_53!=null?TK_53.getText():null), TK_53.getCharPositionInLine(), TK_53.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_53Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_54 != null) {
              			Leaf TK_54Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_54!=null?TK_54.getText():null), TK_54.getCharPositionInLine(), TK_54.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_54Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_55 != null) {
              			Leaf TK_55Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_55!=null?TK_55.getText():null), TK_55.getCharPositionInLine(), TK_55.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_55Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_56 != null) {
              			Leaf TK_56Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_56!=null?TK_56.getText():null), TK_56.getCharPositionInLine(), TK_56.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_56Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_57 != null) {
              			Leaf TK_57Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_57!=null?TK_57.getText():null), TK_57.getCharPositionInLine(), TK_57.getLine());
              	 		templateA43ReturnNode.getChildren().add(TK_57Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA43ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA43"

    public static class templateA44_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA44"
    // GrammarShellForMancoosi.g:10501:1: templateA44 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' DQUOTEGen_4= DQUOTE oldGen+= old DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK (TK_9= ';' | TK_10= '\\n' ) TK_11= 'then' (TK_12= '\\n' )? TK_13= 'echo' DQUOTEGen_6= DQUOTE TK_14= 'Preserving' TK_15= 'user' TK_16= 'changes' TK_17= 'to' rule_placeholderGen+= rule_placeholder DOTGen= DOT DOTGen_1= DOT DOTGen_2= DOT DQUOTEGen_7= DQUOTE (TK_18= ';' | TK_19= '\\n' ) TK_20= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_21= 'e' DQUOTEGen_8= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK (TK_22= ';' | TK_23= '\\n' ) TK_24= 'then' (TK_25= '\\n' )? TK_26= 'mv' MINUSGen_2= MINUS TK_27= 'f' DQUOTEGen_10= DQUOTE rule_placeholderGen_2+= rule_placeholder DQUOTEGen_11= DQUOTE DQUOTEGen_12= DQUOTE wordGen+= word DQUOTEGen_13= DQUOTE (TK_28= '\\n' | TK_29= ';' ) TK_30= 'fi' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'mv' MINUSGen_3= MINUS TK_34= 'f' DQUOTEGen_14= DQUOTE oldGen_1+= old DQUOTEGen_15= DQUOTE DQUOTEGen_16= DQUOTE rule_placeholderGen_3+= rule_placeholder DQUOTEGen_17= DQUOTE (TK_35= '\\n' | TK_36= ';' ) TK_37= 'fi' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA44_return templateA44() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA44_return retval = new GrammarShellForMancoosiParser.templateA44_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_8=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token RSBRACKGen_1=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token DQUOTEGen_6=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token DOTGen=null;
        Token DOTGen_1=null;
        Token DOTGen_2=null;
        Token DQUOTEGen_7=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token LSBRACKGen_2=null;
        Token MINUSGen_1=null;
        Token TK_21=null;
        Token DQUOTEGen_8=null;
        Token DQUOTEGen_9=null;
        Token RSBRACKGen_2=null;
        Token TK_22=null;
        Token TK_23=null;
        Token TK_24=null;
        Token TK_25=null;
        Token TK_26=null;
        Token MINUSGen_2=null;
        Token TK_27=null;
        Token DQUOTEGen_10=null;
        Token DQUOTEGen_11=null;
        Token DQUOTEGen_12=null;
        Token DQUOTEGen_13=null;
        Token TK_28=null;
        Token TK_29=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token MINUSGen_3=null;
        Token TK_34=null;
        Token DQUOTEGen_14=null;
        Token DQUOTEGen_15=null;
        Token DQUOTEGen_16=null;
        Token DQUOTEGen_17=null;
        Token TK_35=null;
        Token TK_36=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        Token TK_41=null;
        Token TK_42=null;
        List list_input_variableGen=null;
        List list_oldGen=null;
        List list_rule_placeholderGen=null;
        List list_rule_placeholderGen_1=null;
        List list_rule_placeholderGen_2=null;
        List list_wordGen=null;
        List list_oldGen_1=null;
        List list_rule_placeholderGen_3=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope oldGen = null;
        RuleReturnScope rule_placeholderGen = null;
        RuleReturnScope rule_placeholderGen_1 = null;
        RuleReturnScope rule_placeholderGen_2 = null;
        RuleReturnScope wordGen = null;
        RuleReturnScope oldGen_1 = null;
        RuleReturnScope rule_placeholderGen_3 = null;
        try {
            // GrammarShellForMancoosi.g:10502:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' DQUOTEGen_4= DQUOTE oldGen+= old DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK (TK_9= ';' | TK_10= '\\n' ) TK_11= 'then' (TK_12= '\\n' )? TK_13= 'echo' DQUOTEGen_6= DQUOTE TK_14= 'Preserving' TK_15= 'user' TK_16= 'changes' TK_17= 'to' rule_placeholderGen+= rule_placeholder DOTGen= DOT DOTGen_1= DOT DOTGen_2= DOT DQUOTEGen_7= DQUOTE (TK_18= ';' | TK_19= '\\n' ) TK_20= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_21= 'e' DQUOTEGen_8= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK (TK_22= ';' | TK_23= '\\n' ) TK_24= 'then' (TK_25= '\\n' )? TK_26= 'mv' MINUSGen_2= MINUS TK_27= 'f' DQUOTEGen_10= DQUOTE rule_placeholderGen_2+= rule_placeholder DQUOTEGen_11= DQUOTE DQUOTEGen_12= DQUOTE wordGen+= word DQUOTEGen_13= DQUOTE (TK_28= '\\n' | TK_29= ';' ) TK_30= 'fi' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'mv' MINUSGen_3= MINUS TK_34= 'f' DQUOTEGen_14= DQUOTE oldGen_1+= old DQUOTEGen_15= DQUOTE DQUOTEGen_16= DQUOTE rule_placeholderGen_3+= rule_placeholder DQUOTEGen_17= DQUOTE (TK_35= '\\n' | TK_36= ';' ) TK_37= 'fi' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' ) )
            // GrammarShellForMancoosi.g:10502:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'if' LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_8= 'e' DQUOTEGen_4= DQUOTE oldGen+= old DQUOTEGen_5= DQUOTE RSBRACKGen_1= RSBRACK (TK_9= ';' | TK_10= '\\n' ) TK_11= 'then' (TK_12= '\\n' )? TK_13= 'echo' DQUOTEGen_6= DQUOTE TK_14= 'Preserving' TK_15= 'user' TK_16= 'changes' TK_17= 'to' rule_placeholderGen+= rule_placeholder DOTGen= DOT DOTGen_1= DOT DOTGen_2= DOT DQUOTEGen_7= DQUOTE (TK_18= ';' | TK_19= '\\n' ) TK_20= 'if' LSBRACKGen_2= LSBRACK MINUSGen_1= MINUS TK_21= 'e' DQUOTEGen_8= DQUOTE rule_placeholderGen_1+= rule_placeholder DQUOTEGen_9= DQUOTE RSBRACKGen_2= RSBRACK (TK_22= ';' | TK_23= '\\n' ) TK_24= 'then' (TK_25= '\\n' )? TK_26= 'mv' MINUSGen_2= MINUS TK_27= 'f' DQUOTEGen_10= DQUOTE rule_placeholderGen_2+= rule_placeholder DQUOTEGen_11= DQUOTE DQUOTEGen_12= DQUOTE wordGen+= word DQUOTEGen_13= DQUOTE (TK_28= '\\n' | TK_29= ';' ) TK_30= 'fi' (TK_31= '\\n' | TK_32= ';' ) TK_33= 'mv' MINUSGen_3= MINUS TK_34= 'f' DQUOTEGen_14= DQUOTE oldGen_1+= old DQUOTEGen_15= DQUOTE DQUOTEGen_16= DQUOTE rule_placeholderGen_3+= rule_placeholder DQUOTEGen_17= DQUOTE (TK_35= '\\n' | TK_36= ';' ) TK_37= 'fi' (TK_38= '\\n' | TK_39= ';' ) TK_40= 'fi' (TK_41= '\\n' | TK_42= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4411089); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:14: (TK_1= '\\n' )?
            int alt418=2;
            int LA418_0 = input.LA(1);

            if ( (LA418_0==78) ) {
                alt418=1;
            }
            switch (alt418) {
                case 1 :
                    // GrammarShellForMancoosi.g:10502:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4411095); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4411102); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:58: (DQUOTEGen= DQUOTE )?
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==DQUOTE) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411107); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4411113);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:10502:114: (DQUOTEGen_1= DQUOTE )?
            int alt420=2;
            int LA420_0 = input.LA(1);

            if ( (LA420_0==DQUOTE) ) {
                alt420=1;
            }
            switch (alt420) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411118); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4411124); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:147: (DQUOTEGen_2= DQUOTE )?
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==DQUOTE) ) {
                alt421=1;
            }
            switch (alt421) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411129); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA4411135); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:186: (DQUOTEGen_3= DQUOTE )?
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==DQUOTE) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411140); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4411146); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:215: (TK_3= ';' | TK_4= '\\n' )
            int alt423=2;
            int LA423_0 = input.LA(1);

            if ( (LA423_0==83) ) {
                alt423=1;
            }
            else if ( (LA423_0==78) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);

                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    // GrammarShellForMancoosi.g:10502:217: TK_3= ';'
                    {
                    TK_3=(Token)match(input,83,FOLLOW_83_in_templateA4411152); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10502:229: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA4411159); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA4411165); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:253: (TK_6= '\\n' )?
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==78) ) {
                alt424=1;
            }
            switch (alt424) {
                case 1 :
                    // GrammarShellForMancoosi.g:10502:255: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4411171); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,79,FOLLOW_79_in_templateA4411178); if (state.failed) return retval;
            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4411183); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4411188); if (state.failed) return retval;
            TK_8=(Token)match(input,132,FOLLOW_132_in_templateA4411193); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411198); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4411203);
            oldGen=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen==null) list_oldGen=new ArrayList();
            list_oldGen.add(oldGen);

            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411208); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4411214); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:402: (TK_9= ';' | TK_10= '\\n' )
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( (LA425_0==83) ) {
                alt425=1;
            }
            else if ( (LA425_0==78) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);

                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    // GrammarShellForMancoosi.g:10502:404: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA4411220); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10502:416: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA4411227); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,84,FOLLOW_84_in_templateA4411233); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10502:442: (TK_12= '\\n' )?
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==78) ) {
                alt426=1;
            }
            switch (alt426) {
                case 1 :
                    // GrammarShellForMancoosi.g:10502:444: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA4411239); if (state.failed) return retval;

                    }
                    break;

            }

            TK_13=(Token)match(input,170,FOLLOW_170_in_templateA4411246); if (state.failed) return retval;
            DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411251); if (state.failed) return retval;
            TK_14=(Token)match(input,171,FOLLOW_171_in_templateA4411257); if (state.failed) return retval;
            TK_15=(Token)match(input,172,FOLLOW_172_in_templateA4411262); if (state.failed) return retval;
            TK_16=(Token)match(input,173,FOLLOW_173_in_templateA4411267); if (state.failed) return retval;
            TK_17=(Token)match(input,174,FOLLOW_174_in_templateA4411272); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4411277);
            rule_placeholderGen=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen==null) list_rule_placeholderGen=new ArrayList();
            list_rule_placeholderGen.add(rule_placeholderGen);

            DOTGen=(Token)match(input,DOT,FOLLOW_DOT_in_templateA4411284); if (state.failed) return retval;
            DOTGen_1=(Token)match(input,DOT,FOLLOW_DOT_in_templateA4411289); if (state.failed) return retval;
            DOTGen_2=(Token)match(input,DOT,FOLLOW_DOT_in_templateA4411294); if (state.failed) return retval;
            DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411299); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:62: (TK_18= ';' | TK_19= '\\n' )
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==83) ) {
                alt427=1;
            }
            else if ( (LA427_0==78) ) {
                alt427=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);

                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:64: TK_18= ';'
                    {
                    TK_18=(Token)match(input,83,FOLLOW_83_in_templateA4411305); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:77: TK_19= '\\n'
                    {
                    TK_19=(Token)match(input,78,FOLLOW_78_in_templateA4411312); if (state.failed) return retval;

                    }
                    break;

            }

            TK_20=(Token)match(input,79,FOLLOW_79_in_templateA4411319); if (state.failed) return retval;
            LSBRACKGen_2=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4411324); if (state.failed) return retval;
            MINUSGen_1=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4411329); if (state.failed) return retval;
            TK_21=(Token)match(input,132,FOLLOW_132_in_templateA4411334); if (state.failed) return retval;
            DQUOTEGen_8=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411339); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4411344);
            rule_placeholderGen_1=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen_1==null) list_rule_placeholderGen_1=new ArrayList();
            list_rule_placeholderGen_1.add(rule_placeholderGen_1);

            DQUOTEGen_9=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411349); if (state.failed) return retval;
            RSBRACKGen_2=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4411355); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:257: (TK_22= ';' | TK_23= '\\n' )
            int alt428=2;
            int LA428_0 = input.LA(1);

            if ( (LA428_0==83) ) {
                alt428=1;
            }
            else if ( (LA428_0==78) ) {
                alt428=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);

                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:259: TK_22= ';'
                    {
                    TK_22=(Token)match(input,83,FOLLOW_83_in_templateA4411361); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:272: TK_23= '\\n'
                    {
                    TK_23=(Token)match(input,78,FOLLOW_78_in_templateA4411368); if (state.failed) return retval;

                    }
                    break;

            }

            TK_24=(Token)match(input,84,FOLLOW_84_in_templateA4411374); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:298: (TK_25= '\\n' )?
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==78) ) {
                alt429=1;
            }
            switch (alt429) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:300: TK_25= '\\n'
                    {
                    TK_25=(Token)match(input,78,FOLLOW_78_in_templateA4411380); if (state.failed) return retval;

                    }
                    break;

            }

            TK_26=(Token)match(input,175,FOLLOW_175_in_templateA4411387); if (state.failed) return retval;
            MINUSGen_2=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4411392); if (state.failed) return retval;
            TK_27=(Token)match(input,108,FOLLOW_108_in_templateA4411397); if (state.failed) return retval;
            DQUOTEGen_10=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411402); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4411407);
            rule_placeholderGen_2=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen_2==null) list_rule_placeholderGen_2=new ArrayList();
            list_rule_placeholderGen_2.add(rule_placeholderGen_2);

            DQUOTEGen_11=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411412); if (state.failed) return retval;
            DQUOTEGen_12=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411418); if (state.failed) return retval;
            pushFollow(FOLLOW_word_in_templateA4411423);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            DQUOTEGen_13=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411428); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:496: (TK_28= '\\n' | TK_29= ';' )
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( (LA430_0==78) ) {
                alt430=1;
            }
            else if ( (LA430_0==83) ) {
                alt430=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);

                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:498: TK_28= '\\n'
                    {
                    TK_28=(Token)match(input,78,FOLLOW_78_in_templateA4411435); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:512: TK_29= ';'
                    {
                    TK_29=(Token)match(input,83,FOLLOW_83_in_templateA4411442); if (state.failed) return retval;

                    }
                    break;

            }

            TK_30=(Token)match(input,86,FOLLOW_86_in_templateA4411448); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:535: (TK_31= '\\n' | TK_32= ';' )
            int alt431=2;
            int LA431_0 = input.LA(1);

            if ( (LA431_0==78) ) {
                alt431=1;
            }
            else if ( (LA431_0==83) ) {
                alt431=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);

                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:537: TK_31= '\\n'
                    {
                    TK_31=(Token)match(input,78,FOLLOW_78_in_templateA4411454); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:551: TK_32= ';'
                    {
                    TK_32=(Token)match(input,83,FOLLOW_83_in_templateA4411461); if (state.failed) return retval;

                    }
                    break;

            }

            TK_33=(Token)match(input,175,FOLLOW_175_in_templateA4411468); if (state.failed) return retval;
            MINUSGen_3=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4411473); if (state.failed) return retval;
            TK_34=(Token)match(input,108,FOLLOW_108_in_templateA4411478); if (state.failed) return retval;
            DQUOTEGen_14=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411483); if (state.failed) return retval;
            pushFollow(FOLLOW_old_in_templateA4411488);
            oldGen_1=old();

            state._fsp--;
            if (state.failed) return retval;
            if (list_oldGen_1==null) list_oldGen_1=new ArrayList();
            list_oldGen_1.add(oldGen_1);

            DQUOTEGen_15=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411493); if (state.failed) return retval;
            DQUOTEGen_16=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411499); if (state.failed) return retval;
            pushFollow(FOLLOW_rule_placeholder_in_templateA4411504);
            rule_placeholderGen_3=rule_placeholder();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rule_placeholderGen_3==null) list_rule_placeholderGen_3=new ArrayList();
            list_rule_placeholderGen_3.add(rule_placeholderGen_3);

            DQUOTEGen_17=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4411509); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:746: (TK_35= '\\n' | TK_36= ';' )
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==78) ) {
                alt432=1;
            }
            else if ( (LA432_0==83) ) {
                alt432=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);

                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:748: TK_35= '\\n'
                    {
                    TK_35=(Token)match(input,78,FOLLOW_78_in_templateA4411516); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:762: TK_36= ';'
                    {
                    TK_36=(Token)match(input,83,FOLLOW_83_in_templateA4411523); if (state.failed) return retval;

                    }
                    break;

            }

            TK_37=(Token)match(input,86,FOLLOW_86_in_templateA4411529); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:786: (TK_38= '\\n' | TK_39= ';' )
            int alt433=2;
            int LA433_0 = input.LA(1);

            if ( (LA433_0==78) ) {
                alt433=1;
            }
            else if ( (LA433_0==83) ) {
                alt433=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);

                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:788: TK_38= '\\n'
                    {
                    TK_38=(Token)match(input,78,FOLLOW_78_in_templateA4411536); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:802: TK_39= ';'
                    {
                    TK_39=(Token)match(input,83,FOLLOW_83_in_templateA4411543); if (state.failed) return retval;

                    }
                    break;

            }

            TK_40=(Token)match(input,86,FOLLOW_86_in_templateA4411549); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10503:825: (TK_41= '\\n' | TK_42= ';' )
            int alt434=2;
            int LA434_0 = input.LA(1);

            if ( (LA434_0==78) ) {
                alt434=1;
            }
            else if ( (LA434_0==83) ) {
                alt434=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);

                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    // GrammarShellForMancoosi.g:10503:827: TK_41= '\\n'
                    {
                    TK_41=(Token)match(input,78,FOLLOW_78_in_templateA4411555); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10503:841: TK_42= ';'
                    {
                    TK_42=(Token)match(input,83,FOLLOW_83_in_templateA4411562); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA44ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA44ReturnNode.setKind("templateA44");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA44ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA44ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA44ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA44ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA44ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen != null) {
              	        for(Iterator it = list_oldGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA44ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_rule_placeholderGen != null) {
              	        for(Iterator it = list_rule_placeholderGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen!=null?DOTGen.getText():null), DOTGen.getCharPositionInLine(), DOTGen.getLine());
              			templateA44ReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DOTGen_1 != null) {
              			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen_1!=null?DOTGen_1.getText():null), DOTGen_1.getCharPositionInLine(), DOTGen_1.getLine());
              			templateA44ReturnNode.getChildren().add(DOTGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DOTGen_2 != null) {
              			Leaf DOTGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen_2!=null?DOTGen_2.getText():null), DOTGen_2.getCharPositionInLine(), DOTGen_2.getLine());
              			templateA44ReturnNode.getChildren().add(DOTGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_2 != null) {
              			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_2!=null?LSBRACKGen_2.getText():null), LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
              			templateA44ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen_1 != null) {
              			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_1!=null?MINUSGen_1.getText():null), MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
              			templateA44ReturnNode.getChildren().add(MINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_8 != null) {
              			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_8!=null?DQUOTEGen_8.getText():null), DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
              		}
              	    // Create a CST Node
              		if(list_rule_placeholderGen_1 != null) {
              	        for(Iterator it = list_rule_placeholderGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_9 != null) {
              			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_9!=null?DQUOTEGen_9.getText():null), DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_2 != null) {
              			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_2!=null?RSBRACKGen_2.getText():null), RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
              			templateA44ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_2 != null) {
              			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_2!=null?MINUSGen_2.getText():null), MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
              			templateA44ReturnNode.getChildren().add(MINUSGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_10 != null) {
              			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_10!=null?DQUOTEGen_10.getText():null), DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
              		}
              	    // Create a CST Node
              		if(list_rule_placeholderGen_2 != null) {
              	        for(Iterator it = list_rule_placeholderGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_11 != null) {
              			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_11!=null?DQUOTEGen_11.getText():null), DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_12 != null) {
              			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_12!=null?DQUOTEGen_12.getText():null), DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
              		}
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_13 != null) {
              			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_13!=null?DQUOTEGen_13.getText():null), DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(MINUSGen_3 != null) {
              			Leaf MINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen_3!=null?MINUSGen_3.getText():null), MINUSGen_3.getCharPositionInLine(), MINUSGen_3.getLine());
              			templateA44ReturnNode.getChildren().add(MINUSGen_3Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_14 != null) {
              			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_14!=null?DQUOTEGen_14.getText():null), DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
              		}
              	    // Create a CST Node
              		if(list_oldGen_1 != null) {
              	        for(Iterator it = list_oldGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.old_return r = (GrammarShellForMancoosiParser.old_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("old");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_15 != null) {
              			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_15!=null?DQUOTEGen_15.getText():null), DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_16 != null) {
              			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_16!=null?DQUOTEGen_16.getText():null), DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
              		}
              	    // Create a CST Node
              		if(list_rule_placeholderGen_3 != null) {
              	        for(Iterator it = list_rule_placeholderGen_3.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.rule_placeholder_return r = (GrammarShellForMancoosiParser.rule_placeholder_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("rule_placeholder");
              	            	templateA44ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_17 != null) {
              			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_17!=null?DQUOTEGen_17.getText():null), DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
              			templateA44ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_41 != null) {
              			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_41!=null?TK_41.getText():null), TK_41.getCharPositionInLine(), TK_41.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_41Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_42 != null) {
              			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_42!=null?TK_42.getText():null), TK_42.getCharPositionInLine(), TK_42.getLine());
              	 		templateA44ReturnNode.getChildren().add(TK_42Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA44ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA44"

    public static class templateA45_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA45"
    // GrammarShellForMancoosi.g:10968:1: templateA45 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? LPARGen= LPAR (TK_7= '\\n' )? TK_8= 'while' TK_9= 'read' TK_10= 'line' (TK_11= ';' )? TK_12= 'do' (TK_13= '\\n' )? TK_14= 'set' DMINUSGen= DMINUS TK_15= '$line' (TK_16= ';' | TK_17= '\\n' ) TK_18= 'dir' EQUGen_1= EQU DQUOTEGen_4= DQUOTE input_variableGen_1+= input_variable DQUOTEGen_5= DQUOTE TK_19= ';' TK_20= 'mode' EQUGen_2= EQU DQUOTEGen_6= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_7= DQUOTE TK_21= ';' TK_22= 'user' EQUGen_3= EQU DQUOTEGen_8= DQUOTE input_variableGen_3+= input_variable DQUOTEGen_9= DQUOTE TK_23= ';' TK_24= 'group' EQUGen_4= EQU DQUOTEGen_10= DQUOTE input_variableGen_4+= input_variable DQUOTEGen_11= DQUOTE (TK_25= ';' | TK_26= '\\n' ) TK_27= 'if' LSBRACKGen_1= LSBRACK EXCLGen= EXCL MINUSGen= MINUS TK_28= 'e' DQUOTEGen_12= DQUOTE TK_29= '$dir' DQUOTEGen_13= DQUOTE RSBRACKGen_1= RSBRACK (TK_30= ';' | TK_31= '\\n' ) TK_32= 'then' (TK_33= '\\n' )? TK_34= 'if' TK_35= 'mkdir' DQUOTEGen_14= DQUOTE TK_36= '$dir' DQUOTEGen_15= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL (TK_37= ';' | TK_38= '\\n' ) TK_39= 'then' (TK_40= '\\n' )? TK_41= 'chown' DQUOTEGen_16= DQUOTE TK_42= '$user' DQUOTEGen_17= DQUOTE COLONGen= COLON DQUOTEGen_18= DQUOTE TK_43= '$group' DQUOTEGen_19= DQUOTE DQUOTEGen_20= DQUOTE TK_44= '$dir' DQUOTEGen_21= DQUOTE (TK_45= ';' | TK_46= '\\n' ) TK_47= 'chmod' DQUOTEGen_22= DQUOTE TK_48= '$mode' DQUOTEGen_23= DQUOTE DQUOTEGen_24= DQUOTE TK_49= '$dir' DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= ';' | TK_57= '\\n' ) TK_58= 'done' (TK_59= ';' | TK_60= '\\n' ) RPARGen= RPAR DLESSGen= DLESS TK_61= 'DATA' (TK_62= '\\n' | TK_63= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_64= ';' | TK_65= '\\n' ) )+ TK_66= 'DATA' (TK_67= '\\n' | TK_68= ';' ) TK_69= 'fi' (TK_70= '\\n' | TK_71= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA45_return templateA45() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA45_return retval = new GrammarShellForMancoosiParser.templateA45_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token LPARGen=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token DMINUSGen=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token EQUGen_1=null;
        Token DQUOTEGen_4=null;
        Token DQUOTEGen_5=null;
        Token TK_19=null;
        Token TK_20=null;
        Token EQUGen_2=null;
        Token DQUOTEGen_6=null;
        Token DQUOTEGen_7=null;
        Token TK_21=null;
        Token TK_22=null;
        Token EQUGen_3=null;
        Token DQUOTEGen_8=null;
        Token DQUOTEGen_9=null;
        Token TK_23=null;
        Token TK_24=null;
        Token EQUGen_4=null;
        Token DQUOTEGen_10=null;
        Token DQUOTEGen_11=null;
        Token TK_25=null;
        Token TK_26=null;
        Token TK_27=null;
        Token LSBRACKGen_1=null;
        Token EXCLGen=null;
        Token MINUSGen=null;
        Token TK_28=null;
        Token DQUOTEGen_12=null;
        Token TK_29=null;
        Token DQUOTEGen_13=null;
        Token RSBRACKGen_1=null;
        Token TK_30=null;
        Token TK_31=null;
        Token TK_32=null;
        Token TK_33=null;
        Token TK_34=null;
        Token TK_35=null;
        Token DQUOTEGen_14=null;
        Token TK_36=null;
        Token DQUOTEGen_15=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token TK_37=null;
        Token TK_38=null;
        Token TK_39=null;
        Token TK_40=null;
        Token TK_41=null;
        Token DQUOTEGen_16=null;
        Token TK_42=null;
        Token DQUOTEGen_17=null;
        Token COLONGen=null;
        Token DQUOTEGen_18=null;
        Token TK_43=null;
        Token DQUOTEGen_19=null;
        Token DQUOTEGen_20=null;
        Token TK_44=null;
        Token DQUOTEGen_21=null;
        Token TK_45=null;
        Token TK_46=null;
        Token TK_47=null;
        Token DQUOTEGen_22=null;
        Token TK_48=null;
        Token DQUOTEGen_23=null;
        Token DQUOTEGen_24=null;
        Token TK_49=null;
        Token DQUOTEGen_25=null;
        Token TK_50=null;
        Token TK_51=null;
        Token TK_52=null;
        Token TK_53=null;
        Token TK_54=null;
        Token TK_55=null;
        Token TK_56=null;
        Token TK_57=null;
        Token TK_58=null;
        Token TK_59=null;
        Token TK_60=null;
        Token RPARGen=null;
        Token DLESSGen=null;
        Token TK_61=null;
        Token TK_62=null;
        Token TK_63=null;
        Token TK_64=null;
        Token TK_65=null;
        Token TK_66=null;
        Token TK_67=null;
        Token TK_68=null;
        Token TK_69=null;
        Token TK_70=null;
        Token TK_71=null;
        List list_input_variableGen=null;
        List list_input_variableGen_1=null;
        List list_input_variableGen_2=null;
        List list_input_variableGen_3=null;
        List list_input_variableGen_4=null;
        List list_dirlistGen=null;
        List list_permsGen=null;
        List list_ownerGen=null;
        List list_groupGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope input_variableGen_1 = null;
        RuleReturnScope input_variableGen_2 = null;
        RuleReturnScope input_variableGen_3 = null;
        RuleReturnScope input_variableGen_4 = null;
        RuleReturnScope dirlistGen = null;
        RuleReturnScope permsGen = null;
        RuleReturnScope ownerGen = null;
        RuleReturnScope groupGen = null;
        try {
            // GrammarShellForMancoosi.g:10969:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? LPARGen= LPAR (TK_7= '\\n' )? TK_8= 'while' TK_9= 'read' TK_10= 'line' (TK_11= ';' )? TK_12= 'do' (TK_13= '\\n' )? TK_14= 'set' DMINUSGen= DMINUS TK_15= '$line' (TK_16= ';' | TK_17= '\\n' ) TK_18= 'dir' EQUGen_1= EQU DQUOTEGen_4= DQUOTE input_variableGen_1+= input_variable DQUOTEGen_5= DQUOTE TK_19= ';' TK_20= 'mode' EQUGen_2= EQU DQUOTEGen_6= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_7= DQUOTE TK_21= ';' TK_22= 'user' EQUGen_3= EQU DQUOTEGen_8= DQUOTE input_variableGen_3+= input_variable DQUOTEGen_9= DQUOTE TK_23= ';' TK_24= 'group' EQUGen_4= EQU DQUOTEGen_10= DQUOTE input_variableGen_4+= input_variable DQUOTEGen_11= DQUOTE (TK_25= ';' | TK_26= '\\n' ) TK_27= 'if' LSBRACKGen_1= LSBRACK EXCLGen= EXCL MINUSGen= MINUS TK_28= 'e' DQUOTEGen_12= DQUOTE TK_29= '$dir' DQUOTEGen_13= DQUOTE RSBRACKGen_1= RSBRACK (TK_30= ';' | TK_31= '\\n' ) TK_32= 'then' (TK_33= '\\n' )? TK_34= 'if' TK_35= 'mkdir' DQUOTEGen_14= DQUOTE TK_36= '$dir' DQUOTEGen_15= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL (TK_37= ';' | TK_38= '\\n' ) TK_39= 'then' (TK_40= '\\n' )? TK_41= 'chown' DQUOTEGen_16= DQUOTE TK_42= '$user' DQUOTEGen_17= DQUOTE COLONGen= COLON DQUOTEGen_18= DQUOTE TK_43= '$group' DQUOTEGen_19= DQUOTE DQUOTEGen_20= DQUOTE TK_44= '$dir' DQUOTEGen_21= DQUOTE (TK_45= ';' | TK_46= '\\n' ) TK_47= 'chmod' DQUOTEGen_22= DQUOTE TK_48= '$mode' DQUOTEGen_23= DQUOTE DQUOTEGen_24= DQUOTE TK_49= '$dir' DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= ';' | TK_57= '\\n' ) TK_58= 'done' (TK_59= ';' | TK_60= '\\n' ) RPARGen= RPAR DLESSGen= DLESS TK_61= 'DATA' (TK_62= '\\n' | TK_63= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_64= ';' | TK_65= '\\n' ) )+ TK_66= 'DATA' (TK_67= '\\n' | TK_68= ';' ) TK_69= 'fi' (TK_70= '\\n' | TK_71= ';' ) )
            // GrammarShellForMancoosi.g:10969:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= ';' | TK_4= '\\n' ) TK_5= 'then' (TK_6= '\\n' )? LPARGen= LPAR (TK_7= '\\n' )? TK_8= 'while' TK_9= 'read' TK_10= 'line' (TK_11= ';' )? TK_12= 'do' (TK_13= '\\n' )? TK_14= 'set' DMINUSGen= DMINUS TK_15= '$line' (TK_16= ';' | TK_17= '\\n' ) TK_18= 'dir' EQUGen_1= EQU DQUOTEGen_4= DQUOTE input_variableGen_1+= input_variable DQUOTEGen_5= DQUOTE TK_19= ';' TK_20= 'mode' EQUGen_2= EQU DQUOTEGen_6= DQUOTE input_variableGen_2+= input_variable DQUOTEGen_7= DQUOTE TK_21= ';' TK_22= 'user' EQUGen_3= EQU DQUOTEGen_8= DQUOTE input_variableGen_3+= input_variable DQUOTEGen_9= DQUOTE TK_23= ';' TK_24= 'group' EQUGen_4= EQU DQUOTEGen_10= DQUOTE input_variableGen_4+= input_variable DQUOTEGen_11= DQUOTE (TK_25= ';' | TK_26= '\\n' ) TK_27= 'if' LSBRACKGen_1= LSBRACK EXCLGen= EXCL MINUSGen= MINUS TK_28= 'e' DQUOTEGen_12= DQUOTE TK_29= '$dir' DQUOTEGen_13= DQUOTE RSBRACKGen_1= RSBRACK (TK_30= ';' | TK_31= '\\n' ) TK_32= 'then' (TK_33= '\\n' )? TK_34= 'if' TK_35= 'mkdir' DQUOTEGen_14= DQUOTE TK_36= '$dir' DQUOTEGen_15= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL (TK_37= ';' | TK_38= '\\n' ) TK_39= 'then' (TK_40= '\\n' )? TK_41= 'chown' DQUOTEGen_16= DQUOTE TK_42= '$user' DQUOTEGen_17= DQUOTE COLONGen= COLON DQUOTEGen_18= DQUOTE TK_43= '$group' DQUOTEGen_19= DQUOTE DQUOTEGen_20= DQUOTE TK_44= '$dir' DQUOTEGen_21= DQUOTE (TK_45= ';' | TK_46= '\\n' ) TK_47= 'chmod' DQUOTEGen_22= DQUOTE TK_48= '$mode' DQUOTEGen_23= DQUOTE DQUOTEGen_24= DQUOTE TK_49= '$dir' DQUOTEGen_25= DQUOTE (TK_50= '\\n' | TK_51= ';' ) TK_52= 'fi' (TK_53= '\\n' | TK_54= ';' ) TK_55= 'fi' (TK_56= ';' | TK_57= '\\n' ) TK_58= 'done' (TK_59= ';' | TK_60= '\\n' ) RPARGen= RPAR DLESSGen= DLESS TK_61= 'DATA' (TK_62= '\\n' | TK_63= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_64= ';' | TK_65= '\\n' ) )+ TK_66= 'DATA' (TK_67= '\\n' | TK_68= ';' ) TK_69= 'fi' (TK_70= '\\n' | TK_71= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4511585); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:14: (TK_1= '\\n' )?
            int alt435=2;
            int LA435_0 = input.LA(1);

            if ( (LA435_0==78) ) {
                alt435=1;
            }
            switch (alt435) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4511591); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4511598); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:58: (DQUOTEGen= DQUOTE )?
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==DQUOTE) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511603); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4511609);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:10969:114: (DQUOTEGen_1= DQUOTE )?
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( (LA437_0==DQUOTE) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511614); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4511620); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:147: (DQUOTEGen_2= DQUOTE )?
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==DQUOTE) ) {
                alt438=1;
            }
            switch (alt438) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511625); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA4511631); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:186: (DQUOTEGen_3= DQUOTE )?
            int alt439=2;
            int LA439_0 = input.LA(1);

            if ( (LA439_0==DQUOTE) ) {
                alt439=1;
            }
            switch (alt439) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511636); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4511642); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:215: (TK_3= ';' | TK_4= '\\n' )
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==83) ) {
                alt440=1;
            }
            else if ( (LA440_0==78) ) {
                alt440=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 440, 0, input);

                throw nvae;
            }
            switch (alt440) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:217: TK_3= ';'
                    {
                    TK_3=(Token)match(input,83,FOLLOW_83_in_templateA4511648); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10969:229: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA4511655); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA4511661); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:253: (TK_6= '\\n' )?
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( (LA441_0==78) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:255: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4511667); if (state.failed) return retval;

                    }
                    break;

            }

            LPARGen=(Token)match(input,LPAR,FOLLOW_LPAR_in_templateA4511674); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:282: (TK_7= '\\n' )?
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==78) ) {
                alt442=1;
            }
            switch (alt442) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:284: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA4511681); if (state.failed) return retval;

                    }
                    break;

            }

            TK_8=(Token)match(input,176,FOLLOW_176_in_templateA4511688); if (state.failed) return retval;
            TK_9=(Token)match(input,177,FOLLOW_177_in_templateA4511693); if (state.failed) return retval;
            TK_10=(Token)match(input,178,FOLLOW_178_in_templateA4511698); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:337: (TK_11= ';' )?
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==83) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:339: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA4511704); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,106,FOLLOW_106_in_templateA4511711); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:364: (TK_13= '\\n' )?
            int alt444=2;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==78) ) {
                alt444=1;
            }
            switch (alt444) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:366: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA4511718); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,179,FOLLOW_179_in_templateA4511725); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA4511730); if (state.failed) return retval;
            TK_15=(Token)match(input,180,FOLLOW_180_in_templateA4511735); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10969:426: (TK_16= ';' | TK_17= '\\n' )
            int alt445=2;
            int LA445_0 = input.LA(1);

            if ( (LA445_0==83) ) {
                alt445=1;
            }
            else if ( (LA445_0==78) ) {
                alt445=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 445, 0, input);

                throw nvae;
            }
            switch (alt445) {
                case 1 :
                    // GrammarShellForMancoosi.g:10969:428: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA4511742); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10969:441: TK_17= '\\n'
                    {
                    TK_17=(Token)match(input,78,FOLLOW_78_in_templateA4511749); if (state.failed) return retval;

                    }
                    break;

            }

            TK_18=(Token)match(input,181,FOLLOW_181_in_templateA4511755); if (state.failed) return retval;
            EQUGen_1=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4511760); if (state.failed) return retval;
            DQUOTEGen_4=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511765); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA4511770);
            input_variableGen_1=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_1==null) list_input_variableGen_1=new ArrayList();
            list_input_variableGen_1.add(input_variableGen_1);

            DQUOTEGen_5=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511775); if (state.failed) return retval;
            TK_19=(Token)match(input,83,FOLLOW_83_in_templateA4511780); if (state.failed) return retval;
            TK_20=(Token)match(input,182,FOLLOW_182_in_templateA4511785); if (state.failed) return retval;
            EQUGen_2=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4511790); if (state.failed) return retval;
            DQUOTEGen_6=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511795); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA4511800);
            input_variableGen_2=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_2==null) list_input_variableGen_2=new ArrayList();
            list_input_variableGen_2.add(input_variableGen_2);

            DQUOTEGen_7=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511805); if (state.failed) return retval;
            TK_21=(Token)match(input,83,FOLLOW_83_in_templateA4511810); if (state.failed) return retval;
            TK_22=(Token)match(input,172,FOLLOW_172_in_templateA4511815); if (state.failed) return retval;
            EQUGen_3=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4511820); if (state.failed) return retval;
            DQUOTEGen_8=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511825); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA4511830);
            input_variableGen_3=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_3==null) list_input_variableGen_3=new ArrayList();
            list_input_variableGen_3.add(input_variableGen_3);

            DQUOTEGen_9=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511835); if (state.failed) return retval;
            TK_23=(Token)match(input,83,FOLLOW_83_in_templateA4511840); if (state.failed) return retval;
            TK_24=(Token)match(input,183,FOLLOW_183_in_templateA4511845); if (state.failed) return retval;
            EQUGen_4=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4511850); if (state.failed) return retval;
            DQUOTEGen_10=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511855); if (state.failed) return retval;
            pushFollow(FOLLOW_input_variable_in_templateA4511862);
            input_variableGen_4=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen_4==null) list_input_variableGen_4=new ArrayList();
            list_input_variableGen_4.add(input_variableGen_4);

            DQUOTEGen_11=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511867); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10970:61: (TK_25= ';' | TK_26= '\\n' )
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==83) ) {
                alt446=1;
            }
            else if ( (LA446_0==78) ) {
                alt446=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 446, 0, input);

                throw nvae;
            }
            switch (alt446) {
                case 1 :
                    // GrammarShellForMancoosi.g:10970:63: TK_25= ';'
                    {
                    TK_25=(Token)match(input,83,FOLLOW_83_in_templateA4511874); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10970:76: TK_26= '\\n'
                    {
                    TK_26=(Token)match(input,78,FOLLOW_78_in_templateA4511881); if (state.failed) return retval;

                    }
                    break;

            }

            TK_27=(Token)match(input,79,FOLLOW_79_in_templateA4511889); if (state.failed) return retval;
            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4511894); if (state.failed) return retval;
            EXCLGen=(Token)match(input,EXCL,FOLLOW_EXCL_in_templateA4511899); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA4511904); if (state.failed) return retval;
            TK_28=(Token)match(input,132,FOLLOW_132_in_templateA4511909); if (state.failed) return retval;
            DQUOTEGen_12=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511914); if (state.failed) return retval;
            TK_29=(Token)match(input,184,FOLLOW_184_in_templateA4511919); if (state.failed) return retval;
            DQUOTEGen_13=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511924); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4511929); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:2: (TK_30= ';' | TK_31= '\\n' )
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( (LA447_0==83) ) {
                alt447=1;
            }
            else if ( (LA447_0==78) ) {
                alt447=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 0, input);

                throw nvae;
            }
            switch (alt447) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:4: TK_30= ';'
                    {
                    TK_30=(Token)match(input,83,FOLLOW_83_in_templateA4511938); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:17: TK_31= '\\n'
                    {
                    TK_31=(Token)match(input,78,FOLLOW_78_in_templateA4511945); if (state.failed) return retval;

                    }
                    break;

            }

            TK_32=(Token)match(input,84,FOLLOW_84_in_templateA4511951); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:44: (TK_33= '\\n' )?
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==78) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:46: TK_33= '\\n'
                    {
                    TK_33=(Token)match(input,78,FOLLOW_78_in_templateA4511958); if (state.failed) return retval;

                    }
                    break;

            }

            TK_34=(Token)match(input,79,FOLLOW_79_in_templateA4511965); if (state.failed) return retval;
            TK_35=(Token)match(input,185,FOLLOW_185_in_templateA4511970); if (state.failed) return retval;
            DQUOTEGen_14=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511975); if (state.failed) return retval;
            TK_36=(Token)match(input,184,FOLLOW_184_in_templateA4511980); if (state.failed) return retval;
            DQUOTEGen_15=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4511985); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA4511990); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA4511995); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA4512000); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:199: (TK_37= ';' | TK_38= '\\n' )
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==83) ) {
                alt449=1;
            }
            else if ( (LA449_0==78) ) {
                alt449=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 449, 0, input);

                throw nvae;
            }
            switch (alt449) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:201: TK_37= ';'
                    {
                    TK_37=(Token)match(input,83,FOLLOW_83_in_templateA4512007); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:214: TK_38= '\\n'
                    {
                    TK_38=(Token)match(input,78,FOLLOW_78_in_templateA4512014); if (state.failed) return retval;

                    }
                    break;

            }

            TK_39=(Token)match(input,84,FOLLOW_84_in_templateA4512020); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:240: (TK_40= '\\n' )?
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==78) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:242: TK_40= '\\n'
                    {
                    TK_40=(Token)match(input,78,FOLLOW_78_in_templateA4512026); if (state.failed) return retval;

                    }
                    break;

            }

            TK_41=(Token)match(input,161,FOLLOW_161_in_templateA4512033); if (state.failed) return retval;
            DQUOTEGen_16=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512038); if (state.failed) return retval;
            TK_42=(Token)match(input,186,FOLLOW_186_in_templateA4512043); if (state.failed) return retval;
            DQUOTEGen_17=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512048); if (state.failed) return retval;
            COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_templateA4512053); if (state.failed) return retval;
            DQUOTEGen_18=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512058); if (state.failed) return retval;
            TK_43=(Token)match(input,187,FOLLOW_187_in_templateA4512063); if (state.failed) return retval;
            DQUOTEGen_19=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512068); if (state.failed) return retval;
            DQUOTEGen_20=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512073); if (state.failed) return retval;
            TK_44=(Token)match(input,184,FOLLOW_184_in_templateA4512078); if (state.failed) return retval;
            DQUOTEGen_21=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512083); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:458: (TK_45= ';' | TK_46= '\\n' )
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( (LA451_0==83) ) {
                alt451=1;
            }
            else if ( (LA451_0==78) ) {
                alt451=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 451, 0, input);

                throw nvae;
            }
            switch (alt451) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:460: TK_45= ';'
                    {
                    TK_45=(Token)match(input,83,FOLLOW_83_in_templateA4512090); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:473: TK_46= '\\n'
                    {
                    TK_46=(Token)match(input,78,FOLLOW_78_in_templateA4512097); if (state.failed) return retval;

                    }
                    break;

            }

            TK_47=(Token)match(input,128,FOLLOW_128_in_templateA4512103); if (state.failed) return retval;
            DQUOTEGen_22=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512108); if (state.failed) return retval;
            TK_48=(Token)match(input,188,FOLLOW_188_in_templateA4512113); if (state.failed) return retval;
            DQUOTEGen_23=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512118); if (state.failed) return retval;
            DQUOTEGen_24=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512123); if (state.failed) return retval;
            TK_49=(Token)match(input,184,FOLLOW_184_in_templateA4512128); if (state.failed) return retval;
            DQUOTEGen_25=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4512133); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:613: (TK_50= '\\n' | TK_51= ';' )
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==78) ) {
                alt452=1;
            }
            else if ( (LA452_0==83) ) {
                alt452=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 452, 0, input);

                throw nvae;
            }
            switch (alt452) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:615: TK_50= '\\n'
                    {
                    TK_50=(Token)match(input,78,FOLLOW_78_in_templateA4512139); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:629: TK_51= ';'
                    {
                    TK_51=(Token)match(input,83,FOLLOW_83_in_templateA4512146); if (state.failed) return retval;

                    }
                    break;

            }

            TK_52=(Token)match(input,86,FOLLOW_86_in_templateA4512152); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:651: (TK_53= '\\n' | TK_54= ';' )
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==78) ) {
                alt453=1;
            }
            else if ( (LA453_0==83) ) {
                alt453=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 453, 0, input);

                throw nvae;
            }
            switch (alt453) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:653: TK_53= '\\n'
                    {
                    TK_53=(Token)match(input,78,FOLLOW_78_in_templateA4512157); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:667: TK_54= ';'
                    {
                    TK_54=(Token)match(input,83,FOLLOW_83_in_templateA4512164); if (state.failed) return retval;

                    }
                    break;

            }

            TK_55=(Token)match(input,86,FOLLOW_86_in_templateA4512170); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:691: (TK_56= ';' | TK_57= '\\n' )
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==83) ) {
                alt454=1;
            }
            else if ( (LA454_0==78) ) {
                alt454=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 454, 0, input);

                throw nvae;
            }
            switch (alt454) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:693: TK_56= ';'
                    {
                    TK_56=(Token)match(input,83,FOLLOW_83_in_templateA4512177); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:706: TK_57= '\\n'
                    {
                    TK_57=(Token)match(input,78,FOLLOW_78_in_templateA4512184); if (state.failed) return retval;

                    }
                    break;

            }

            TK_58=(Token)match(input,109,FOLLOW_109_in_templateA4512190); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10972:732: (TK_59= ';' | TK_60= '\\n' )
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( (LA455_0==83) ) {
                alt455=1;
            }
            else if ( (LA455_0==78) ) {
                alt455=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 455, 0, input);

                throw nvae;
            }
            switch (alt455) {
                case 1 :
                    // GrammarShellForMancoosi.g:10972:734: TK_59= ';'
                    {
                    TK_59=(Token)match(input,83,FOLLOW_83_in_templateA4512196); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10972:747: TK_60= '\\n'
                    {
                    TK_60=(Token)match(input,78,FOLLOW_78_in_templateA4512203); if (state.failed) return retval;

                    }
                    break;

            }

            RPARGen=(Token)match(input,RPAR,FOLLOW_RPAR_in_templateA4512209); if (state.failed) return retval;
            DLESSGen=(Token)match(input,DLESS,FOLLOW_DLESS_in_templateA4512214); if (state.failed) return retval;
            TK_61=(Token)match(input,189,FOLLOW_189_in_templateA4512221); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10973:16: (TK_62= '\\n' | TK_63= ';' )
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==78) ) {
                alt456=1;
            }
            else if ( (LA456_0==83) ) {
                alt456=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 456, 0, input);

                throw nvae;
            }
            switch (alt456) {
                case 1 :
                    // GrammarShellForMancoosi.g:10973:18: TK_62= '\\n'
                    {
                    TK_62=(Token)match(input,78,FOLLOW_78_in_templateA4512227); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10973:32: TK_63= ';'
                    {
                    TK_63=(Token)match(input,83,FOLLOW_83_in_templateA4512234); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:10973:44: (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_64= ';' | TK_65= '\\n' ) )+
            int cnt459=0;
            loop459:
            do {
                int alt459=2;
                int LA459_0 = input.LA(1);

                if ( (LA459_0==PATHNULL||(LA459_0>=PATHEMACSINST && LA459_0<=PATHEMACSREM)||(LA459_0>=PATHGCONFSCH && LA459_0<=PATHOLDSCHEMA)||LA459_0==PATHCOMPYTH||(LA459_0>=PATHMIME && LA459_0<=PATHSUID)||LA459_0==PATHSS||LA459_0==PATHP||(LA459_0>=PATHXWINDOW && LA459_0<=PATHSCRIPT)||(LA459_0>=PATHREL && LA459_0<=PATH)) ) {
                    alt459=1;
                }


                switch (alt459) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:10973:46: dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_64= ';' | TK_65= '\\n' )
            	    {
            	    pushFollow(FOLLOW_dirlist_in_templateA4512242);
            	    dirlistGen=dirlist();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirlistGen==null) list_dirlistGen=new ArrayList();
            	    list_dirlistGen.add(dirlistGen);

            	    // GrammarShellForMancoosi.g:10973:66: (permsGen+= perms ownerGen+= owner groupGen+= group )?
            	    int alt457=2;
            	    int LA457_0 = input.LA(1);

            	    if ( (LA457_0==NUMBER||LA457_0==ID||(LA457_0>=80 && LA457_0<=82)||LA457_0==85||(LA457_0>=87 && LA457_0<=93)||(LA457_0>=95 && LA457_0<=100)||LA457_0==103||(LA457_0>=107 && LA457_0<=108)||(LA457_0>=110 && LA457_0<=112)||(LA457_0>=114 && LA457_0<=119)||(LA457_0>=121 && LA457_0<=122)||(LA457_0>=124 && LA457_0<=126)||(LA457_0>=128 && LA457_0<=137)||LA457_0==139||(LA457_0>=142 && LA457_0<=144)||(LA457_0>=147 && LA457_0<=159)||(LA457_0>=161 && LA457_0<=175)||(LA457_0>=177 && LA457_0<=179)||(LA457_0>=181 && LA457_0<=183)||LA457_0==185||(LA457_0>=190 && LA457_0<=195)||(LA457_0>=201 && LA457_0<=207)) ) {
            	        alt457=1;
            	    }
            	    switch (alt457) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:10973:68: permsGen+= perms ownerGen+= owner groupGen+= group
            	            {
            	            pushFollow(FOLLOW_perms_in_templateA4512248);
            	            permsGen=perms();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_permsGen==null) list_permsGen=new ArrayList();
            	            list_permsGen.add(permsGen);

            	            pushFollow(FOLLOW_owner_in_templateA4512253);
            	            ownerGen=owner();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_ownerGen==null) list_ownerGen=new ArrayList();
            	            list_ownerGen.add(ownerGen);

            	            pushFollow(FOLLOW_group_in_templateA4512258);
            	            groupGen=group();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_groupGen==null) list_groupGen=new ArrayList();
            	            list_groupGen.add(groupGen);


            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:10973:120: (TK_64= ';' | TK_65= '\\n' )
            	    int alt458=2;
            	    int LA458_0 = input.LA(1);

            	    if ( (LA458_0==83) ) {
            	        alt458=1;
            	    }
            	    else if ( (LA458_0==78) ) {
            	        alt458=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 458, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt458) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:10973:122: TK_64= ';'
            	            {
            	            TK_64=(Token)match(input,83,FOLLOW_83_in_templateA4512266); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // GrammarShellForMancoosi.g:10973:135: TK_65= '\\n'
            	            {
            	            TK_65=(Token)match(input,78,FOLLOW_78_in_templateA4512273); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt459 >= 1 ) break loop459;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(459, input);
                        throw eee;
                }
                cnt459++;
            } while (true);

            TK_66=(Token)match(input,189,FOLLOW_189_in_templateA4512281); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10973:163: (TK_67= '\\n' | TK_68= ';' )
            int alt460=2;
            int LA460_0 = input.LA(1);

            if ( (LA460_0==78) ) {
                alt460=1;
            }
            else if ( (LA460_0==83) ) {
                alt460=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 460, 0, input);

                throw nvae;
            }
            switch (alt460) {
                case 1 :
                    // GrammarShellForMancoosi.g:10973:165: TK_67= '\\n'
                    {
                    TK_67=(Token)match(input,78,FOLLOW_78_in_templateA4512287); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10973:179: TK_68= ';'
                    {
                    TK_68=(Token)match(input,83,FOLLOW_83_in_templateA4512294); if (state.failed) return retval;

                    }
                    break;

            }

            TK_69=(Token)match(input,86,FOLLOW_86_in_templateA4512300); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:10973:202: (TK_70= '\\n' | TK_71= ';' )
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==78) ) {
                alt461=1;
            }
            else if ( (LA461_0==83) ) {
                alt461=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 461, 0, input);

                throw nvae;
            }
            switch (alt461) {
                case 1 :
                    // GrammarShellForMancoosi.g:10973:204: TK_70= '\\n'
                    {
                    TK_70=(Token)match(input,78,FOLLOW_78_in_templateA4512306); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:10973:218: TK_71= ';'
                    {
                    TK_71=(Token)match(input,83,FOLLOW_83_in_templateA4512313); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA45ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA45ReturnNode.setKind("templateA45");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA45ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA45ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA45ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA45ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LPARGen != null) {
              			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", (LPARGen!=null?LPARGen.getText():null), LPARGen.getCharPositionInLine(), LPARGen.getLine());
              			templateA45ReturnNode.getChildren().add(LPARGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA45ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_17Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_1 != null) {
              			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_1!=null?EQUGen_1.getText():null), EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
              			templateA45ReturnNode.getChildren().add(EQUGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_4 != null) {
              			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_4!=null?DQUOTEGen_4.getText():null), DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_1 != null) {
              	        for(Iterator it = list_input_variableGen_1.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA45ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_5 != null) {
              			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_5!=null?DQUOTEGen_5.getText():null), DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_2 != null) {
              			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_2!=null?EQUGen_2.getText():null), EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
              			templateA45ReturnNode.getChildren().add(EQUGen_2Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_6 != null) {
              			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_6!=null?DQUOTEGen_6.getText():null), DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_2 != null) {
              	        for(Iterator it = list_input_variableGen_2.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA45ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_7 != null) {
              			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_7!=null?DQUOTEGen_7.getText():null), DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_3 != null) {
              			Leaf EQUGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_3!=null?EQUGen_3.getText():null), EQUGen_3.getCharPositionInLine(), EQUGen_3.getLine());
              			templateA45ReturnNode.getChildren().add(EQUGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_8 != null) {
              			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_8!=null?DQUOTEGen_8.getText():null), DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_3 != null) {
              	        for(Iterator it = list_input_variableGen_3.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA45ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_9 != null) {
              			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_9!=null?DQUOTEGen_9.getText():null), DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_23 != null) {
              			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_23!=null?TK_23.getText():null), TK_23.getCharPositionInLine(), TK_23.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_23Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_24 != null) {
              			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_24!=null?TK_24.getText():null), TK_24.getCharPositionInLine(), TK_24.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_24Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(EQUGen_4 != null) {
              			Leaf EQUGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen_4!=null?EQUGen_4.getText():null), EQUGen_4.getCharPositionInLine(), EQUGen_4.getLine());
              			templateA45ReturnNode.getChildren().add(EQUGen_4Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_10 != null) {
              			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_10!=null?DQUOTEGen_10.getText():null), DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen_4 != null) {
              	        for(Iterator it = list_input_variableGen_4.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA45ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_11 != null) {
              			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_11!=null?DQUOTEGen_11.getText():null), DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_25 != null) {
              			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_25!=null?TK_25.getText():null), TK_25.getCharPositionInLine(), TK_25.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_25Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_26 != null) {
              			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_26!=null?TK_26.getText():null), TK_26.getCharPositionInLine(), TK_26.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_26Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_27 != null) {
              			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_27!=null?TK_27.getText():null), TK_27.getCharPositionInLine(), TK_27.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_27Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA45ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EXCLGen != null) {
              			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", (EXCLGen!=null?EXCLGen.getText():null), EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
              			templateA45ReturnNode.getChildren().add(EXCLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA45ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_28 != null) {
              			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_28!=null?TK_28.getText():null), TK_28.getCharPositionInLine(), TK_28.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_28Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_12 != null) {
              			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_12!=null?DQUOTEGen_12.getText():null), DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_29 != null) {
              			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_29!=null?TK_29.getText():null), TK_29.getCharPositionInLine(), TK_29.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_29Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_13 != null) {
              			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_13!=null?DQUOTEGen_13.getText():null), DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA45ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_30 != null) {
              			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_30!=null?TK_30.getText():null), TK_30.getCharPositionInLine(), TK_30.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_30Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_31 != null) {
              			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_31!=null?TK_31.getText():null), TK_31.getCharPositionInLine(), TK_31.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_31Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_32 != null) {
              			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_32!=null?TK_32.getText():null), TK_32.getCharPositionInLine(), TK_32.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_32Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_33 != null) {
              			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_33!=null?TK_33.getText():null), TK_33.getCharPositionInLine(), TK_33.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_33Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_34 != null) {
              			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_34!=null?TK_34.getText():null), TK_34.getCharPositionInLine(), TK_34.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_34Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_35 != null) {
              			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_35!=null?TK_35.getText():null), TK_35.getCharPositionInLine(), TK_35.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_35Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_14 != null) {
              			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_14!=null?DQUOTEGen_14.getText():null), DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_36 != null) {
              			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_36!=null?TK_36.getText():null), TK_36.getCharPositionInLine(), TK_36.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_36Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_15 != null) {
              			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_15!=null?DQUOTEGen_15.getText():null), DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA45ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA45ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA45ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_37 != null) {
              			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_37!=null?TK_37.getText():null), TK_37.getCharPositionInLine(), TK_37.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_37Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_38 != null) {
              			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_38!=null?TK_38.getText():null), TK_38.getCharPositionInLine(), TK_38.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_38Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_39 != null) {
              			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_39!=null?TK_39.getText():null), TK_39.getCharPositionInLine(), TK_39.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_39Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_40 != null) {
              			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_40!=null?TK_40.getText():null), TK_40.getCharPositionInLine(), TK_40.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_40Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_41 != null) {
              			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_41!=null?TK_41.getText():null), TK_41.getCharPositionInLine(), TK_41.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_41Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_16 != null) {
              			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_16!=null?DQUOTEGen_16.getText():null), DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_42 != null) {
              			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_42!=null?TK_42.getText():null), TK_42.getCharPositionInLine(), TK_42.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_42Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_17 != null) {
              			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_17!=null?DQUOTEGen_17.getText():null), DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
              		}
              	    // Create a CST Leaf
              		if(COLONGen != null) {
              			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", (COLONGen!=null?COLONGen.getText():null), COLONGen.getCharPositionInLine(), COLONGen.getLine());
              			templateA45ReturnNode.getChildren().add(COLONGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_18 != null) {
              			Leaf DQUOTEGen_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_18!=null?DQUOTEGen_18.getText():null), DQUOTEGen_18.getCharPositionInLine(), DQUOTEGen_18.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_18Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_43 != null) {
              			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_43!=null?TK_43.getText():null), TK_43.getCharPositionInLine(), TK_43.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_43Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_19 != null) {
              			Leaf DQUOTEGen_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_19!=null?DQUOTEGen_19.getText():null), DQUOTEGen_19.getCharPositionInLine(), DQUOTEGen_19.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_19Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_20 != null) {
              			Leaf DQUOTEGen_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_20!=null?DQUOTEGen_20.getText():null), DQUOTEGen_20.getCharPositionInLine(), DQUOTEGen_20.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_20Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_44 != null) {
              			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_44!=null?TK_44.getText():null), TK_44.getCharPositionInLine(), TK_44.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_44Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_21 != null) {
              			Leaf DQUOTEGen_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_21!=null?DQUOTEGen_21.getText():null), DQUOTEGen_21.getCharPositionInLine(), DQUOTEGen_21.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_21Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_45 != null) {
              			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_45!=null?TK_45.getText():null), TK_45.getCharPositionInLine(), TK_45.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_45Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_46 != null) {
              			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_46!=null?TK_46.getText():null), TK_46.getCharPositionInLine(), TK_46.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_46Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_47 != null) {
              			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_47!=null?TK_47.getText():null), TK_47.getCharPositionInLine(), TK_47.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_47Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_22 != null) {
              			Leaf DQUOTEGen_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_22!=null?DQUOTEGen_22.getText():null), DQUOTEGen_22.getCharPositionInLine(), DQUOTEGen_22.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_22Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_48 != null) {
              			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_48!=null?TK_48.getText():null), TK_48.getCharPositionInLine(), TK_48.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_48Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_23 != null) {
              			Leaf DQUOTEGen_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_23!=null?DQUOTEGen_23.getText():null), DQUOTEGen_23.getCharPositionInLine(), DQUOTEGen_23.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_23Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_24 != null) {
              			Leaf DQUOTEGen_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_24!=null?DQUOTEGen_24.getText():null), DQUOTEGen_24.getCharPositionInLine(), DQUOTEGen_24.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_24Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_49 != null) {
              			Leaf TK_49Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_49!=null?TK_49.getText():null), TK_49.getCharPositionInLine(), TK_49.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_49Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_25 != null) {
              			Leaf DQUOTEGen_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_25!=null?DQUOTEGen_25.getText():null), DQUOTEGen_25.getCharPositionInLine(), DQUOTEGen_25.getLine());
              			templateA45ReturnNode.getChildren().add(DQUOTEGen_25Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_50 != null) {
              			Leaf TK_50Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_50!=null?TK_50.getText():null), TK_50.getCharPositionInLine(), TK_50.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_50Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_51 != null) {
              			Leaf TK_51Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_51!=null?TK_51.getText():null), TK_51.getCharPositionInLine(), TK_51.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_51Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_52 != null) {
              			Leaf TK_52Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_52!=null?TK_52.getText():null), TK_52.getCharPositionInLine(), TK_52.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_52Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_53 != null) {
              			Leaf TK_53Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_53!=null?TK_53.getText():null), TK_53.getCharPositionInLine(), TK_53.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_53Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_54 != null) {
              			Leaf TK_54Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_54!=null?TK_54.getText():null), TK_54.getCharPositionInLine(), TK_54.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_54Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_55 != null) {
              			Leaf TK_55Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_55!=null?TK_55.getText():null), TK_55.getCharPositionInLine(), TK_55.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_55Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_56 != null) {
              			Leaf TK_56Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_56!=null?TK_56.getText():null), TK_56.getCharPositionInLine(), TK_56.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_56Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_57 != null) {
              			Leaf TK_57Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_57!=null?TK_57.getText():null), TK_57.getCharPositionInLine(), TK_57.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_57Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_58 != null) {
              			Leaf TK_58Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_58!=null?TK_58.getText():null), TK_58.getCharPositionInLine(), TK_58.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_58Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_59 != null) {
              			Leaf TK_59Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_59!=null?TK_59.getText():null), TK_59.getCharPositionInLine(), TK_59.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_59Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_60 != null) {
              			Leaf TK_60Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_60!=null?TK_60.getText():null), TK_60.getCharPositionInLine(), TK_60.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_60Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RPARGen != null) {
              			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", (RPARGen!=null?RPARGen.getText():null), RPARGen.getCharPositionInLine(), RPARGen.getLine());
              			templateA45ReturnNode.getChildren().add(RPARGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DLESSGen != null) {
              			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", (DLESSGen!=null?DLESSGen.getText():null), DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
              			templateA45ReturnNode.getChildren().add(DLESSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_61 != null) {
              			Leaf TK_61Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_61!=null?TK_61.getText():null), TK_61.getCharPositionInLine(), TK_61.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_61Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_62 != null) {
              			Leaf TK_62Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_62!=null?TK_62.getText():null), TK_62.getCharPositionInLine(), TK_62.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_62Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_63 != null) {
              			Leaf TK_63Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_63!=null?TK_63.getText():null), TK_63.getCharPositionInLine(), TK_63.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_63Leaf);
              	 	}

              		// Create a special CST Node for terminal dirlistGen aggregation
              		if(list_dirlistGen != null) {
              	    for(int pos = 0; pos < list_dirlistGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_dirlistGen != null) {		
              	    	GrammarShellForMancoosiParser.dirlist_return r = (GrammarShellForMancoosiParser.dirlist_return) list_dirlistGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("dirlist");
              	    		templateA45ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_permsGen != null) {		
              	    	GrammarShellForMancoosiParser.perms_return r = (GrammarShellForMancoosiParser.perms_return) list_permsGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("perms");
              	    		templateA45ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_ownerGen != null) {		
              	    	GrammarShellForMancoosiParser.owner_return r = (GrammarShellForMancoosiParser.owner_return) list_ownerGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("owner");
              	    		templateA45ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_groupGen != null) {		
              	    	GrammarShellForMancoosiParser.group_return r = (GrammarShellForMancoosiParser.group_return) list_groupGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("group");
              	    		templateA45ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_64 != null) {
              			Leaf TK_64Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_64!=null?TK_64.getText():null), TK_64.getCharPositionInLine(), TK_64.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_64Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_65 != null) {
              			Leaf TK_65Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_65!=null?TK_65.getText():null), TK_65.getCharPositionInLine(), TK_65.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_65Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_66 != null) {
              			Leaf TK_66Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_66!=null?TK_66.getText():null), TK_66.getCharPositionInLine(), TK_66.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_66Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_67 != null) {
              			Leaf TK_67Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_67!=null?TK_67.getText():null), TK_67.getCharPositionInLine(), TK_67.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_67Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_68 != null) {
              			Leaf TK_68Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_68!=null?TK_68.getText():null), TK_68.getCharPositionInLine(), TK_68.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_68Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_69 != null) {
              			Leaf TK_69Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_69!=null?TK_69.getText():null), TK_69.getCharPositionInLine(), TK_69.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_69Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_70 != null) {
              			Leaf TK_70Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_70!=null?TK_70.getText():null), TK_70.getCharPositionInLine(), TK_70.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_70Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_71 != null) {
              			Leaf TK_71Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_71!=null?TK_71.getText():null), TK_71.getCharPositionInLine(), TK_71.getLine());
              	 		templateA45ReturnNode.getChildren().add(TK_71Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA45ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA45"

    public static class templateA46_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA46"
    // GrammarShellForMancoosi.g:11657:1: templateA46 returns [Node returnNode] : LPARGen= LPAR (TK_0= '\\n' )? TK_1= 'while' TK_2= 'read' TK_3= 'dir' (TK_4= ';' )? TK_5= 'do' (TK_6= '\\n' ) TK_7= 'rmdir' DQUOTEGen= DQUOTE TK_8= '$dir' DQUOTEGen_1= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'done' (TK_13= '\\n' | TK_14= ';' ) RPARGen= RPAR DLESSGen= DLESS TK_15= 'DATA' (TK_16= '\\n' | TK_17= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_18= ';' | TK_19= '\\n' ) )+ TK_20= 'DATA' (TK_21= '\\n' | TK_22= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA46_return templateA46() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA46_return retval = new GrammarShellForMancoosiParser.templateA46_return();
        retval.start = input.LT(1);

        Token LPARGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token DQUOTEGen=null;
        Token TK_8=null;
        Token DQUOTEGen_1=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token ORGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token RPARGen=null;
        Token DLESSGen=null;
        Token TK_15=null;
        Token TK_16=null;
        Token TK_17=null;
        Token TK_18=null;
        Token TK_19=null;
        Token TK_20=null;
        Token TK_21=null;
        Token TK_22=null;
        List list_dirlistGen=null;
        List list_permsGen=null;
        List list_ownerGen=null;
        List list_groupGen=null;
        RuleReturnScope dirlistGen = null;
        RuleReturnScope permsGen = null;
        RuleReturnScope ownerGen = null;
        RuleReturnScope groupGen = null;
        try {
            // GrammarShellForMancoosi.g:11658:1: (LPARGen= LPAR (TK_0= '\\n' )? TK_1= 'while' TK_2= 'read' TK_3= 'dir' (TK_4= ';' )? TK_5= 'do' (TK_6= '\\n' ) TK_7= 'rmdir' DQUOTEGen= DQUOTE TK_8= '$dir' DQUOTEGen_1= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'done' (TK_13= '\\n' | TK_14= ';' ) RPARGen= RPAR DLESSGen= DLESS TK_15= 'DATA' (TK_16= '\\n' | TK_17= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_18= ';' | TK_19= '\\n' ) )+ TK_20= 'DATA' (TK_21= '\\n' | TK_22= ';' ) )
            // GrammarShellForMancoosi.g:11658:4: LPARGen= LPAR (TK_0= '\\n' )? TK_1= 'while' TK_2= 'read' TK_3= 'dir' (TK_4= ';' )? TK_5= 'do' (TK_6= '\\n' ) TK_7= 'rmdir' DQUOTEGen= DQUOTE TK_8= '$dir' DQUOTEGen_1= DQUOTE NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL ORGen= OR TK_9= 'true' (TK_10= '\\n' | TK_11= ';' ) TK_12= 'done' (TK_13= '\\n' | TK_14= ';' ) RPARGen= RPAR DLESSGen= DLESS TK_15= 'DATA' (TK_16= '\\n' | TK_17= ';' ) (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_18= ';' | TK_19= '\\n' ) )+ TK_20= 'DATA' (TK_21= '\\n' | TK_22= ';' )
            {
            LPARGen=(Token)match(input,LPAR,FOLLOW_LPAR_in_templateA4612337); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:17: (TK_0= '\\n' )?
            int alt462=2;
            int LA462_0 = input.LA(1);

            if ( (LA462_0==78) ) {
                alt462=1;
            }
            switch (alt462) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:19: TK_0= '\\n'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_templateA4612343); if (state.failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)match(input,176,FOLLOW_176_in_templateA4612350); if (state.failed) return retval;
            TK_2=(Token)match(input,177,FOLLOW_177_in_templateA4612355); if (state.failed) return retval;
            TK_3=(Token)match(input,181,FOLLOW_181_in_templateA4612360); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:70: (TK_4= ';' )?
            int alt463=2;
            int LA463_0 = input.LA(1);

            if ( (LA463_0==83) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:72: TK_4= ';'
                    {
                    TK_4=(Token)match(input,83,FOLLOW_83_in_templateA4612366); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,106,FOLLOW_106_in_templateA4612373); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:94: (TK_6= '\\n' )
            // GrammarShellForMancoosi.g:11658:96: TK_6= '\\n'
            {
            TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4612379); if (state.failed) return retval;

            }

            TK_7=(Token)match(input,110,FOLLOW_110_in_templateA4612385); if (state.failed) return retval;
            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4612390); if (state.failed) return retval;
            TK_8=(Token)match(input,184,FOLLOW_184_in_templateA4612395); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4612400); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA4612405); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA4612410); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA4612415); if (state.failed) return retval;
            ORGen=(Token)match(input,OR,FOLLOW_OR_in_templateA4612420); if (state.failed) return retval;
            TK_9=(Token)match(input,136,FOLLOW_136_in_templateA4612425); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:252: (TK_10= '\\n' | TK_11= ';' )
            int alt464=2;
            int LA464_0 = input.LA(1);

            if ( (LA464_0==78) ) {
                alt464=1;
            }
            else if ( (LA464_0==83) ) {
                alt464=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 464, 0, input);

                throw nvae;
            }
            switch (alt464) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:254: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA4612432); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11658:268: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA4612439); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,109,FOLLOW_109_in_templateA4612445); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:293: (TK_13= '\\n' | TK_14= ';' )
            int alt465=2;
            int LA465_0 = input.LA(1);

            if ( (LA465_0==78) ) {
                alt465=1;
            }
            else if ( (LA465_0==83) ) {
                alt465=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 465, 0, input);

                throw nvae;
            }
            switch (alt465) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:295: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA4612451); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11658:309: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA4612458); if (state.failed) return retval;

                    }
                    break;

            }

            RPARGen=(Token)match(input,RPAR,FOLLOW_RPAR_in_templateA4612465); if (state.failed) return retval;
            DLESSGen=(Token)match(input,DLESS,FOLLOW_DLESS_in_templateA4612470); if (state.failed) return retval;
            TK_15=(Token)match(input,189,FOLLOW_189_in_templateA4612475); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:365: (TK_16= '\\n' | TK_17= ';' )
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( (LA466_0==78) ) {
                alt466=1;
            }
            else if ( (LA466_0==83) ) {
                alt466=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 466, 0, input);

                throw nvae;
            }
            switch (alt466) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:367: TK_16= '\\n'
                    {
                    TK_16=(Token)match(input,78,FOLLOW_78_in_templateA4612481); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11658:381: TK_17= ';'
                    {
                    TK_17=(Token)match(input,83,FOLLOW_83_in_templateA4612488); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:11658:393: (dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_18= ';' | TK_19= '\\n' ) )+
            int cnt469=0;
            loop469:
            do {
                int alt469=2;
                int LA469_0 = input.LA(1);

                if ( (LA469_0==PATHNULL||(LA469_0>=PATHEMACSINST && LA469_0<=PATHEMACSREM)||(LA469_0>=PATHGCONFSCH && LA469_0<=PATHOLDSCHEMA)||LA469_0==PATHCOMPYTH||(LA469_0>=PATHMIME && LA469_0<=PATHSUID)||LA469_0==PATHSS||LA469_0==PATHP||(LA469_0>=PATHXWINDOW && LA469_0<=PATHSCRIPT)||(LA469_0>=PATHREL && LA469_0<=PATH)) ) {
                    alt469=1;
                }


                switch (alt469) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:11658:395: dirlistGen+= dirlist (permsGen+= perms ownerGen+= owner groupGen+= group )? (TK_18= ';' | TK_19= '\\n' )
            	    {
            	    pushFollow(FOLLOW_dirlist_in_templateA4612496);
            	    dirlistGen=dirlist();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_dirlistGen==null) list_dirlistGen=new ArrayList();
            	    list_dirlistGen.add(dirlistGen);

            	    // GrammarShellForMancoosi.g:11658:415: (permsGen+= perms ownerGen+= owner groupGen+= group )?
            	    int alt467=2;
            	    int LA467_0 = input.LA(1);

            	    if ( (LA467_0==NUMBER||LA467_0==ID||(LA467_0>=80 && LA467_0<=82)||LA467_0==85||(LA467_0>=87 && LA467_0<=93)||(LA467_0>=95 && LA467_0<=100)||LA467_0==103||(LA467_0>=107 && LA467_0<=108)||(LA467_0>=110 && LA467_0<=112)||(LA467_0>=114 && LA467_0<=119)||(LA467_0>=121 && LA467_0<=122)||(LA467_0>=124 && LA467_0<=126)||(LA467_0>=128 && LA467_0<=137)||LA467_0==139||(LA467_0>=142 && LA467_0<=144)||(LA467_0>=147 && LA467_0<=159)||(LA467_0>=161 && LA467_0<=175)||(LA467_0>=177 && LA467_0<=179)||(LA467_0>=181 && LA467_0<=183)||LA467_0==185||(LA467_0>=190 && LA467_0<=195)||(LA467_0>=201 && LA467_0<=207)) ) {
            	        alt467=1;
            	    }
            	    switch (alt467) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:11658:417: permsGen+= perms ownerGen+= owner groupGen+= group
            	            {
            	            pushFollow(FOLLOW_perms_in_templateA4612502);
            	            permsGen=perms();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_permsGen==null) list_permsGen=new ArrayList();
            	            list_permsGen.add(permsGen);

            	            pushFollow(FOLLOW_owner_in_templateA4612507);
            	            ownerGen=owner();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_ownerGen==null) list_ownerGen=new ArrayList();
            	            list_ownerGen.add(ownerGen);

            	            pushFollow(FOLLOW_group_in_templateA4612512);
            	            groupGen=group();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_groupGen==null) list_groupGen=new ArrayList();
            	            list_groupGen.add(groupGen);


            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:11658:469: (TK_18= ';' | TK_19= '\\n' )
            	    int alt468=2;
            	    int LA468_0 = input.LA(1);

            	    if ( (LA468_0==83) ) {
            	        alt468=1;
            	    }
            	    else if ( (LA468_0==78) ) {
            	        alt468=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 468, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt468) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:11658:471: TK_18= ';'
            	            {
            	            TK_18=(Token)match(input,83,FOLLOW_83_in_templateA4612520); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // GrammarShellForMancoosi.g:11658:484: TK_19= '\\n'
            	            {
            	            TK_19=(Token)match(input,78,FOLLOW_78_in_templateA4612527); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt469 >= 1 ) break loop469;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(469, input);
                        throw eee;
                }
                cnt469++;
            } while (true);

            TK_20=(Token)match(input,189,FOLLOW_189_in_templateA4612535); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11658:512: (TK_21= '\\n' | TK_22= ';' )
            int alt470=2;
            int LA470_0 = input.LA(1);

            if ( (LA470_0==78) ) {
                alt470=1;
            }
            else if ( (LA470_0==83) ) {
                alt470=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 470, 0, input);

                throw nvae;
            }
            switch (alt470) {
                case 1 :
                    // GrammarShellForMancoosi.g:11658:514: TK_21= '\\n'
                    {
                    TK_21=(Token)match(input,78,FOLLOW_78_in_templateA4612541); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11658:528: TK_22= ';'
                    {
                    TK_22=(Token)match(input,83,FOLLOW_83_in_templateA4612548); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA46ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA46ReturnNode.setKind("templateA46");
              	    // Create a CST Leaf
              		if(LPARGen != null) {
              			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", (LPARGen!=null?LPARGen.getText():null), LPARGen.getCharPositionInLine(), LPARGen.getLine());
              			templateA46ReturnNode.getChildren().add(LPARGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA46ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA46ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA46ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA46ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA46ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			templateA46ReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RPARGen != null) {
              			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", (RPARGen!=null?RPARGen.getText():null), RPARGen.getCharPositionInLine(), RPARGen.getLine());
              			templateA46ReturnNode.getChildren().add(RPARGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DLESSGen != null) {
              			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", (DLESSGen!=null?DLESSGen.getText():null), DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
              			templateA46ReturnNode.getChildren().add(DLESSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_17 != null) {
              			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_17!=null?TK_17.getText():null), TK_17.getCharPositionInLine(), TK_17.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_17Leaf);
              	 	}

              		// Create a special CST Node for terminal dirlistGen aggregation
              		if(list_dirlistGen != null) {
              	    for(int pos = 0; pos < list_dirlistGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_dirlistGen != null) {		
              	    	GrammarShellForMancoosiParser.dirlist_return r = (GrammarShellForMancoosiParser.dirlist_return) list_dirlistGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("dirlist");
              	    		templateA46ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_permsGen != null) {		
              	    	GrammarShellForMancoosiParser.perms_return r = (GrammarShellForMancoosiParser.perms_return) list_permsGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("perms");
              	    		templateA46ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_ownerGen != null) {		
              	    	GrammarShellForMancoosiParser.owner_return r = (GrammarShellForMancoosiParser.owner_return) list_ownerGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("owner");
              	    		templateA46ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_groupGen != null) {		
              	    	GrammarShellForMancoosiParser.group_return r = (GrammarShellForMancoosiParser.group_return) list_groupGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("group");
              	    		templateA46ReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_18 != null) {
              			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_18!=null?TK_18.getText():null), TK_18.getCharPositionInLine(), TK_18.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_18Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_19 != null) {
              			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_19!=null?TK_19.getText():null), TK_19.getCharPositionInLine(), TK_19.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_19Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_20 != null) {
              			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_20!=null?TK_20.getText():null), TK_20.getCharPositionInLine(), TK_20.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_20Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_21 != null) {
              			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_21!=null?TK_21.getText():null), TK_21.getCharPositionInLine(), TK_21.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_21Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_22 != null) {
              			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_22!=null?TK_22.getText():null), TK_22.getCharPositionInLine(), TK_22.getLine());
              	 		templateA46ReturnNode.getChildren().add(TK_22Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA46ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA46"

    public static class templateA47_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA47"
    // GrammarShellForMancoosi.g:11867:1: templateA47 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA47_return templateA47() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA47_return retval = new GrammarShellForMancoosiParser.templateA47_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token DMINUSGen=null;
        Token TK_8=null;
        Token PATHXWINDOWGen=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        List list_input_variableGen=null;
        List list_wmGen=null;
        List list_priorityGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope wmGen = null;
        RuleReturnScope priorityGen = null;
        try {
            // GrammarShellForMancoosi.g:11868:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) )
            // GrammarShellForMancoosi.g:11868:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4712571); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:14: (TK_1= '\\n' )?
            int alt471=2;
            int LA471_0 = input.LA(1);

            if ( (LA471_0==78) ) {
                alt471=1;
            }
            switch (alt471) {
                case 1 :
                    // GrammarShellForMancoosi.g:11868:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4712577); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4712584); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:58: (DQUOTEGen= DQUOTE )?
            int alt472=2;
            int LA472_0 = input.LA(1);

            if ( (LA472_0==DQUOTE) ) {
                alt472=1;
            }
            switch (alt472) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4712589); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4712595);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:11868:114: (DQUOTEGen_1= DQUOTE )?
            int alt473=2;
            int LA473_0 = input.LA(1);

            if ( (LA473_0==DQUOTE) ) {
                alt473=1;
            }
            switch (alt473) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4712600); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4712606); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:147: (DQUOTEGen_2= DQUOTE )?
            int alt474=2;
            int LA474_0 = input.LA(1);

            if ( (LA474_0==DQUOTE) ) {
                alt474=1;
            }
            switch (alt474) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4712611); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA4712617); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:186: (DQUOTEGen_3= DQUOTE )?
            int alt475=2;
            int LA475_0 = input.LA(1);

            if ( (LA475_0==DQUOTE) ) {
                alt475=1;
            }
            switch (alt475) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4712622); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4712628); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:215: (TK_3= '\\n' | TK_4= ';' )
            int alt476=2;
            int LA476_0 = input.LA(1);

            if ( (LA476_0==78) ) {
                alt476=1;
            }
            else if ( (LA476_0==83) ) {
                alt476=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 476, 0, input);

                throw nvae;
            }
            switch (alt476) {
                case 1 :
                    // GrammarShellForMancoosi.g:11868:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA4712634); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11868:230: TK_4= ';'
                    {
                    TK_4=(Token)match(input,83,FOLLOW_83_in_templateA4712641); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA4712647); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:253: (TK_6= '\\n' )?
            int alt477=2;
            int LA477_0 = input.LA(1);

            if ( (LA477_0==78) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    // GrammarShellForMancoosi.g:11868:255: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4712653); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,190,FOLLOW_190_in_templateA4712660); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA4712665); if (state.failed) return retval;
            TK_8=(Token)match(input,163,FOLLOW_163_in_templateA4712670); if (state.failed) return retval;
            PATHXWINDOWGen=(Token)match(input,PATHXWINDOW,FOLLOW_PATHXWINDOW_in_templateA4712675); if (state.failed) return retval;
            TK_9=(Token)match(input,191,FOLLOW_191_in_templateA4712681); if (state.failed) return retval;
            pushFollow(FOLLOW_wm_in_templateA4712686);
            wmGen=wm();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wmGen==null) list_wmGen=new ArrayList();
            list_wmGen.add(wmGen);

            pushFollow(FOLLOW_priority_in_templateA4712691);
            priorityGen=priority();

            state._fsp--;
            if (state.failed) return retval;
            if (list_priorityGen==null) list_priorityGen=new ArrayList();
            list_priorityGen.add(priorityGen);

            // GrammarShellForMancoosi.g:11868:417: (TK_10= '\\n' | TK_11= ';' )
            int alt478=2;
            int LA478_0 = input.LA(1);

            if ( (LA478_0==78) ) {
                alt478=1;
            }
            else if ( (LA478_0==83) ) {
                alt478=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 478, 0, input);

                throw nvae;
            }
            switch (alt478) {
                case 1 :
                    // GrammarShellForMancoosi.g:11868:419: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA4712697); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11868:433: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA4712704); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,86,FOLLOW_86_in_templateA4712710); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:11868:456: (TK_13= '\\n' | TK_14= ';' )
            int alt479=2;
            int LA479_0 = input.LA(1);

            if ( (LA479_0==78) ) {
                alt479=1;
            }
            else if ( (LA479_0==83) ) {
                alt479=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 479, 0, input);

                throw nvae;
            }
            switch (alt479) {
                case 1 :
                    // GrammarShellForMancoosi.g:11868:458: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA4712716); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:11868:472: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA4712723); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA47ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA47ReturnNode.setKind("templateA47");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA47ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA47ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA47ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA47ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA47ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA47ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA47ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA47ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA47ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHXWINDOWGen != null) {
              			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", (PATHXWINDOWGen!=null?PATHXWINDOWGen.getText():null), PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
              			templateA47ReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_wmGen != null) {
              	        for(Iterator it = list_wmGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.wm_return r = (GrammarShellForMancoosiParser.wm_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("wm");
              	            	templateA47ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_priorityGen != null) {
              	        for(Iterator it = list_priorityGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.priority_return r = (GrammarShellForMancoosiParser.priority_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("priority");
              	            	templateA47ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA47ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA47ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA47"

    public static class templateA48_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA48"
    // GrammarShellForMancoosi.g:12028:1: templateA48 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority DMINUSGen_1= DMINUS TK_10= 'slave' PATHXMANAGERGen= PATHXMANAGER TK_11= 'x-window-manager.1.gz' wmmanGen+= wmman (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA48_return templateA48() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA48_return retval = new GrammarShellForMancoosiParser.templateA48_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token DMINUSGen=null;
        Token TK_8=null;
        Token PATHXWINDOWGen=null;
        Token TK_9=null;
        Token DMINUSGen_1=null;
        Token TK_10=null;
        Token PATHXMANAGERGen=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        List list_wmGen=null;
        List list_priorityGen=null;
        List list_wmmanGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope wmGen = null;
        RuleReturnScope priorityGen = null;
        RuleReturnScope wmmanGen = null;
        try {
            // GrammarShellForMancoosi.g:12029:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority DMINUSGen_1= DMINUS TK_10= 'slave' PATHXMANAGERGen= PATHXMANAGER TK_11= 'x-window-manager.1.gz' wmmanGen+= wmman (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:12029:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'configure' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'install' PATHXWINDOWGen= PATHXWINDOW TK_9= 'x-window-manager' wmGen+= wm priorityGen+= priority DMINUSGen_1= DMINUS TK_10= 'slave' PATHXMANAGERGen= PATHXMANAGER TK_11= 'x-window-manager.1.gz' wmmanGen+= wmman (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4812747); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:14: (TK_1= '\\n' )?
            int alt480=2;
            int LA480_0 = input.LA(1);

            if ( (LA480_0==78) ) {
                alt480=1;
            }
            switch (alt480) {
                case 1 :
                    // GrammarShellForMancoosi.g:12029:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4812753); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4812760); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:58: (DQUOTEGen= DQUOTE )?
            int alt481=2;
            int LA481_0 = input.LA(1);

            if ( (LA481_0==DQUOTE) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4812765); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4812771);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:12029:114: (DQUOTEGen_1= DQUOTE )?
            int alt482=2;
            int LA482_0 = input.LA(1);

            if ( (LA482_0==DQUOTE) ) {
                alt482=1;
            }
            switch (alt482) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4812776); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4812782); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:147: (DQUOTEGen_2= DQUOTE )?
            int alt483=2;
            int LA483_0 = input.LA(1);

            if ( (LA483_0==DQUOTE) ) {
                alt483=1;
            }
            switch (alt483) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4812787); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,80,FOLLOW_80_in_templateA4812793); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:186: (DQUOTEGen_3= DQUOTE )?
            int alt484=2;
            int LA484_0 = input.LA(1);

            if ( (LA484_0==DQUOTE) ) {
                alt484=1;
            }
            switch (alt484) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4812798); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4812804); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:215: (TK_3= '\\n' | TK_4= ';' )
            int alt485=2;
            int LA485_0 = input.LA(1);

            if ( (LA485_0==78) ) {
                alt485=1;
            }
            else if ( (LA485_0==83) ) {
                alt485=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 485, 0, input);

                throw nvae;
            }
            switch (alt485) {
                case 1 :
                    // GrammarShellForMancoosi.g:12029:217: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA4812810); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12029:230: TK_4= ';'
                    {
                    TK_4=(Token)match(input,83,FOLLOW_83_in_templateA4812817); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA4812823); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:253: (TK_6= '\\n' )?
            int alt486=2;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==78) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    // GrammarShellForMancoosi.g:12029:255: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4812829); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,190,FOLLOW_190_in_templateA4812836); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA4812841); if (state.failed) return retval;
            TK_8=(Token)match(input,163,FOLLOW_163_in_templateA4812846); if (state.failed) return retval;
            PATHXWINDOWGen=(Token)match(input,PATHXWINDOW,FOLLOW_PATHXWINDOW_in_templateA4812851); if (state.failed) return retval;
            TK_9=(Token)match(input,191,FOLLOW_191_in_templateA4812856); if (state.failed) return retval;
            pushFollow(FOLLOW_wm_in_templateA4812861);
            wmGen=wm();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wmGen==null) list_wmGen=new ArrayList();
            list_wmGen.add(wmGen);

            pushFollow(FOLLOW_priority_in_templateA4812866);
            priorityGen=priority();

            state._fsp--;
            if (state.failed) return retval;
            if (list_priorityGen==null) list_priorityGen=new ArrayList();
            list_priorityGen.add(priorityGen);

            DMINUSGen_1=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA4812871); if (state.failed) return retval;
            TK_10=(Token)match(input,192,FOLLOW_192_in_templateA4812876); if (state.failed) return retval;
            PATHXMANAGERGen=(Token)match(input,PATHXMANAGER,FOLLOW_PATHXMANAGER_in_templateA4812881); if (state.failed) return retval;
            TK_11=(Token)match(input,193,FOLLOW_193_in_templateA4812886); if (state.failed) return retval;
            pushFollow(FOLLOW_wmman_in_templateA4812891);
            wmmanGen=wmman();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wmmanGen==null) list_wmmanGen=new ArrayList();
            list_wmmanGen.add(wmmanGen);

            // GrammarShellForMancoosi.g:12029:529: (TK_12= '\\n' | TK_13= ';' )
            int alt487=2;
            int LA487_0 = input.LA(1);

            if ( (LA487_0==78) ) {
                alt487=1;
            }
            else if ( (LA487_0==83) ) {
                alt487=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 487, 0, input);

                throw nvae;
            }
            switch (alt487) {
                case 1 :
                    // GrammarShellForMancoosi.g:12029:531: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA4812897); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12029:545: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA4812904); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA4812910); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12029:568: (TK_15= '\\n' | TK_16= ';' )
            int alt488=2;
            int LA488_0 = input.LA(1);

            if ( (LA488_0==78) ) {
                alt488=1;
            }
            else if ( (LA488_0==83) ) {
                alt488=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 488, 0, input);

                throw nvae;
            }
            switch (alt488) {
                case 1 :
                    // GrammarShellForMancoosi.g:12029:570: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA4812916); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12029:584: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA4812923); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA48ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA48ReturnNode.setKind("templateA48");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA48ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA48ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA48ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA48ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA48ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA48ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA48ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA48ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA48ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHXWINDOWGen != null) {
              			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", (PATHXWINDOWGen!=null?PATHXWINDOWGen.getText():null), PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
              			templateA48ReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_wmGen != null) {
              	        for(Iterator it = list_wmGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.wm_return r = (GrammarShellForMancoosiParser.wm_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("wm");
              	            	templateA48ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_priorityGen != null) {
              	        for(Iterator it = list_priorityGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.priority_return r = (GrammarShellForMancoosiParser.priority_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("priority");
              	            	templateA48ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DMINUSGen_1 != null) {
              			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen_1!=null?DMINUSGen_1.getText():null), DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
              			templateA48ReturnNode.getChildren().add(DMINUSGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHXMANAGERGen != null) {
              			Leaf PATHXMANAGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXMANAGER", (PATHXMANAGERGen!=null?PATHXMANAGERGen.getText():null), PATHXMANAGERGen.getCharPositionInLine(), PATHXMANAGERGen.getLine());
              			templateA48ReturnNode.getChildren().add(PATHXMANAGERGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_wmmanGen != null) {
              	        for(Iterator it = list_wmmanGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.wmman_return r = (GrammarShellForMancoosiParser.wmman_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("wmman");
              	            	templateA48ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA48ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA48ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA48"

    public static class templateA49_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA49"
    // GrammarShellForMancoosi.g:12219:1: templateA49 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'remove' TK_9= 'x-window-manager' wmGen+= wm (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA49_return templateA49() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA49_return retval = new GrammarShellForMancoosiParser.templateA49_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token DMINUSGen=null;
        Token TK_8=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        List list_input_variableGen=null;
        List list_wmGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope wmGen = null;
        try {
            // GrammarShellForMancoosi.g:12220:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'remove' TK_9= 'x-window-manager' wmGen+= wm (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' ) )
            // GrammarShellForMancoosi.g:12220:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'remove' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' | TK_4= ';' ) TK_5= 'then' (TK_6= '\\n' )? TK_7= 'update-alternatives' DMINUSGen= DMINUS TK_8= 'remove' TK_9= 'x-window-manager' wmGen+= wm (TK_10= '\\n' | TK_11= ';' ) TK_12= 'fi' (TK_13= '\\n' | TK_14= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA4912946); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:14: (TK_1= '\\n' )?
            int alt489=2;
            int LA489_0 = input.LA(1);

            if ( (LA489_0==78) ) {
                alt489=1;
            }
            switch (alt489) {
                case 1 :
                    // GrammarShellForMancoosi.g:12220:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA4912952); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA4912959); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:58: (DQUOTEGen= DQUOTE )?
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==DQUOTE) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4912964); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA4912970);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:12220:114: (DQUOTEGen_1= DQUOTE )?
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==DQUOTE) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4912975); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA4912981); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:147: (DQUOTEGen_2= DQUOTE )?
            int alt492=2;
            int LA492_0 = input.LA(1);

            if ( (LA492_0==DQUOTE) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4912986); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,87,FOLLOW_87_in_templateA4912992); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:183: (DQUOTEGen_3= DQUOTE )?
            int alt493=2;
            int LA493_0 = input.LA(1);

            if ( (LA493_0==DQUOTE) ) {
                alt493=1;
            }
            switch (alt493) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA4912997); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA4913003); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:212: (TK_3= '\\n' | TK_4= ';' )
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==78) ) {
                alt494=1;
            }
            else if ( (LA494_0==83) ) {
                alt494=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 494, 0, input);

                throw nvae;
            }
            switch (alt494) {
                case 1 :
                    // GrammarShellForMancoosi.g:12220:214: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA4913009); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12220:227: TK_4= ';'
                    {
                    TK_4=(Token)match(input,83,FOLLOW_83_in_templateA4913016); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA4913022); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:250: (TK_6= '\\n' )?
            int alt495=2;
            int LA495_0 = input.LA(1);

            if ( (LA495_0==78) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    // GrammarShellForMancoosi.g:12220:252: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA4913028); if (state.failed) return retval;

                    }
                    break;

            }

            TK_7=(Token)match(input,190,FOLLOW_190_in_templateA4913035); if (state.failed) return retval;
            DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_templateA4913040); if (state.failed) return retval;
            TK_8=(Token)match(input,87,FOLLOW_87_in_templateA4913045); if (state.failed) return retval;
            TK_9=(Token)match(input,191,FOLLOW_191_in_templateA4913050); if (state.failed) return retval;
            pushFollow(FOLLOW_wm_in_templateA4913055);
            wmGen=wm();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wmGen==null) list_wmGen=new ArrayList();
            list_wmGen.add(wmGen);

            // GrammarShellForMancoosi.g:12220:361: (TK_10= '\\n' | TK_11= ';' )
            int alt496=2;
            int LA496_0 = input.LA(1);

            if ( (LA496_0==78) ) {
                alt496=1;
            }
            else if ( (LA496_0==83) ) {
                alt496=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 496, 0, input);

                throw nvae;
            }
            switch (alt496) {
                case 1 :
                    // GrammarShellForMancoosi.g:12220:363: TK_10= '\\n'
                    {
                    TK_10=(Token)match(input,78,FOLLOW_78_in_templateA4913061); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12220:377: TK_11= ';'
                    {
                    TK_11=(Token)match(input,83,FOLLOW_83_in_templateA4913068); if (state.failed) return retval;

                    }
                    break;

            }

            TK_12=(Token)match(input,86,FOLLOW_86_in_templateA4913074); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12220:400: (TK_13= '\\n' | TK_14= ';' )
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==78) ) {
                alt497=1;
            }
            else if ( (LA497_0==83) ) {
                alt497=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 497, 0, input);

                throw nvae;
            }
            switch (alt497) {
                case 1 :
                    // GrammarShellForMancoosi.g:12220:402: TK_13= '\\n'
                    {
                    TK_13=(Token)match(input,78,FOLLOW_78_in_templateA4913080); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12220:416: TK_14= ';'
                    {
                    TK_14=(Token)match(input,83,FOLLOW_83_in_templateA4913087); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA49ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA49ReturnNode.setKind("templateA49");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA49ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA49ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA49ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA49ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA49ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA49ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA49ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA49ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DMINUSGen != null) {
              			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
              			templateA49ReturnNode.getChildren().add(DMINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_wmGen != null) {
              	        for(Iterator it = list_wmGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.wm_return r = (GrammarShellForMancoosiParser.wm_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("wm");
              	            	templateA49ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA49ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA49ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA49"

    public static class templateA50_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA50"
    // GrammarShellForMancoosi.g:12365:1: templateA50 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-fonts-dir' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? cmdsGen+= cmds TK_7= 'fi' (TK_8= '\\n' | TK_9= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA50_return templateA50() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA50_return retval = new GrammarShellForMancoosiParser.templateA50_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        List list_cmdsGen=null;
        RuleReturnScope cmdsGen = null;
        try {
            // GrammarShellForMancoosi.g:12366:1: (TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-fonts-dir' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? cmdsGen+= cmds TK_7= 'fi' (TK_8= '\\n' | TK_9= ';' ) )
            // GrammarShellForMancoosi.g:12366:4: TK_0= 'if' (TK_1= '\\n' )? TK_2= 'which' TK_3= 'update-fonts-dir' GREATGen= GREAT PATHNULLGen= PATHNULL NUMBERGen= NUMBER GREATANDGen= GREATAND NUMBERGen_1= NUMBER TK_4= ';' TK_5= 'then' (TK_6= '\\n' )? cmdsGen+= cmds TK_7= 'fi' (TK_8= '\\n' | TK_9= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA5013110); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12366:14: (TK_1= '\\n' )?
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==78) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    // GrammarShellForMancoosi.g:12366:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA5013116); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,81,FOLLOW_81_in_templateA5013123); if (state.failed) return retval;
            TK_3=(Token)match(input,194,FOLLOW_194_in_templateA5013128); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA5013133); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA5013138); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA5013143); if (state.failed) return retval;
            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_templateA5013148); if (state.failed) return retval;
            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA5013153); if (state.failed) return retval;
            TK_4=(Token)match(input,83,FOLLOW_83_in_templateA5013158); if (state.failed) return retval;
            TK_5=(Token)match(input,84,FOLLOW_84_in_templateA5013163); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12366:188: (TK_6= '\\n' )?
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==78) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    // GrammarShellForMancoosi.g:12366:190: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_templateA5013169); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_cmds_in_templateA5013176);
            cmdsGen=cmds();

            state._fsp--;
            if (state.failed) return retval;
            if (list_cmdsGen==null) list_cmdsGen=new ArrayList();
            list_cmdsGen.add(cmdsGen);

            TK_7=(Token)match(input,86,FOLLOW_86_in_templateA5013181); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12366:228: (TK_8= '\\n' | TK_9= ';' )
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==78) ) {
                alt500=1;
            }
            else if ( (LA500_0==83) ) {
                alt500=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 500, 0, input);

                throw nvae;
            }
            switch (alt500) {
                case 1 :
                    // GrammarShellForMancoosi.g:12366:230: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA5013187); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12366:243: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_templateA5013194); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA50ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA50ReturnNode.setKind("templateA50");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA50ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA50ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA50ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATANDGen != null) {
              			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
              			templateA50ReturnNode.getChildren().add(GREATANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(NUMBERGen_1 != null) {
              			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
              			templateA50ReturnNode.getChildren().add(NUMBERGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_cmdsGen != null) {
              	        for(Iterator it = list_cmdsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.cmds_return r = (GrammarShellForMancoosiParser.cmds_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cmds");
              	            	templateA50ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA50ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA50ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA50"

    public static class templateA51_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA51"
    // GrammarShellForMancoosi.g:12461:1: templateA51 returns [Node returnNode] : TK_0= 'if' LSBRACKGen= LSBRACK paramGen+= param DQUOTEGen= DQUOTE APGen= AP TK_1= 'which' TK_2= 'update-fonts-dir' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? cmdsGen+= cmds TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA51_return templateA51() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA51_return retval = new GrammarShellForMancoosiParser.templateA51_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token APGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token PATHNULLGen=null;
        Token APGen_1=null;
        Token DQUOTEGen_1=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_paramGen=null;
        List list_cmdsGen=null;
        RuleReturnScope paramGen = null;
        RuleReturnScope cmdsGen = null;
        try {
            // GrammarShellForMancoosi.g:12462:1: (TK_0= 'if' LSBRACKGen= LSBRACK paramGen+= param DQUOTEGen= DQUOTE APGen= AP TK_1= 'which' TK_2= 'update-fonts-dir' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? cmdsGen+= cmds TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' ) )
            // GrammarShellForMancoosi.g:12462:4: TK_0= 'if' LSBRACKGen= LSBRACK paramGen+= param DQUOTEGen= DQUOTE APGen= AP TK_1= 'which' TK_2= 'update-fonts-dir' NUMBERGen= NUMBER GREATGen= GREAT PATHNULLGen= PATHNULL APGen_1= AP DQUOTEGen_1= DQUOTE RSBRACKGen= RSBRACK TK_3= ';' TK_4= 'then' (TK_5= '\\n' )? cmdsGen+= cmds TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA5113218); if (state.failed) return retval;
            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA5113223); if (state.failed) return retval;
            pushFollow(FOLLOW_param_in_templateA5113228);
            paramGen=param();

            state._fsp--;
            if (state.failed) return retval;
            if (list_paramGen==null) list_paramGen=new ArrayList();
            list_paramGen.add(paramGen);

            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5113233); if (state.failed) return retval;
            APGen=(Token)match(input,AP,FOLLOW_AP_in_templateA5113238); if (state.failed) return retval;
            TK_1=(Token)match(input,81,FOLLOW_81_in_templateA5113243); if (state.failed) return retval;
            TK_2=(Token)match(input,194,FOLLOW_194_in_templateA5113248); if (state.failed) return retval;
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_templateA5113253); if (state.failed) return retval;
            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_templateA5113258); if (state.failed) return retval;
            PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_templateA5113263); if (state.failed) return retval;
            APGen_1=(Token)match(input,AP,FOLLOW_AP_in_templateA5113268); if (state.failed) return retval;
            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5113273); if (state.failed) return retval;
            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA5113278); if (state.failed) return retval;
            TK_3=(Token)match(input,83,FOLLOW_83_in_templateA5113283); if (state.failed) return retval;
            TK_4=(Token)match(input,84,FOLLOW_84_in_templateA5113288); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12462:249: (TK_5= '\\n' )?
            int alt501=2;
            int LA501_0 = input.LA(1);

            if ( (LA501_0==78) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    // GrammarShellForMancoosi.g:12462:251: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_templateA5113294); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_cmds_in_templateA5113301);
            cmdsGen=cmds();

            state._fsp--;
            if (state.failed) return retval;
            if (list_cmdsGen==null) list_cmdsGen=new ArrayList();
            list_cmdsGen.add(cmdsGen);

            TK_6=(Token)match(input,86,FOLLOW_86_in_templateA5113306); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12462:289: (TK_7= '\\n' | TK_8= ';' )
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==78) ) {
                alt502=1;
            }
            else if ( (LA502_0==83) ) {
                alt502=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 502, 0, input);

                throw nvae;
            }
            switch (alt502) {
                case 1 :
                    // GrammarShellForMancoosi.g:12462:291: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_templateA5113312); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12462:304: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_templateA5113319); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA51ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA51ReturnNode.setKind("templateA51");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA51ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	templateA51ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA51ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen != null) {
              			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
              			templateA51ReturnNode.getChildren().add(APGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			templateA51ReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(GREATGen != null) {
              			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
              			templateA51ReturnNode.getChildren().add(GREATGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHNULLGen != null) {
              			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
              			templateA51ReturnNode.getChildren().add(PATHNULLGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(APGen_1 != null) {
              			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
              			templateA51ReturnNode.getChildren().add(APGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA51ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA51ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_cmdsGen != null) {
              	        for(Iterator it = list_cmdsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.cmds_return r = (GrammarShellForMancoosiParser.cmds_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("cmds");
              	            	templateA51ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA51ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA51ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA51"

    public static class templateA52_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "templateA52"
    // GrammarShellForMancoosi.g:12582:1: templateA52 returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHCONFMODGen= PATHCONFMOD RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? DOTGen= DOT PATHCONFMODGen_1= PATHCONFMOD (TK_9= '\\n' | TK_10= ';' ) TK_11= 'db_purge' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) ;
    public final GrammarShellForMancoosiParser.templateA52_return templateA52() throws RecognitionException {
        GrammarShellForMancoosiParser.templateA52_return retval = new GrammarShellForMancoosiParser.templateA52_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token LSBRACKGen=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token DQUOTEGen_2=null;
        Token TK_2=null;
        Token DQUOTEGen_3=null;
        Token RSBRACKGen=null;
        Token TK_3=null;
        Token ANDGen=null;
        Token TK_4=null;
        Token LSBRACKGen_1=null;
        Token MINUSGen=null;
        Token TK_5=null;
        Token PATHCONFMODGen=null;
        Token RSBRACKGen_1=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token DOTGen=null;
        Token PATHCONFMODGen_1=null;
        Token TK_9=null;
        Token TK_10=null;
        Token TK_11=null;
        Token TK_12=null;
        Token TK_13=null;
        Token TK_14=null;
        Token TK_15=null;
        Token TK_16=null;
        List list_input_variableGen=null;
        RuleReturnScope input_variableGen = null;
        try {
            // GrammarShellForMancoosi.g:12583:1: (TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHCONFMODGen= PATHCONFMOD RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? DOTGen= DOT PATHCONFMODGen_1= PATHCONFMOD (TK_9= '\\n' | TK_10= ';' ) TK_11= 'db_purge' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' ) )
            // GrammarShellForMancoosi.g:12583:4: TK_0= 'if' (TK_1= '\\n' )? LSBRACKGen= LSBRACK (DQUOTEGen= DQUOTE )? input_variableGen+= input_variable (DQUOTEGen_1= DQUOTE )? EQUGen= EQU (DQUOTEGen_2= DQUOTE )? TK_2= 'purge' (DQUOTEGen_3= DQUOTE )? RSBRACKGen= RSBRACK (TK_3= '\\n' )? ANDGen= AND (TK_4= '\\n' )? LSBRACKGen_1= LSBRACK MINUSGen= MINUS TK_5= 'e' PATHCONFMODGen= PATHCONFMOD RSBRACKGen_1= RSBRACK TK_6= ';' TK_7= 'then' (TK_8= '\\n' )? DOTGen= DOT PATHCONFMODGen_1= PATHCONFMOD (TK_9= '\\n' | TK_10= ';' ) TK_11= 'db_purge' (TK_12= '\\n' | TK_13= ';' ) TK_14= 'fi' (TK_15= '\\n' | TK_16= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_templateA5213343); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:14: (TK_1= '\\n' )?
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==78) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_templateA5213349); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA5213356); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:58: (DQUOTEGen= DQUOTE )?
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==DQUOTE) ) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5213361); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_input_variable_in_templateA5213367);
            input_variableGen=input_variable();

            state._fsp--;
            if (state.failed) return retval;
            if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
            list_input_variableGen.add(input_variableGen);

            // GrammarShellForMancoosi.g:12583:114: (DQUOTEGen_1= DQUOTE )?
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==DQUOTE) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5213372); if (state.failed) return retval;

                    }
                    break;

            }

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_templateA5213378); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:147: (DQUOTEGen_2= DQUOTE )?
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==DQUOTE) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                    {
                    DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5213383); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,97,FOLLOW_97_in_templateA5213389); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:182: (DQUOTEGen_3= DQUOTE )?
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( (LA507_0==DQUOTE) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                    {
                    DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_templateA5213394); if (state.failed) return retval;

                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA5213400); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:211: (TK_3= '\\n' )?
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==78) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:213: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_templateA5213406); if (state.failed) return retval;

                    }
                    break;

            }

            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_templateA5213413); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:237: (TK_4= '\\n' )?
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==78) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:239: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_templateA5213419); if (state.failed) return retval;

                    }
                    break;

            }

            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_templateA5213426); if (state.failed) return retval;
            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_templateA5213431); if (state.failed) return retval;
            TK_5=(Token)match(input,132,FOLLOW_132_in_templateA5213436); if (state.failed) return retval;
            PATHCONFMODGen=(Token)match(input,PATHCONFMOD,FOLLOW_PATHCONFMOD_in_templateA5213441); if (state.failed) return retval;
            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_templateA5213446); if (state.failed) return retval;
            TK_6=(Token)match(input,83,FOLLOW_83_in_templateA5213452); if (state.failed) return retval;
            TK_7=(Token)match(input,84,FOLLOW_84_in_templateA5213457); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:373: (TK_8= '\\n' )?
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( (LA510_0==78) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:375: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_templateA5213463); if (state.failed) return retval;

                    }
                    break;

            }

            DOTGen=(Token)match(input,DOT,FOLLOW_DOT_in_templateA5213470); if (state.failed) return retval;
            PATHCONFMODGen_1=(Token)match(input,PATHCONFMOD,FOLLOW_PATHCONFMOD_in_templateA5213475); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:429: (TK_9= '\\n' | TK_10= ';' )
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==78) ) {
                alt511=1;
            }
            else if ( (LA511_0==83) ) {
                alt511=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 511, 0, input);

                throw nvae;
            }
            switch (alt511) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:431: TK_9= '\\n'
                    {
                    TK_9=(Token)match(input,78,FOLLOW_78_in_templateA5213481); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12583:444: TK_10= ';'
                    {
                    TK_10=(Token)match(input,83,FOLLOW_83_in_templateA5213488); if (state.failed) return retval;

                    }
                    break;

            }

            TK_11=(Token)match(input,195,FOLLOW_195_in_templateA5213494); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:473: (TK_12= '\\n' | TK_13= ';' )
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==78) ) {
                alt512=1;
            }
            else if ( (LA512_0==83) ) {
                alt512=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 512, 0, input);

                throw nvae;
            }
            switch (alt512) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:475: TK_12= '\\n'
                    {
                    TK_12=(Token)match(input,78,FOLLOW_78_in_templateA5213500); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12583:489: TK_13= ';'
                    {
                    TK_13=(Token)match(input,83,FOLLOW_83_in_templateA5213507); if (state.failed) return retval;

                    }
                    break;

            }

            TK_14=(Token)match(input,86,FOLLOW_86_in_templateA5213513); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:12583:512: (TK_15= '\\n' | TK_16= ';' )
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==78) ) {
                alt513=1;
            }
            else if ( (LA513_0==83) ) {
                alt513=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 513, 0, input);

                throw nvae;
            }
            switch (alt513) {
                case 1 :
                    // GrammarShellForMancoosi.g:12583:514: TK_15= '\\n'
                    {
                    TK_15=(Token)match(input,78,FOLLOW_78_in_templateA5213519); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12583:528: TK_16= ';'
                    {
                    TK_16=(Token)match(input,83,FOLLOW_83_in_templateA5213526); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node templateA52ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		templateA52ReturnNode.setKind("templateA52");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			templateA52ReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			templateA52ReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_input_variableGen != null) {
              	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("input_variable");
              	            	templateA52ReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			templateA52ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			templateA52ReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_2 != null) {
              			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
              			templateA52ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen_3 != null) {
              			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
              			templateA52ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			templateA52ReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			templateA52ReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			templateA52ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(MINUSGen != null) {
              			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
              			templateA52ReturnNode.getChildren().add(MINUSGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(PATHCONFMODGen != null) {
              			Leaf PATHCONFMODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", (PATHCONFMODGen!=null?PATHCONFMODGen.getText():null), PATHCONFMODGen.getCharPositionInLine(), PATHCONFMODGen.getLine());
              			templateA52ReturnNode.getChildren().add(PATHCONFMODGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			templateA52ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DOTGen != null) {
              			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen!=null?DOTGen.getText():null), DOTGen.getCharPositionInLine(), DOTGen.getLine());
              			templateA52ReturnNode.getChildren().add(DOTGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PATHCONFMODGen_1 != null) {
              			Leaf PATHCONFMODGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", (PATHCONFMODGen_1!=null?PATHCONFMODGen_1.getText():null), PATHCONFMODGen_1.getCharPositionInLine(), PATHCONFMODGen_1.getLine());
              			templateA52ReturnNode.getChildren().add(PATHCONFMODGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_10 != null) {
              			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_10!=null?TK_10.getText():null), TK_10.getCharPositionInLine(), TK_10.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_10Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_11 != null) {
              			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_11!=null?TK_11.getText():null), TK_11.getCharPositionInLine(), TK_11.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_11Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_12 != null) {
              			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_12!=null?TK_12.getText():null), TK_12.getCharPositionInLine(), TK_12.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_12Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_13 != null) {
              			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_13!=null?TK_13.getText():null), TK_13.getCharPositionInLine(), TK_13.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_13Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_14 != null) {
              			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_14!=null?TK_14.getText():null), TK_14.getCharPositionInLine(), TK_14.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_14Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_15 != null) {
              			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_15!=null?TK_15.getText():null), TK_15.getCharPositionInLine(), TK_15.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_15Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_16 != null) {
              			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_16!=null?TK_16.getText():null), TK_16.getCharPositionInLine(), TK_16.getLine());
              	 		templateA52ReturnNode.getChildren().add(TK_16Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = templateA52ReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "templateA52"

    public static class doc_id_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "doc_id"
    // GrammarShellForMancoosi.g:12758:1: doc_id returns [Node returnNode] : (PATHDOCIDGen= PATHDOCID | pathGen+= path | idGen+= id );
    public final GrammarShellForMancoosiParser.doc_id_return doc_id() throws RecognitionException {
        GrammarShellForMancoosiParser.doc_id_return retval = new GrammarShellForMancoosiParser.doc_id_return();
        retval.start = input.LT(1);

        Token PATHDOCIDGen=null;
        List list_pathGen=null;
        List list_idGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12759:1: (PATHDOCIDGen= PATHDOCID | pathGen+= path | idGen+= id )
            int alt514=3;
            switch ( input.LA(1) ) {
            case ID:
            case 80:
            case 81:
            case 82:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 103:
            case 107:
            case 108:
            case 110:
            case 111:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 139:
            case 142:
            case 143:
            case 144:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 177:
            case 178:
            case 179:
            case 181:
            case 182:
            case 183:
            case 185:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
                {
                alt514=3;
                }
                break;
            case PATHDOCID:
                {
                int LA514_2 = input.LA(2);

                if ( (synpred568_GrammarShellForMancoosi()) ) {
                    alt514=1;
                }
                else if ( (synpred569_GrammarShellForMancoosi()) ) {
                    alt514=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 514, 2, input);

                    throw nvae;
                }
                }
                break;
            case PATHNULL:
            case PATHEMACSINST:
            case PATHEMACSREM:
            case PATHGCONFSCH:
            case PATHOLDSCHEMA:
            case PATHCOMPYTH:
            case PATHMIME:
            case PATHSUID:
            case PATHSS:
            case PATHP:
            case PATHXWINDOW:
            case PATHXMANAGER:
            case PATHCONFMOD:
            case PATHPACK:
            case PATHKVERS:
            case PATHSCRIPT:
            case PATHREL:
            case PATH:
                {
                alt514=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 514, 0, input);

                throw nvae;
            }

            switch (alt514) {
                case 1 :
                    // GrammarShellForMancoosi.g:12759:4: PATHDOCIDGen= PATHDOCID
                    {
                    PATHDOCIDGen=(Token)match(input,PATHDOCID,FOLLOW_PATHDOCID_in_doc_id13549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		doc_idReturnNode.setKind("doc_id");
                      	    // Create a CST Leaf
                      		if(PATHDOCIDGen != null) {
                      			Leaf PATHDOCIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHDOCID", (PATHDOCIDGen!=null?PATHDOCIDGen.getText():null), PATHDOCIDGen.getCharPositionInLine(), PATHDOCIDGen.getLine());
                      			doc_idReturnNode.getChildren().add(PATHDOCIDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = doc_idReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12772:5: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_doc_id13561);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		doc_idReturnNode.setKind("doc_id");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	doc_idReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = doc_idReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:12790:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_doc_id13573);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		doc_idReturnNode.setKind("doc_id");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	doc_idReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = doc_idReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doc_id"

    public static class pack_path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "pack_path"
    // GrammarShellForMancoosi.g:12810:1: pack_path returns [Node returnNode] : PATHPACKGen= PATHPACK ;
    public final GrammarShellForMancoosiParser.pack_path_return pack_path() throws RecognitionException {
        GrammarShellForMancoosiParser.pack_path_return retval = new GrammarShellForMancoosiParser.pack_path_return();
        retval.start = input.LT(1);

        Token PATHPACKGen=null;

        try {
            // GrammarShellForMancoosi.g:12811:1: (PATHPACKGen= PATHPACK )
            // GrammarShellForMancoosi.g:12811:4: PATHPACKGen= PATHPACK
            {
            PATHPACKGen=(Token)match(input,PATHPACK,FOLLOW_PATHPACK_in_pack_path13595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node pack_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pack_pathReturnNode.setKind("pack_path");
              	    // Create a CST Leaf
              		if(PATHPACKGen != null) {
              			Leaf PATHPACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHPACK", (PATHPACKGen!=null?PATHPACKGen.getText():null), PATHPACKGen.getCharPositionInLine(), PATHPACKGen.getLine());
              			pack_pathReturnNode.getChildren().add(PATHPACKGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pack_pathReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pack_path"

    public static class pack_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "pack"
    // GrammarShellForMancoosi.g:12826:1: pack returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.pack_return pack() throws RecognitionException {
        GrammarShellForMancoosiParser.pack_return retval = new GrammarShellForMancoosiParser.pack_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12827:1: (idGen+= id )
            // GrammarShellForMancoosi.g:12827:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_pack13617);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node packReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packReturnNode.setKind("pack");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	packReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pack"

    public static class schemas_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "schemas"
    // GrammarShellForMancoosi.g:12847:1: schemas returns [Node returnNode] : (wordGen+= word | pathGen+= path );
    public final GrammarShellForMancoosiParser.schemas_return schemas() throws RecognitionException {
        GrammarShellForMancoosiParser.schemas_return retval = new GrammarShellForMancoosiParser.schemas_return();
        retval.start = input.LT(1);

        List list_wordGen=null;
        List list_pathGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope pathGen = null;
        try {
            // GrammarShellForMancoosi.g:12848:1: (wordGen+= word | pathGen+= path )
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==UNDERSCORE||(LA515_0>=VAR && LA515_0<=ID)||(LA515_0>=80 && LA515_0<=82)||LA515_0==85||(LA515_0>=87 && LA515_0<=93)||(LA515_0>=95 && LA515_0<=101)||LA515_0==103||LA515_0==105||(LA515_0>=107 && LA515_0<=108)||(LA515_0>=110 && LA515_0<=112)||(LA515_0>=114 && LA515_0<=119)||(LA515_0>=121 && LA515_0<=144)||(LA515_0>=146 && LA515_0<=159)||(LA515_0>=161 && LA515_0<=175)||(LA515_0>=177 && LA515_0<=188)||(LA515_0>=190 && LA515_0<=195)||(LA515_0>=201 && LA515_0<=207)) ) {
                alt515=1;
            }
            else if ( (LA515_0==PATHNULL||(LA515_0>=PATHEMACSINST && LA515_0<=PATHEMACSREM)||(LA515_0>=PATHGCONFSCH && LA515_0<=PATHOLDSCHEMA)||LA515_0==PATHCOMPYTH||(LA515_0>=PATHMIME && LA515_0<=PATHSUID)||LA515_0==PATHSS||LA515_0==PATHP||(LA515_0>=PATHXWINDOW && LA515_0<=PATHSCRIPT)||(LA515_0>=PATHREL && LA515_0<=PATH)) ) {
                alt515=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 515, 0, input);

                throw nvae;
            }
            switch (alt515) {
                case 1 :
                    // GrammarShellForMancoosi.g:12848:4: wordGen+= word
                    {
                    pushFollow(FOLLOW_word_in_schemas13639);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node schemasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		schemasReturnNode.setKind("schemas");
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	schemasReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = schemasReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12866:5: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_schemas13651);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node schemasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		schemasReturnNode.setKind("schemas");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	schemasReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = schemasReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "schemas"

    public static class dirlist_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "dirlist"
    // GrammarShellForMancoosi.g:12886:1: dirlist returns [Node returnNode] : pathGen+= path ;
    public final GrammarShellForMancoosiParser.dirlist_return dirlist() throws RecognitionException {
        GrammarShellForMancoosiParser.dirlist_return retval = new GrammarShellForMancoosiParser.dirlist_return();
        retval.start = input.LT(1);

        List list_pathGen=null;
        RuleReturnScope pathGen = null;
        try {
            // GrammarShellForMancoosi.g:12887:1: (pathGen+= path )
            // GrammarShellForMancoosi.g:12887:4: pathGen+= path
            {
            pushFollow(FOLLOW_path_in_dirlist13673);
            pathGen=path();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pathGen==null) list_pathGen=new ArrayList();
            list_pathGen.add(pathGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node dirlistReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		dirlistReturnNode.setKind("dirlist");
              	    // Create a CST Node
              		if(list_pathGen != null) {
              	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("path");
              	            	dirlistReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = dirlistReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dirlist"

    public static class file_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "file"
    // GrammarShellForMancoosi.g:12907:1: file returns [Node returnNode] : (pathGen+= path | idGen+= id );
    public final GrammarShellForMancoosiParser.file_return file() throws RecognitionException {
        GrammarShellForMancoosiParser.file_return retval = new GrammarShellForMancoosiParser.file_return();
        retval.start = input.LT(1);

        List list_pathGen=null;
        List list_idGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12908:1: (pathGen+= path | idGen+= id )
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==PATHNULL||(LA516_0>=PATHEMACSINST && LA516_0<=PATHEMACSREM)||(LA516_0>=PATHGCONFSCH && LA516_0<=PATHOLDSCHEMA)||LA516_0==PATHCOMPYTH||(LA516_0>=PATHMIME && LA516_0<=PATHSUID)||LA516_0==PATHSS||LA516_0==PATHP||(LA516_0>=PATHXWINDOW && LA516_0<=PATHSCRIPT)||(LA516_0>=PATHREL && LA516_0<=PATH)) ) {
                alt516=1;
            }
            else if ( (LA516_0==ID||(LA516_0>=80 && LA516_0<=82)||LA516_0==85||(LA516_0>=87 && LA516_0<=93)||(LA516_0>=95 && LA516_0<=100)||LA516_0==103||(LA516_0>=107 && LA516_0<=108)||(LA516_0>=110 && LA516_0<=112)||(LA516_0>=114 && LA516_0<=119)||(LA516_0>=121 && LA516_0<=122)||(LA516_0>=124 && LA516_0<=126)||(LA516_0>=128 && LA516_0<=137)||LA516_0==139||(LA516_0>=142 && LA516_0<=144)||(LA516_0>=147 && LA516_0<=159)||(LA516_0>=161 && LA516_0<=175)||(LA516_0>=177 && LA516_0<=179)||(LA516_0>=181 && LA516_0<=183)||LA516_0==185||(LA516_0>=190 && LA516_0<=195)||(LA516_0>=201 && LA516_0<=207)) ) {
                alt516=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 516, 0, input);

                throw nvae;
            }
            switch (alt516) {
                case 1 :
                    // GrammarShellForMancoosi.g:12908:4: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_file13695);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node fileReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		fileReturnNode.setKind("file");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	fileReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = fileReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:12926:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_file13707);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node fileReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		fileReturnNode.setKind("file");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	fileReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = fileReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "file"

    public static class old_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "old"
    // GrammarShellForMancoosi.g:12946:1: old returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.old_return old() throws RecognitionException {
        GrammarShellForMancoosiParser.old_return retval = new GrammarShellForMancoosiParser.old_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12947:1: (idGen+= id )
            // GrammarShellForMancoosi.g:12947:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_old13729);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node oldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		oldReturnNode.setKind("old");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	oldReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = oldReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "old"

    public static class rule_placeholder_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "rule_placeholder"
    // GrammarShellForMancoosi.g:12967:1: rule_placeholder returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.rule_placeholder_return rule_placeholder() throws RecognitionException {
        GrammarShellForMancoosiParser.rule_placeholder_return retval = new GrammarShellForMancoosiParser.rule_placeholder_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12968:1: (idGen+= id )
            // GrammarShellForMancoosi.g:12968:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_rule_placeholder13751);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node rule_placeholderReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		rule_placeholderReturnNode.setKind("rule_placeholder");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	rule_placeholderReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = rule_placeholderReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_placeholder"

    public static class kvers_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "kvers"
    // GrammarShellForMancoosi.g:12988:1: kvers returns [Node returnNode] : (NUMBERGen= NUMBER | idGen+= id );
    public final GrammarShellForMancoosiParser.kvers_return kvers() throws RecognitionException {
        GrammarShellForMancoosiParser.kvers_return retval = new GrammarShellForMancoosiParser.kvers_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;
        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:12989:1: (NUMBERGen= NUMBER | idGen+= id )
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==NUMBER) ) {
                alt517=1;
            }
            else if ( (LA517_0==ID||(LA517_0>=80 && LA517_0<=82)||LA517_0==85||(LA517_0>=87 && LA517_0<=93)||(LA517_0>=95 && LA517_0<=100)||LA517_0==103||(LA517_0>=107 && LA517_0<=108)||(LA517_0>=110 && LA517_0<=112)||(LA517_0>=114 && LA517_0<=119)||(LA517_0>=121 && LA517_0<=122)||(LA517_0>=124 && LA517_0<=126)||(LA517_0>=128 && LA517_0<=137)||LA517_0==139||(LA517_0>=142 && LA517_0<=144)||(LA517_0>=147 && LA517_0<=159)||(LA517_0>=161 && LA517_0<=175)||(LA517_0>=177 && LA517_0<=179)||(LA517_0>=181 && LA517_0<=183)||LA517_0==185||(LA517_0>=190 && LA517_0<=195)||(LA517_0>=201 && LA517_0<=207)) ) {
                alt517=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 517, 0, input);

                throw nvae;
            }
            switch (alt517) {
                case 1 :
                    // GrammarShellForMancoosi.g:12989:4: NUMBERGen= NUMBER
                    {
                    NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_kvers13773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node kversReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		kversReturnNode.setKind("kvers");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			kversReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = kversReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13002:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_kvers13785);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node kversReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		kversReturnNode.setKind("kvers");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	kversReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = kversReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "kvers"

    public static class kvers_path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "kvers_path"
    // GrammarShellForMancoosi.g:13022:1: kvers_path returns [Node returnNode] : PATHKVERSGen= PATHKVERS ;
    public final GrammarShellForMancoosiParser.kvers_path_return kvers_path() throws RecognitionException {
        GrammarShellForMancoosiParser.kvers_path_return retval = new GrammarShellForMancoosiParser.kvers_path_return();
        retval.start = input.LT(1);

        Token PATHKVERSGen=null;

        try {
            // GrammarShellForMancoosi.g:13023:1: (PATHKVERSGen= PATHKVERS )
            // GrammarShellForMancoosi.g:13023:4: PATHKVERSGen= PATHKVERS
            {
            PATHKVERSGen=(Token)match(input,PATHKVERS,FOLLOW_PATHKVERS_in_kvers_path13807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node kvers_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		kvers_pathReturnNode.setKind("kvers_path");
              	    // Create a CST Leaf
              		if(PATHKVERSGen != null) {
              			Leaf PATHKVERSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHKVERS", (PATHKVERSGen!=null?PATHKVERSGen.getText():null), PATHKVERSGen.getCharPositionInLine(), PATHKVERSGen.getLine());
              			kvers_pathReturnNode.getChildren().add(PATHKVERSGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = kvers_pathReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "kvers_path"

    public static class pyver_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "pyver"
    // GrammarShellForMancoosi.g:13038:1: pyver returns [Node returnNode] : NUMBERGen= NUMBER ;
    public final GrammarShellForMancoosiParser.pyver_return pyver() throws RecognitionException {
        GrammarShellForMancoosiParser.pyver_return retval = new GrammarShellForMancoosiParser.pyver_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;

        try {
            // GrammarShellForMancoosi.g:13039:1: (NUMBERGen= NUMBER )
            // GrammarShellForMancoosi.g:13039:4: NUMBERGen= NUMBER
            {
            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_pyver13829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node pyverReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pyverReturnNode.setKind("pyver");
              	    // Create a CST Leaf
              		if(NUMBERGen != null) {
              			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
              			pyverReturnNode.getChildren().add(NUMBERGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pyverReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pyver"

    public static class wm_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "wm"
    // GrammarShellForMancoosi.g:13054:1: wm returns [Node returnNode] : wordGen+= word ;
    public final GrammarShellForMancoosiParser.wm_return wm() throws RecognitionException {
        GrammarShellForMancoosiParser.wm_return retval = new GrammarShellForMancoosiParser.wm_return();
        retval.start = input.LT(1);

        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        try {
            // GrammarShellForMancoosi.g:13055:1: (wordGen+= word )
            // GrammarShellForMancoosi.g:13055:4: wordGen+= word
            {
            pushFollow(FOLLOW_word_in_wm13851);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node wmReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		wmReturnNode.setKind("wm");
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	wmReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = wmReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wm"

    public static class priority_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "priority"
    // GrammarShellForMancoosi.g:13075:1: priority returns [Node returnNode] : paramGen+= param ;
    public final GrammarShellForMancoosiParser.priority_return priority() throws RecognitionException {
        GrammarShellForMancoosiParser.priority_return retval = new GrammarShellForMancoosiParser.priority_return();
        retval.start = input.LT(1);

        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:13076:1: (paramGen+= param )
            // GrammarShellForMancoosi.g:13076:4: paramGen+= param
            {
            pushFollow(FOLLOW_param_in_priority13873);
            paramGen=param();

            state._fsp--;
            if (state.failed) return retval;
            if (list_paramGen==null) list_paramGen=new ArrayList();
            list_paramGen.add(paramGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node priorityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		priorityReturnNode.setKind("priority");
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	priorityReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = priorityReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "priority"

    public static class wmman_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "wmman"
    // GrammarShellForMancoosi.g:13096:1: wmman returns [Node returnNode] : paramGen+= param ;
    public final GrammarShellForMancoosiParser.wmman_return wmman() throws RecognitionException {
        GrammarShellForMancoosiParser.wmman_return retval = new GrammarShellForMancoosiParser.wmman_return();
        retval.start = input.LT(1);

        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:13097:1: (paramGen+= param )
            // GrammarShellForMancoosi.g:13097:4: paramGen+= param
            {
            pushFollow(FOLLOW_param_in_wmman13895);
            paramGen=param();

            state._fsp--;
            if (state.failed) return retval;
            if (list_paramGen==null) list_paramGen=new ArrayList();
            list_paramGen.add(paramGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node wmmanReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		wmmanReturnNode.setKind("wmman");
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	wmmanReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = wmmanReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wmman"

    public static class cmds_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "cmds"
    // GrammarShellForMancoosi.g:13117:1: cmds returns [Node returnNode] : (statementGen+= statement )+ ;
    public final GrammarShellForMancoosiParser.cmds_return cmds() throws RecognitionException {
        GrammarShellForMancoosiParser.cmds_return retval = new GrammarShellForMancoosiParser.cmds_return();
        retval.start = input.LT(1);

        List list_statementGen=null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:13118:1: ( (statementGen+= statement )+ )
            // GrammarShellForMancoosi.g:13118:4: (statementGen+= statement )+
            {
            // GrammarShellForMancoosi.g:13118:16: (statementGen+= statement )+
            int cnt518=0;
            loop518:
            do {
                int alt518=2;
                int LA518_0 = input.LA(1);

                if ( (LA518_0==PATHNULL||(LA518_0>=PATHEMACSINST && LA518_0<=PATHEMACSREM)||(LA518_0>=PATHGCONFSCH && LA518_0<=UNDERSCORE)||LA518_0==PATHCOMPYTH||LA518_0==LGRAF||(LA518_0>=PATHMIME && LA518_0<=LPAR)||(LA518_0>=PATHXWINDOW && LA518_0<=PATHSCRIPT)||(LA518_0>=PATHREL && LA518_0<=ID)||(LA518_0>=79 && LA518_0<=82)||LA518_0==85||(LA518_0>=87 && LA518_0<=93)||(LA518_0>=95 && LA518_0<=103)||LA518_0==105||(LA518_0>=107 && LA518_0<=108)||(LA518_0>=110 && LA518_0<=112)||(LA518_0>=114 && LA518_0<=119)||(LA518_0>=121 && LA518_0<=144)||(LA518_0>=146 && LA518_0<=159)||(LA518_0>=161 && LA518_0<=188)||(LA518_0>=190 && LA518_0<=198)||(LA518_0>=200 && LA518_0<=207)) ) {
                    alt518=1;
                }


                switch (alt518) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_cmds13917);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    if ( cnt518 >= 1 ) break loop518;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(518, input);
                        throw eee;
                }
                cnt518++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node cmdsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		cmdsReturnNode.setKind("cmds");
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	cmdsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = cmdsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cmds"

    public static class initparms_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "initparms"
    // GrammarShellForMancoosi.g:13138:1: initparms returns [Node returnNode] : (option_paramGen+= option_param | wordGen+= word | pathGen+= path | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | NUMBERGen= NUMBER | command_nameGen+= command_name | BSLASHGen= BSLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' );
    public final GrammarShellForMancoosiParser.initparms_return initparms() throws RecognitionException {
        GrammarShellForMancoosiParser.initparms_return retval = new GrammarShellForMancoosiParser.initparms_return();
        retval.start = input.LT(1);

        Token COLONGen=null;
        Token APGen=null;
        Token APGen_1=null;
        Token NUMBERGen=null;
        Token BSLASHGen=null;
        Token PSINGLEGen=null;
        Token TILDEGen=null;
        Token TK_0=null;
        List list_option_paramGen=null;
        List list_wordGen=null;
        List list_pathGen=null;
        List list_nestedCommandGen=null;
        List list_command_nameGen=null;
        RuleReturnScope option_paramGen = null;
        RuleReturnScope wordGen = null;
        RuleReturnScope pathGen = null;
        RuleReturnScope nestedCommandGen = null;
        RuleReturnScope command_nameGen = null;
        try {
            // GrammarShellForMancoosi.g:13139:1: (option_paramGen+= option_param | wordGen+= word | pathGen+= path | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | NUMBERGen= NUMBER | command_nameGen+= command_name | BSLASHGen= BSLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' )
            int alt519=11;
            alt519 = dfa519.predict(input);
            switch (alt519) {
                case 1 :
                    // GrammarShellForMancoosi.g:13139:4: option_paramGen+= option_param
                    {
                    pushFollow(FOLLOW_option_param_in_initparms13940);
                    option_paramGen=option_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_option_paramGen==null) list_option_paramGen=new ArrayList();
                    list_option_paramGen.add(option_paramGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Node
                      		if(list_option_paramGen != null) {
                      	        for(Iterator it = list_option_paramGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.option_param_return r = (GrammarShellForMancoosiParser.option_param_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("option_param");
                      	            	initparmsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13157:5: wordGen+= word
                    {
                    pushFollow(FOLLOW_word_in_initparms13952);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	initparmsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:13175:5: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_initparms13964);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	initparmsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:13193:5: COLONGen= COLON
                    {
                    COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_initparms13976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(COLONGen != null) {
                      			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", (COLONGen!=null?COLONGen.getText():null), COLONGen.getCharPositionInLine(), COLONGen.getLine());
                      			initparmsReturnNode.getChildren().add(COLONGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:13206:5: APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP
                    {
                    APGen=(Token)match(input,AP,FOLLOW_AP_in_initparms13988); if (state.failed) return retval;
                    pushFollow(FOLLOW_nestedCommand_in_initparms13993);
                    nestedCommandGen=nestedCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_nestedCommandGen==null) list_nestedCommandGen=new ArrayList();
                    list_nestedCommandGen.add(nestedCommandGen);

                    APGen_1=(Token)match(input,AP,FOLLOW_AP_in_initparms13998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(APGen != null) {
                      			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
                      			initparmsReturnNode.getChildren().add(APGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nestedCommandGen != null) {
                      	        for(Iterator it = list_nestedCommandGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.nestedCommand_return r = (GrammarShellForMancoosiParser.nestedCommand_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nestedCommand");
                      	            	initparmsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(APGen_1 != null) {
                      			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
                      			initparmsReturnNode.getChildren().add(APGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:13234:5: NUMBERGen= NUMBER
                    {
                    NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_initparms14010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			initparmsReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:13247:5: command_nameGen+= command_name
                    {
                    pushFollow(FOLLOW_command_name_in_initparms14022);
                    command_nameGen=command_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
                    list_command_nameGen.add(command_nameGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Node
                      		if(list_command_nameGen != null) {
                      	        for(Iterator it = list_command_nameGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.command_name_return r = (GrammarShellForMancoosiParser.command_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("command_name");
                      	            	initparmsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:13265:5: BSLASHGen= BSLASH
                    {
                    BSLASHGen=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_initparms14034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(BSLASHGen != null) {
                      			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen!=null?BSLASHGen.getText():null), BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
                      			initparmsReturnNode.getChildren().add(BSLASHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:13278:5: PSINGLEGen= PSINGLE
                    {
                    PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_initparms14046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(PSINGLEGen != null) {
                      			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen!=null?PSINGLEGen.getText():null), PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
                      			initparmsReturnNode.getChildren().add(PSINGLEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:13291:5: TILDEGen= TILDE
                    {
                    TILDEGen=(Token)match(input,TILDE,FOLLOW_TILDE_in_initparms14058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a CST Leaf
                      		if(TILDEGen != null) {
                      			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", (TILDEGen!=null?TILDEGen.getText():null), TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
                      			initparmsReturnNode.getChildren().add(TILDEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:13304:5: TK_0= '*'
                    {
                    TK_0=(Token)match(input,166,FOLLOW_166_in_initparms14070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initparmsReturnNode.setKind("initparms");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		initparmsReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initparmsReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "initparms"

    public static class centralcat_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "centralcat"
    // GrammarShellForMancoosi.g:13319:1: centralcat returns [Node returnNode] : (pathGen+= path | idGen+= id | varGen+= var );
    public final GrammarShellForMancoosiParser.centralcat_return centralcat() throws RecognitionException {
        GrammarShellForMancoosiParser.centralcat_return retval = new GrammarShellForMancoosiParser.centralcat_return();
        retval.start = input.LT(1);

        List list_pathGen=null;
        List list_idGen=null;
        List list_varGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope idGen = null;
        RuleReturnScope varGen = null;
        try {
            // GrammarShellForMancoosi.g:13320:1: (pathGen+= path | idGen+= id | varGen+= var )
            int alt520=3;
            switch ( input.LA(1) ) {
            case PATHNULL:
            case PATHEMACSINST:
            case PATHEMACSREM:
            case PATHGCONFSCH:
            case PATHOLDSCHEMA:
            case PATHCOMPYTH:
            case PATHMIME:
            case PATHSUID:
            case PATHSS:
            case PATHP:
            case PATHXWINDOW:
            case PATHXMANAGER:
            case PATHCONFMOD:
            case PATHDOCID:
            case PATHPACK:
            case PATHKVERS:
            case PATHSCRIPT:
            case PATHREL:
            case PATH:
                {
                alt520=1;
                }
                break;
            case ID:
            case 80:
            case 81:
            case 82:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 103:
            case 107:
            case 108:
            case 110:
            case 111:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 139:
            case 142:
            case 143:
            case 144:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 177:
            case 178:
            case 179:
            case 181:
            case 182:
            case 183:
            case 185:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
                {
                alt520=2;
                }
                break;
            case VAR:
            case 101:
            case 105:
            case 123:
            case 127:
            case 138:
            case 140:
            case 141:
            case 180:
            case 184:
            case 186:
            case 187:
            case 188:
                {
                alt520=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 520, 0, input);

                throw nvae;
            }

            switch (alt520) {
                case 1 :
                    // GrammarShellForMancoosi.g:13320:4: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_centralcat14092);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		centralcatReturnNode.setKind("centralcat");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	centralcatReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = centralcatReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13338:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_centralcat14104);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		centralcatReturnNode.setKind("centralcat");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	centralcatReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = centralcatReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:13356:5: varGen+= var
                    {
                    pushFollow(FOLLOW_var_in_centralcat14116);
                    varGen=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_varGen==null) list_varGen=new ArrayList();
                    list_varGen.add(varGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		centralcatReturnNode.setKind("centralcat");
                      	    // Create a CST Node
                      		if(list_varGen != null) {
                      	        for(Iterator it = list_varGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.var_return r = (GrammarShellForMancoosiParser.var_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("var");
                      	            	centralcatReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = centralcatReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "centralcat"

    public static class ordcats_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ordcats"
    // GrammarShellForMancoosi.g:13376:1: ordcats returns [Node returnNode] : paramGen+= param ;
    public final GrammarShellForMancoosiParser.ordcats_return ordcats() throws RecognitionException {
        GrammarShellForMancoosiParser.ordcats_return retval = new GrammarShellForMancoosiParser.ordcats_return();
        retval.start = input.LT(1);

        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:13377:1: (paramGen+= param )
            // GrammarShellForMancoosi.g:13377:4: paramGen+= param
            {
            pushFollow(FOLLOW_param_in_ordcats14138);
            paramGen=param();

            state._fsp--;
            if (state.failed) return retval;
            if (list_paramGen==null) list_paramGen=new ArrayList();
            list_paramGen.add(paramGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node ordcatsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		ordcatsReturnNode.setKind("ordcats");
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	ordcatsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = ordcatsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ordcats"

    public static class script_path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "script_path"
    // GrammarShellForMancoosi.g:13397:1: script_path returns [Node returnNode] : PATHSCRIPTGen= PATHSCRIPT ;
    public final GrammarShellForMancoosiParser.script_path_return script_path() throws RecognitionException {
        GrammarShellForMancoosiParser.script_path_return retval = new GrammarShellForMancoosiParser.script_path_return();
        retval.start = input.LT(1);

        Token PATHSCRIPTGen=null;

        try {
            // GrammarShellForMancoosi.g:13398:1: (PATHSCRIPTGen= PATHSCRIPT )
            // GrammarShellForMancoosi.g:13398:4: PATHSCRIPTGen= PATHSCRIPT
            {
            PATHSCRIPTGen=(Token)match(input,PATHSCRIPT,FOLLOW_PATHSCRIPT_in_script_path14160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node script_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		script_pathReturnNode.setKind("script_path");
              	    // Create a CST Leaf
              		if(PATHSCRIPTGen != null) {
              			Leaf PATHSCRIPTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSCRIPT", (PATHSCRIPTGen!=null?PATHSCRIPTGen.getText():null), PATHSCRIPTGen.getCharPositionInLine(), PATHSCRIPTGen.getLine());
              			script_pathReturnNode.getChildren().add(PATHSCRIPTGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = script_pathReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "script_path"

    public static class script_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "script"
    // GrammarShellForMancoosi.g:13413:1: script returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.script_return script() throws RecognitionException {
        GrammarShellForMancoosiParser.script_return retval = new GrammarShellForMancoosiParser.script_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:13414:1: (idGen+= id )
            // GrammarShellForMancoosi.g:13414:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_script14182);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node scriptReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		scriptReturnNode.setKind("script");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	scriptReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = scriptReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "script"

    public static class error_handler_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "error_handler"
    // GrammarShellForMancoosi.g:13434:1: error_handler returns [Node returnNode] : simple_commandGen+= simple_command ;
    public final GrammarShellForMancoosiParser.error_handler_return error_handler() throws RecognitionException {
        GrammarShellForMancoosiParser.error_handler_return retval = new GrammarShellForMancoosiParser.error_handler_return();
        retval.start = input.LT(1);

        List list_simple_commandGen=null;
        RuleReturnScope simple_commandGen = null;
        try {
            // GrammarShellForMancoosi.g:13435:1: (simple_commandGen+= simple_command )
            // GrammarShellForMancoosi.g:13435:4: simple_commandGen+= simple_command
            {
            pushFollow(FOLLOW_simple_command_in_error_handler14205);
            simple_commandGen=simple_command();

            state._fsp--;
            if (state.failed) return retval;
            if (list_simple_commandGen==null) list_simple_commandGen=new ArrayList();
            list_simple_commandGen.add(simple_commandGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node error_handlerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		error_handlerReturnNode.setKind("error_handler");
              	    // Create a CST Node
              		if(list_simple_commandGen != null) {
              	        for(Iterator it = list_simple_commandGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.simple_command_return r = (GrammarShellForMancoosiParser.simple_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simple_command");
              	            	error_handlerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = error_handlerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "error_handler"

    public static class owner_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "owner"
    // GrammarShellForMancoosi.g:13455:1: owner returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.owner_return owner() throws RecognitionException {
        GrammarShellForMancoosiParser.owner_return retval = new GrammarShellForMancoosiParser.owner_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:13456:1: (idGen+= id )
            // GrammarShellForMancoosi.g:13456:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_owner14227);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node ownerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		ownerReturnNode.setKind("owner");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	ownerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = ownerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "owner"

    public static class perms_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "perms"
    // GrammarShellForMancoosi.g:13476:1: perms returns [Node returnNode] : (NUMBERGen= NUMBER | idGen+= id );
    public final GrammarShellForMancoosiParser.perms_return perms() throws RecognitionException {
        GrammarShellForMancoosiParser.perms_return retval = new GrammarShellForMancoosiParser.perms_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;
        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:13477:1: (NUMBERGen= NUMBER | idGen+= id )
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==NUMBER) ) {
                alt521=1;
            }
            else if ( (LA521_0==ID||(LA521_0>=80 && LA521_0<=82)||LA521_0==85||(LA521_0>=87 && LA521_0<=93)||(LA521_0>=95 && LA521_0<=100)||LA521_0==103||(LA521_0>=107 && LA521_0<=108)||(LA521_0>=110 && LA521_0<=112)||(LA521_0>=114 && LA521_0<=119)||(LA521_0>=121 && LA521_0<=122)||(LA521_0>=124 && LA521_0<=126)||(LA521_0>=128 && LA521_0<=137)||LA521_0==139||(LA521_0>=142 && LA521_0<=144)||(LA521_0>=147 && LA521_0<=159)||(LA521_0>=161 && LA521_0<=175)||(LA521_0>=177 && LA521_0<=179)||(LA521_0>=181 && LA521_0<=183)||LA521_0==185||(LA521_0>=190 && LA521_0<=195)||(LA521_0>=201 && LA521_0<=207)) ) {
                alt521=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 521, 0, input);

                throw nvae;
            }
            switch (alt521) {
                case 1 :
                    // GrammarShellForMancoosi.g:13477:4: NUMBERGen= NUMBER
                    {
                    NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_perms14249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node permsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		permsReturnNode.setKind("perms");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			permsReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = permsReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13490:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_perms14261);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node permsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		permsReturnNode.setKind("perms");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	permsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = permsReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "perms"

    public static class group_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "group"
    // GrammarShellForMancoosi.g:13510:1: group returns [Node returnNode] : idGen+= id ;
    public final GrammarShellForMancoosiParser.group_return group() throws RecognitionException {
        GrammarShellForMancoosiParser.group_return retval = new GrammarShellForMancoosiParser.group_return();
        retval.start = input.LT(1);

        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:13511:1: (idGen+= id )
            // GrammarShellForMancoosi.g:13511:4: idGen+= id
            {
            pushFollow(FOLLOW_id_in_group14283);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		groupReturnNode.setKind("group");
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	groupReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = groupReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "group"

    public static class function_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "function_statement"
    // GrammarShellForMancoosi.g:13531:1: function_statement returns [Node returnNode] : (TK_0= 'function' (TK_1= '\\n' )? idGen+= id (TK_2= '\\n' )? statement_groupGen+= statement_group | idGen+= id LPARGen= LPAR RPARGen= RPAR (TK_0= '\\n' )? statement_groupGen+= statement_group );
    public final GrammarShellForMancoosiParser.function_statement_return function_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.function_statement_return retval = new GrammarShellForMancoosiParser.function_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token LPARGen=null;
        Token RPARGen=null;
        List list_idGen=null;
        List list_statement_groupGen=null;
        RuleReturnScope idGen = null;
        RuleReturnScope statement_groupGen = null;
        try {
            // GrammarShellForMancoosi.g:13532:1: (TK_0= 'function' (TK_1= '\\n' )? idGen+= id (TK_2= '\\n' )? statement_groupGen+= statement_group | idGen+= id LPARGen= LPAR RPARGen= RPAR (TK_0= '\\n' )? statement_groupGen+= statement_group )
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==196) ) {
                alt525=1;
            }
            else if ( (LA525_0==ID||(LA525_0>=80 && LA525_0<=82)||LA525_0==85||(LA525_0>=87 && LA525_0<=93)||(LA525_0>=95 && LA525_0<=100)||LA525_0==103||(LA525_0>=107 && LA525_0<=108)||(LA525_0>=110 && LA525_0<=112)||(LA525_0>=114 && LA525_0<=119)||(LA525_0>=121 && LA525_0<=122)||(LA525_0>=124 && LA525_0<=126)||(LA525_0>=128 && LA525_0<=137)||LA525_0==139||(LA525_0>=142 && LA525_0<=144)||(LA525_0>=147 && LA525_0<=159)||(LA525_0>=161 && LA525_0<=175)||(LA525_0>=177 && LA525_0<=179)||(LA525_0>=181 && LA525_0<=183)||LA525_0==185||(LA525_0>=190 && LA525_0<=195)||(LA525_0>=201 && LA525_0<=207)) ) {
                alt525=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 525, 0, input);

                throw nvae;
            }
            switch (alt525) {
                case 1 :
                    // GrammarShellForMancoosi.g:13532:4: TK_0= 'function' (TK_1= '\\n' )? idGen+= id (TK_2= '\\n' )? statement_groupGen+= statement_group
                    {
                    TK_0=(Token)match(input,196,FOLLOW_196_in_function_statement14305); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13532:20: (TK_1= '\\n' )?
                    int alt522=2;
                    int LA522_0 = input.LA(1);

                    if ( (LA522_0==78) ) {
                        alt522=1;
                    }
                    switch (alt522) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13532:22: TK_1= '\\n'
                            {
                            TK_1=(Token)match(input,78,FOLLOW_78_in_function_statement14311); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_id_in_function_statement14318);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    // GrammarShellForMancoosi.g:13532:45: (TK_2= '\\n' )?
                    int alt523=2;
                    int LA523_0 = input.LA(1);

                    if ( (LA523_0==78) ) {
                        alt523=1;
                    }
                    switch (alt523) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13532:47: TK_2= '\\n'
                            {
                            TK_2=(Token)match(input,78,FOLLOW_78_in_function_statement14324); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_group_in_function_statement14331);
                    statement_groupGen=statement_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statement_groupGen==null) list_statement_groupGen=new ArrayList();
                    list_statement_groupGen.add(statement_groupGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node function_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_statementReturnNode.setKind("function_statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		function_statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		function_statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	function_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		function_statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statement_groupGen != null) {
                      	        for(Iterator it = list_statement_groupGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.statement_group_return r = (GrammarShellForMancoosiParser.statement_group_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement_group");
                      	            	function_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13575:5: idGen+= id LPARGen= LPAR RPARGen= RPAR (TK_0= '\\n' )? statement_groupGen+= statement_group
                    {
                    pushFollow(FOLLOW_id_in_function_statement14343);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    LPARGen=(Token)match(input,LPAR,FOLLOW_LPAR_in_function_statement14348); if (state.failed) return retval;
                    RPARGen=(Token)match(input,RPAR,FOLLOW_RPAR_in_function_statement14353); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13575:43: (TK_0= '\\n' )?
                    int alt524=2;
                    int LA524_0 = input.LA(1);

                    if ( (LA524_0==78) ) {
                        alt524=1;
                    }
                    switch (alt524) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13575:45: TK_0= '\\n'
                            {
                            TK_0=(Token)match(input,78,FOLLOW_78_in_function_statement14359); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_group_in_function_statement14366);
                    statement_groupGen=statement_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statement_groupGen==null) list_statement_groupGen=new ArrayList();
                    list_statement_groupGen.add(statement_groupGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node function_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		function_statementReturnNode.setKind("function_statement");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	function_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(LPARGen != null) {
                      			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", (LPARGen!=null?LPARGen.getText():null), LPARGen.getCharPositionInLine(), LPARGen.getLine());
                      			function_statementReturnNode.getChildren().add(LPARGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(RPARGen != null) {
                      			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", (RPARGen!=null?RPARGen.getText():null), RPARGen.getCharPositionInLine(), RPARGen.getLine());
                      			function_statementReturnNode.getChildren().add(RPARGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		function_statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statement_groupGen != null) {
                      	        for(Iterator it = list_statement_groupGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.statement_group_return r = (GrammarShellForMancoosiParser.statement_group_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement_group");
                      	            	function_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = function_statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_statement"

    public static class redirection_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "redirection_statement"
    // GrammarShellForMancoosi.g:13620:1: redirection_statement returns [Node returnNode] : statement_groupGen+= statement_group redirectionGen+= redirection (TK_0= '\\n' | TK_1= ';' ) ;
    public final GrammarShellForMancoosiParser.redirection_statement_return redirection_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.redirection_statement_return retval = new GrammarShellForMancoosiParser.redirection_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_statement_groupGen=null;
        List list_redirectionGen=null;
        RuleReturnScope statement_groupGen = null;
        RuleReturnScope redirectionGen = null;
        try {
            // GrammarShellForMancoosi.g:13621:1: (statement_groupGen+= statement_group redirectionGen+= redirection (TK_0= '\\n' | TK_1= ';' ) )
            // GrammarShellForMancoosi.g:13621:4: statement_groupGen+= statement_group redirectionGen+= redirection (TK_0= '\\n' | TK_1= ';' )
            {
            pushFollow(FOLLOW_statement_group_in_redirection_statement14388);
            statement_groupGen=statement_group();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statement_groupGen==null) list_statement_groupGen=new ArrayList();
            list_statement_groupGen.add(statement_groupGen);

            pushFollow(FOLLOW_redirection_in_redirection_statement14393);
            redirectionGen=redirection();

            state._fsp--;
            if (state.failed) return retval;
            if (list_redirectionGen==null) list_redirectionGen=new ArrayList();
            list_redirectionGen.add(redirectionGen);

            // GrammarShellForMancoosi.g:13621:69: (TK_0= '\\n' | TK_1= ';' )
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==78) ) {
                alt526=1;
            }
            else if ( (LA526_0==83) ) {
                alt526=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 526, 0, input);

                throw nvae;
            }
            switch (alt526) {
                case 1 :
                    // GrammarShellForMancoosi.g:13621:71: TK_0= '\\n'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_redirection_statement14399); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13621:84: TK_1= ';'
                    {
                    TK_1=(Token)match(input,83,FOLLOW_83_in_redirection_statement14406); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node redirection_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		redirection_statementReturnNode.setKind("redirection_statement");
              	    // Create a CST Node
              		if(list_statement_groupGen != null) {
              	        for(Iterator it = list_statement_groupGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_group_return r = (GrammarShellForMancoosiParser.statement_group_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement_group");
              	            	redirection_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_redirectionGen != null) {
              	        for(Iterator it = list_redirectionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.redirection_return r = (GrammarShellForMancoosiParser.redirection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("redirection");
              	            	redirection_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		redirection_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		redirection_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = redirection_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection_statement"

    public static class redirection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "redirection"
    // GrammarShellForMancoosi.g:13661:1: redirection returns [Node returnNode] : ( (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var ) | LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS ) | NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | GREATANDGen= GREATAND );
    public final GrammarShellForMancoosiParser.redirection_return redirection() throws RecognitionException {
        GrammarShellForMancoosiParser.redirection_return retval = new GrammarShellForMancoosiParser.redirection_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;
        Token GREATGen=null;
        Token DLESSGen=null;
        Token LESSGen=null;
        Token DGREATGen=null;
        Token LESSANDGen=null;
        Token DLESSDASHGen=null;
        Token LESSGREATGen=null;
        Token GREATANDGen=null;
        Token ANDGREATGen=null;
        Token CLOBBERGen=null;
        Token MINUSGen=null;
        Token NUMBERGen_1=null;
        List list_pathGen=null;
        List list_wordGen=null;
        List list_varGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope wordGen = null;
        RuleReturnScope varGen = null;
        try {
            // GrammarShellForMancoosi.g:13662:1: ( (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var ) | LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS ) | NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | GREATANDGen= GREATAND )
            int alt534=5;
            alt534 = dfa534.predict(input);
            switch (alt534) {
                case 1 :
                    // GrammarShellForMancoosi.g:13662:4: (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var )
                    {
                    // GrammarShellForMancoosi.g:13662:13: (NUMBERGen= NUMBER )?
                    int alt527=2;
                    int LA527_0 = input.LA(1);

                    if ( (LA527_0==NUMBER) ) {
                        alt527=1;
                    }
                    switch (alt527) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: NUMBERGen= NUMBER
                            {
                            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14429); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:13662:22: (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER )
                    int alt528=10;
                    alt528 = dfa528.predict(input);
                    switch (alt528) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13662:24: GREATGen= GREAT
                            {
                            GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_redirection14436); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13662:42: DLESSGen= DLESS
                            {
                            DLESSGen=(Token)match(input,DLESS,FOLLOW_DLESS_in_redirection14443); if (state.failed) return retval;

                            }
                            break;
                        case 3 :
                            // GrammarShellForMancoosi.g:13662:60: LESSGen= LESS
                            {
                            LESSGen=(Token)match(input,LESS,FOLLOW_LESS_in_redirection14450); if (state.failed) return retval;

                            }
                            break;
                        case 4 :
                            // GrammarShellForMancoosi.g:13662:76: DGREATGen= DGREAT
                            {
                            DGREATGen=(Token)match(input,DGREAT,FOLLOW_DGREAT_in_redirection14457); if (state.failed) return retval;

                            }
                            break;
                        case 5 :
                            // GrammarShellForMancoosi.g:13662:96: LESSANDGen= LESSAND
                            {
                            LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_redirection14464); if (state.failed) return retval;

                            }
                            break;
                        case 6 :
                            // GrammarShellForMancoosi.g:13662:118: DLESSDASHGen= DLESSDASH
                            {
                            DLESSDASHGen=(Token)match(input,DLESSDASH,FOLLOW_DLESSDASH_in_redirection14471); if (state.failed) return retval;

                            }
                            break;
                        case 7 :
                            // GrammarShellForMancoosi.g:13662:144: LESSGREATGen= LESSGREAT
                            {
                            LESSGREATGen=(Token)match(input,LESSGREAT,FOLLOW_LESSGREAT_in_redirection14478); if (state.failed) return retval;

                            }
                            break;
                        case 8 :
                            // GrammarShellForMancoosi.g:13663:7: GREATANDGen= GREATAND
                            {
                            GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_redirection14488); if (state.failed) return retval;

                            }
                            break;
                        case 9 :
                            // GrammarShellForMancoosi.g:13663:31: ANDGREATGen= ANDGREAT
                            {
                            ANDGREATGen=(Token)match(input,ANDGREAT,FOLLOW_ANDGREAT_in_redirection14495); if (state.failed) return retval;

                            }
                            break;
                        case 10 :
                            // GrammarShellForMancoosi.g:13663:55: CLOBBERGen= CLOBBER
                            {
                            CLOBBERGen=(Token)match(input,CLOBBER,FOLLOW_CLOBBER_in_redirection14502); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:13663:75: (pathGen+= path | wordGen+= word | varGen+= var )
                    int alt529=3;
                    switch ( input.LA(1) ) {
                    case UNDERSCORE:
                    case VARINPUT:
                    case VARQMARK:
                    case VARDOLLAR:
                    case VAREXCL:
                    case VARSTAR:
                    case VARAT:
                    case VARHOME:
                    case VARPATH:
                    case VARPS:
                    case ID:
                    case 80:
                    case 81:
                    case 82:
                    case 85:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 103:
                    case 107:
                    case 108:
                    case 110:
                    case 111:
                    case 112:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 121:
                    case 122:
                    case 124:
                    case 125:
                    case 126:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 139:
                    case 142:
                    case 143:
                    case 144:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 177:
                    case 178:
                    case 179:
                    case 181:
                    case 182:
                    case 183:
                    case 185:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                        {
                        alt529=2;
                        }
                        break;
                    case PATHNULL:
                    case PATHEMACSINST:
                    case PATHEMACSREM:
                    case PATHGCONFSCH:
                    case PATHOLDSCHEMA:
                    case PATHCOMPYTH:
                    case PATHMIME:
                    case PATHSUID:
                    case PATHSS:
                    case PATHP:
                    case PATHXWINDOW:
                    case PATHXMANAGER:
                    case PATHCONFMOD:
                    case PATHDOCID:
                    case PATHPACK:
                    case PATHKVERS:
                    case PATHSCRIPT:
                    case PATHREL:
                    case PATH:
                        {
                        alt529=1;
                        }
                        break;
                    case VAR:
                    case 101:
                    case 105:
                    case 123:
                    case 127:
                    case 138:
                    case 140:
                    case 141:
                    case 180:
                    case 184:
                    case 186:
                    case 187:
                    case 188:
                        {
                        int LA529_3 = input.LA(2);

                        if ( (synpred603_GrammarShellForMancoosi()) ) {
                            alt529=2;
                        }
                        else if ( (true) ) {
                            alt529=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 529, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 529, 0, input);

                        throw nvae;
                    }

                    switch (alt529) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13663:78: pathGen+= path
                            {
                            pushFollow(FOLLOW_path_in_redirection14510);
                            pathGen=path();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_pathGen==null) list_pathGen=new ArrayList();
                            list_pathGen.add(pathGen);


                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13663:95: wordGen+= word
                            {
                            pushFollow(FOLLOW_word_in_redirection14517);
                            wordGen=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_wordGen==null) list_wordGen=new ArrayList();
                            list_wordGen.add(wordGen);


                            }
                            break;
                        case 3 :
                            // GrammarShellForMancoosi.g:13663:112: varGen+= var
                            {
                            pushFollow(FOLLOW_var_in_redirection14524);
                            varGen=var();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_varGen==null) list_varGen=new ArrayList();
                            list_varGen.add(varGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		redirectionReturnNode.setKind("redirection");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GREATGen != null) {
                      			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", (GREATGen!=null?GREATGen.getText():null), GREATGen.getCharPositionInLine(), GREATGen.getLine());
                      			redirectionReturnNode.getChildren().add(GREATGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(DLESSGen != null) {
                      			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", (DLESSGen!=null?DLESSGen.getText():null), DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
                      			redirectionReturnNode.getChildren().add(DLESSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LESSGen != null) {
                      			Leaf LESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESS", (LESSGen!=null?LESSGen.getText():null), LESSGen.getCharPositionInLine(), LESSGen.getLine());
                      			redirectionReturnNode.getChildren().add(LESSGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(DGREATGen != null) {
                      			Leaf DGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DGREAT", (DGREATGen!=null?DGREATGen.getText():null), DGREATGen.getCharPositionInLine(), DGREATGen.getLine());
                      			redirectionReturnNode.getChildren().add(DGREATGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LESSANDGen != null) {
                      			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", (LESSANDGen!=null?LESSANDGen.getText():null), LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(DLESSDASHGen != null) {
                      			Leaf DLESSDASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESSDASH", (DLESSDASHGen!=null?DLESSDASHGen.getText():null), DLESSDASHGen.getCharPositionInLine(), DLESSDASHGen.getLine());
                      			redirectionReturnNode.getChildren().add(DLESSDASHGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LESSGREATGen != null) {
                      			Leaf LESSGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSGREAT", (LESSGREATGen!=null?LESSGREATGen.getText():null), LESSGREATGen.getCharPositionInLine(), LESSGREATGen.getLine());
                      			redirectionReturnNode.getChildren().add(LESSGREATGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GREATANDGen != null) {
                      			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ANDGREATGen != null) {
                      			Leaf ANDGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ANDGREAT", (ANDGREATGen!=null?ANDGREATGen.getText():null), ANDGREATGen.getCharPositionInLine(), ANDGREATGen.getLine());
                      			redirectionReturnNode.getChildren().add(ANDGREATGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(CLOBBERGen != null) {
                      			Leaf CLOBBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CLOBBER", (CLOBBERGen!=null?CLOBBERGen.getText():null), CLOBBERGen.getCharPositionInLine(), CLOBBERGen.getLine());
                      			redirectionReturnNode.getChildren().add(CLOBBERGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	redirectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	redirectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_varGen != null) {
                      	        for(Iterator it = list_varGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.var_return r = (GrammarShellForMancoosiParser.var_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("var");
                      	            	redirectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = redirectionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13756:5: LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS )
                    {
                    LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_redirection14537); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13756:24: (NUMBERGen= NUMBER | MINUSGen= MINUS )
                    int alt530=2;
                    int LA530_0 = input.LA(1);

                    if ( (LA530_0==NUMBER) ) {
                        alt530=1;
                    }
                    else if ( (LA530_0==MINUS) ) {
                        alt530=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 530, 0, input);

                        throw nvae;
                    }
                    switch (alt530) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13756:26: NUMBERGen= NUMBER
                            {
                            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14543); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13756:46: MINUSGen= MINUS
                            {
                            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_redirection14550); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		redirectionReturnNode.setKind("redirection");
                      	    // Create a CST Leaf
                      		if(LESSANDGen != null) {
                      			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", (LESSANDGen!=null?LESSANDGen.getText():null), LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
                      			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = redirectionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:13779:5: NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
                    {
                    NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14563); if (state.failed) return retval;
                    LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_redirection14568); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13779:42: (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
                    int alt531=2;
                    int LA531_0 = input.LA(1);

                    if ( (LA531_0==NUMBER) ) {
                        alt531=1;
                    }
                    else if ( (LA531_0==MINUS) ) {
                        alt531=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 531, 0, input);

                        throw nvae;
                    }
                    switch (alt531) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13779:44: NUMBERGen_1= NUMBER
                            {
                            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14574); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13779:66: MINUSGen= MINUS
                            {
                            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_redirection14581); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		redirectionReturnNode.setKind("redirection");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(LESSANDGen != null) {
                      			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", (LESSANDGen!=null?LESSANDGen.getText():null), LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen_1 != null) {
                      			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
                      			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = redirectionReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:13807:5: (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
                    {
                    // GrammarShellForMancoosi.g:13807:14: (NUMBERGen= NUMBER )?
                    int alt532=2;
                    int LA532_0 = input.LA(1);

                    if ( (LA532_0==NUMBER) ) {
                        alt532=1;
                    }
                    switch (alt532) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: NUMBERGen= NUMBER
                            {
                            NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14594); if (state.failed) return retval;

                            }
                            break;

                    }

                    GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_redirection14600); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13807:45: (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
                    int alt533=2;
                    int LA533_0 = input.LA(1);

                    if ( (LA533_0==NUMBER) ) {
                        alt533=1;
                    }
                    else if ( (LA533_0==MINUS) ) {
                        alt533=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 533, 0, input);

                        throw nvae;
                    }
                    switch (alt533) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13807:47: NUMBERGen_1= NUMBER
                            {
                            NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_redirection14606); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13807:69: MINUSGen= MINUS
                            {
                            MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_redirection14613); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		redirectionReturnNode.setKind("redirection");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(GREATANDGen != null) {
                      			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NUMBERGen_1 != null) {
                      			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen_1!=null?NUMBERGen_1.getText():null), NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
                      			redirectionReturnNode.getChildren().add(NUMBERGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
                      			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = redirectionReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:13835:5: GREATANDGen= GREATAND
                    {
                    GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_redirection14627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		redirectionReturnNode.setKind("redirection");
                      	    // Create a CST Leaf
                      		if(GREATANDGen != null) {
                      			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", (GREATANDGen!=null?GREATANDGen.getText():null), GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
                      			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = redirectionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection"

    public static class statement_group_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement_group"
    // GrammarShellForMancoosi.g:13850:1: statement_group returns [Node returnNode] : (LPARGen= LPAR (TK_0= '\\n' )? (statementGen+= statement )* RPARGen= RPAR (TK_1= '\\n' | TK_2= ';' ) | LGRAFGen= LGRAF (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= ';' )? RGRAFGen= RGRAF (TK_2= '\\n' | TK_3= ';' ) );
    public final GrammarShellForMancoosiParser.statement_group_return statement_group() throws RecognitionException {
        GrammarShellForMancoosiParser.statement_group_return retval = new GrammarShellForMancoosiParser.statement_group_return();
        retval.start = input.LT(1);

        Token LPARGen=null;
        Token TK_0=null;
        Token RPARGen=null;
        Token TK_1=null;
        Token TK_2=null;
        Token LGRAFGen=null;
        Token RGRAFGen=null;
        Token TK_3=null;
        List list_statementGen=null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:13851:1: (LPARGen= LPAR (TK_0= '\\n' )? (statementGen+= statement )* RPARGen= RPAR (TK_1= '\\n' | TK_2= ';' ) | LGRAFGen= LGRAF (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= ';' )? RGRAFGen= RGRAF (TK_2= '\\n' | TK_3= ';' ) )
            int alt542=2;
            int LA542_0 = input.LA(1);

            if ( (LA542_0==LPAR) ) {
                alt542=1;
            }
            else if ( (LA542_0==LGRAF) ) {
                alt542=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 542, 0, input);

                throw nvae;
            }
            switch (alt542) {
                case 1 :
                    // GrammarShellForMancoosi.g:13851:4: LPARGen= LPAR (TK_0= '\\n' )? (statementGen+= statement )* RPARGen= RPAR (TK_1= '\\n' | TK_2= ';' )
                    {
                    LPARGen=(Token)match(input,LPAR,FOLLOW_LPAR_in_statement_group14650); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13851:17: (TK_0= '\\n' )?
                    int alt535=2;
                    int LA535_0 = input.LA(1);

                    if ( (LA535_0==78) ) {
                        alt535=1;
                    }
                    switch (alt535) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13851:19: TK_0= '\\n'
                            {
                            TK_0=(Token)match(input,78,FOLLOW_78_in_statement_group14656); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:13851:44: (statementGen+= statement )*
                    loop536:
                    do {
                        int alt536=2;
                        int LA536_0 = input.LA(1);

                        if ( (LA536_0==PATHNULL||(LA536_0>=PATHEMACSINST && LA536_0<=PATHEMACSREM)||(LA536_0>=PATHGCONFSCH && LA536_0<=UNDERSCORE)||LA536_0==PATHCOMPYTH||LA536_0==LGRAF||(LA536_0>=PATHMIME && LA536_0<=LPAR)||(LA536_0>=PATHXWINDOW && LA536_0<=PATHSCRIPT)||(LA536_0>=PATHREL && LA536_0<=ID)||(LA536_0>=79 && LA536_0<=82)||LA536_0==85||(LA536_0>=87 && LA536_0<=93)||(LA536_0>=95 && LA536_0<=103)||LA536_0==105||(LA536_0>=107 && LA536_0<=108)||(LA536_0>=110 && LA536_0<=112)||(LA536_0>=114 && LA536_0<=119)||(LA536_0>=121 && LA536_0<=144)||(LA536_0>=146 && LA536_0<=159)||(LA536_0>=161 && LA536_0<=188)||(LA536_0>=190 && LA536_0<=198)||(LA536_0>=200 && LA536_0<=207)) ) {
                            alt536=1;
                        }


                        switch (alt536) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
                    	    {
                    	    pushFollow(FOLLOW_statement_in_statement_group14663);
                    	    statementGen=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_statementGen==null) list_statementGen=new ArrayList();
                    	    list_statementGen.add(statementGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop536;
                        }
                    } while (true);

                    RPARGen=(Token)match(input,RPAR,FOLLOW_RPAR_in_statement_group14669); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13851:71: (TK_1= '\\n' | TK_2= ';' )
                    int alt537=2;
                    int LA537_0 = input.LA(1);

                    if ( (LA537_0==78) ) {
                        alt537=1;
                    }
                    else if ( (LA537_0==83) ) {
                        alt537=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 537, 0, input);

                        throw nvae;
                    }
                    switch (alt537) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13851:73: TK_1= '\\n'
                            {
                            TK_1=(Token)match(input,78,FOLLOW_78_in_statement_group14675); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13851:86: TK_2= ';'
                            {
                            TK_2=(Token)match(input,83,FOLLOW_83_in_statement_group14682); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statement_groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statement_groupReturnNode.setKind("statement_group");
                      	    // Create a CST Leaf
                      		if(LPARGen != null) {
                      			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", (LPARGen!=null?LPARGen.getText():null), LPARGen.getCharPositionInLine(), LPARGen.getLine());
                      			statement_groupReturnNode.getChildren().add(LPARGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statement_groupReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(RPARGen != null) {
                      			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", (RPARGen!=null?RPARGen.getText():null), RPARGen.getCharPositionInLine(), RPARGen.getLine());
                      			statement_groupReturnNode.getChildren().add(RPARGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statement_groupReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13894:5: LGRAFGen= LGRAF (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= ';' )? RGRAFGen= RGRAF (TK_2= '\\n' | TK_3= ';' )
                    {
                    LGRAFGen=(Token)match(input,LGRAF,FOLLOW_LGRAF_in_statement_group14695); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13894:20: (TK_0= '\\n' )?
                    int alt538=2;
                    int LA538_0 = input.LA(1);

                    if ( (LA538_0==78) ) {
                        alt538=1;
                    }
                    switch (alt538) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13894:22: TK_0= '\\n'
                            {
                            TK_0=(Token)match(input,78,FOLLOW_78_in_statement_group14701); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:13894:47: (statementGen+= statement )*
                    loop539:
                    do {
                        int alt539=2;
                        int LA539_0 = input.LA(1);

                        if ( (LA539_0==PATHNULL||(LA539_0>=PATHEMACSINST && LA539_0<=PATHEMACSREM)||(LA539_0>=PATHGCONFSCH && LA539_0<=UNDERSCORE)||LA539_0==PATHCOMPYTH||LA539_0==LGRAF||(LA539_0>=PATHMIME && LA539_0<=LPAR)||(LA539_0>=PATHXWINDOW && LA539_0<=PATHSCRIPT)||(LA539_0>=PATHREL && LA539_0<=ID)||(LA539_0>=79 && LA539_0<=82)||LA539_0==85||(LA539_0>=87 && LA539_0<=93)||(LA539_0>=95 && LA539_0<=103)||LA539_0==105||(LA539_0>=107 && LA539_0<=108)||(LA539_0>=110 && LA539_0<=112)||(LA539_0>=114 && LA539_0<=119)||(LA539_0>=121 && LA539_0<=144)||(LA539_0>=146 && LA539_0<=159)||(LA539_0>=161 && LA539_0<=188)||(LA539_0>=190 && LA539_0<=198)||(LA539_0>=200 && LA539_0<=207)) ) {
                            alt539=1;
                        }


                        switch (alt539) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
                    	    {
                    	    pushFollow(FOLLOW_statement_in_statement_group14708);
                    	    statementGen=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_statementGen==null) list_statementGen=new ArrayList();
                    	    list_statementGen.add(statementGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop539;
                        }
                    } while (true);

                    // GrammarShellForMancoosi.g:13894:60: (TK_1= ';' )?
                    int alt540=2;
                    int LA540_0 = input.LA(1);

                    if ( (LA540_0==83) ) {
                        alt540=1;
                    }
                    switch (alt540) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13894:62: TK_1= ';'
                            {
                            TK_1=(Token)match(input,83,FOLLOW_83_in_statement_group14715); if (state.failed) return retval;

                            }
                            break;

                    }

                    RGRAFGen=(Token)match(input,RGRAF,FOLLOW_RGRAF_in_statement_group14722); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:13894:89: (TK_2= '\\n' | TK_3= ';' )
                    int alt541=2;
                    int LA541_0 = input.LA(1);

                    if ( (LA541_0==78) ) {
                        alt541=1;
                    }
                    else if ( (LA541_0==83) ) {
                        alt541=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 541, 0, input);

                        throw nvae;
                    }
                    switch (alt541) {
                        case 1 :
                            // GrammarShellForMancoosi.g:13894:91: TK_2= '\\n'
                            {
                            TK_2=(Token)match(input,78,FOLLOW_78_in_statement_group14728); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:13894:104: TK_3= ';'
                            {
                            TK_3=(Token)match(input,83,FOLLOW_83_in_statement_group14735); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statement_groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statement_groupReturnNode.setKind("statement_group");
                      	    // Create a CST Leaf
                      		if(LGRAFGen != null) {
                      			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", (LGRAFGen!=null?LGRAFGen.getText():null), LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
                      			statement_groupReturnNode.getChildren().add(LGRAFGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statement_groupReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(RGRAFGen != null) {
                      			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", (RGRAFGen!=null?RGRAFGen.getText():null), RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
                      			statement_groupReturnNode.getChildren().add(RGRAFGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
                      	 		statement_groupReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statement_groupReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement_group"

    public static class command_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "command_statement"
    // GrammarShellForMancoosi.g:13945:1: command_statement returns [Node returnNode] : list_of_commandsGen+= list_of_commands (TK_0= '\\n' | TK_1= ';' ) ;
    public final GrammarShellForMancoosiParser.command_statement_return command_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.command_statement_return retval = new GrammarShellForMancoosiParser.command_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_list_of_commandsGen=null;
        RuleReturnScope list_of_commandsGen = null;
        try {
            // GrammarShellForMancoosi.g:13946:1: (list_of_commandsGen+= list_of_commands (TK_0= '\\n' | TK_1= ';' ) )
            // GrammarShellForMancoosi.g:13946:4: list_of_commandsGen+= list_of_commands (TK_0= '\\n' | TK_1= ';' )
            {
            pushFollow(FOLLOW_list_of_commands_in_command_statement14760);
            list_of_commandsGen=list_of_commands();

            state._fsp--;
            if (state.failed) return retval;
            if (list_list_of_commandsGen==null) list_list_of_commandsGen=new ArrayList();
            list_list_of_commandsGen.add(list_of_commandsGen);

            // GrammarShellForMancoosi.g:13946:42: (TK_0= '\\n' | TK_1= ';' )
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( (LA543_0==78) ) {
                alt543=1;
            }
            else if ( (LA543_0==83) ) {
                alt543=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 543, 0, input);

                throw nvae;
            }
            switch (alt543) {
                case 1 :
                    // GrammarShellForMancoosi.g:13946:44: TK_0= '\\n'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_command_statement14766); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13946:57: TK_1= ';'
                    {
                    TK_1=(Token)match(input,83,FOLLOW_83_in_command_statement14773); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node command_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		command_statementReturnNode.setKind("command_statement");
              	    // Create a CST Node
              		if(list_list_of_commandsGen != null) {
              	        for(Iterator it = list_list_of_commandsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.list_of_commands_return r = (GrammarShellForMancoosiParser.list_of_commands_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("list_of_commands");
              	            	command_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		command_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		command_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = command_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_statement"

    public static class command_name_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "command_name"
    // GrammarShellForMancoosi.g:13976:1: command_name returns [Node returnNode] : (wordGen+= word | pathGen+= path | DOTGen= DOT | COLONGen= COLON );
    public final GrammarShellForMancoosiParser.command_name_return command_name() throws RecognitionException {
        GrammarShellForMancoosiParser.command_name_return retval = new GrammarShellForMancoosiParser.command_name_return();
        retval.start = input.LT(1);

        Token DOTGen=null;
        Token COLONGen=null;
        List list_wordGen=null;
        List list_pathGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope pathGen = null;
        try {
            // GrammarShellForMancoosi.g:13977:1: (wordGen+= word | pathGen+= path | DOTGen= DOT | COLONGen= COLON )
            int alt544=4;
            switch ( input.LA(1) ) {
            case UNDERSCORE:
            case VAR:
            case VARINPUT:
            case VARQMARK:
            case VARDOLLAR:
            case VAREXCL:
            case VARSTAR:
            case VARAT:
            case VARHOME:
            case VARPATH:
            case VARPS:
            case ID:
            case 80:
            case 81:
            case 82:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 110:
            case 111:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
                {
                alt544=1;
                }
                break;
            case PATHNULL:
            case PATHEMACSINST:
            case PATHEMACSREM:
            case PATHGCONFSCH:
            case PATHOLDSCHEMA:
            case PATHCOMPYTH:
            case PATHMIME:
            case PATHSUID:
            case PATHSS:
            case PATHP:
            case PATHXWINDOW:
            case PATHXMANAGER:
            case PATHCONFMOD:
            case PATHDOCID:
            case PATHPACK:
            case PATHKVERS:
            case PATHSCRIPT:
            case PATHREL:
            case PATH:
                {
                alt544=2;
                }
                break;
            case DOT:
                {
                alt544=3;
                }
                break;
            case COLON:
                {
                alt544=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 544, 0, input);

                throw nvae;
            }

            switch (alt544) {
                case 1 :
                    // GrammarShellForMancoosi.g:13977:4: wordGen+= word
                    {
                    pushFollow(FOLLOW_word_in_command_name14798);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		command_nameReturnNode.setKind("command_name");
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	command_nameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = command_nameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:13995:5: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_command_name14810);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		command_nameReturnNode.setKind("command_name");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	command_nameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = command_nameReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:14013:5: DOTGen= DOT
                    {
                    DOTGen=(Token)match(input,DOT,FOLLOW_DOT_in_command_name14822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		command_nameReturnNode.setKind("command_name");
                      	    // Create a CST Leaf
                      		if(DOTGen != null) {
                      			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", (DOTGen!=null?DOTGen.getText():null), DOTGen.getCharPositionInLine(), DOTGen.getLine());
                      			command_nameReturnNode.getChildren().add(DOTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = command_nameReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:14026:5: COLONGen= COLON
                    {
                    COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_command_name14834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		command_nameReturnNode.setKind("command_name");
                      	    // Create a CST Leaf
                      		if(COLONGen != null) {
                      			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", (COLONGen!=null?COLONGen.getText():null), COLONGen.getCharPositionInLine(), COLONGen.getLine());
                      			command_nameReturnNode.getChildren().add(COLONGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = command_nameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_name"

    public static class nestedCommand_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "nestedCommand"
    // GrammarShellForMancoosi.g:14041:1: nestedCommand returns [Node returnNode] : command_nameGen+= command_name (paramGen+= param )* ;
    public final GrammarShellForMancoosiParser.nestedCommand_return nestedCommand() throws RecognitionException {
        GrammarShellForMancoosiParser.nestedCommand_return retval = new GrammarShellForMancoosiParser.nestedCommand_return();
        retval.start = input.LT(1);

        List list_command_nameGen=null;
        List list_paramGen=null;
        RuleReturnScope command_nameGen = null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:14042:1: (command_nameGen+= command_name (paramGen+= param )* )
            // GrammarShellForMancoosi.g:14042:4: command_nameGen+= command_name (paramGen+= param )*
            {
            pushFollow(FOLLOW_command_name_in_nestedCommand14856);
            command_nameGen=command_name();

            state._fsp--;
            if (state.failed) return retval;
            if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
            list_command_nameGen.add(command_nameGen);

            // GrammarShellForMancoosi.g:14042:43: (paramGen+= param )*
            loop545:
            do {
                int alt545=2;
                int LA545_0 = input.LA(1);

                if ( (LA545_0==AP) ) {
                    int LA545_1 = input.LA(2);

                    if ( (synpred624_GrammarShellForMancoosi()) ) {
                        alt545=1;
                    }


                }
                else if ( ((LA545_0>=GREAT && LA545_0<=MINUS)||(LA545_0>=PATHEMACSINST && LA545_0<=UNDERSCORE)||LA545_0==PATHCOMPYTH||(LA545_0>=PSINGLE && LA545_0<=BSLASH)||(LA545_0>=PATHMIME && LA545_0<=PATHP)||(LA545_0>=DLESS && LA545_0<=CLOBBER)||(LA545_0>=PATHREL && LA545_0<=ID)||(LA545_0>=80 && LA545_0<=82)||LA545_0==85||(LA545_0>=87 && LA545_0<=93)||(LA545_0>=95 && LA545_0<=101)||LA545_0==103||LA545_0==105||(LA545_0>=107 && LA545_0<=108)||(LA545_0>=110 && LA545_0<=112)||(LA545_0>=114 && LA545_0<=119)||(LA545_0>=121 && LA545_0<=144)||(LA545_0>=146 && LA545_0<=159)||(LA545_0>=161 && LA545_0<=175)||(LA545_0>=177 && LA545_0<=188)||(LA545_0>=190 && LA545_0<=195)||(LA545_0>=201 && LA545_0<=207)) ) {
                    alt545=1;
                }


                switch (alt545) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: paramGen+= param
            	    {
            	    pushFollow(FOLLOW_param_in_nestedCommand14861);
            	    paramGen=param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_paramGen==null) list_paramGen=new ArrayList();
            	    list_paramGen.add(paramGen);


            	    }
            	    break;

            	default :
            	    break loop545;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node nestedCommandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nestedCommandReturnNode.setKind("nestedCommand");
              	    // Create a CST Node
              		if(list_command_nameGen != null) {
              	        for(Iterator it = list_command_nameGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.command_name_return r = (GrammarShellForMancoosiParser.command_name_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("command_name");
              	            	nestedCommandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	nestedCommandReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nestedCommandReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nestedCommand"

    public static class control_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "control_statement"
    // GrammarShellForMancoosi.g:14072:1: control_statement returns [Node returnNode] : (if_statementGen+= if_statement | case_statementGen+= case_statement );
    public final GrammarShellForMancoosiParser.control_statement_return control_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.control_statement_return retval = new GrammarShellForMancoosiParser.control_statement_return();
        retval.start = input.LT(1);

        List list_if_statementGen=null;
        List list_case_statementGen=null;
        RuleReturnScope if_statementGen = null;
        RuleReturnScope case_statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14073:1: (if_statementGen+= if_statement | case_statementGen+= case_statement )
            int alt546=2;
            int LA546_0 = input.LA(1);

            if ( (LA546_0==79) ) {
                alt546=1;
            }
            else if ( (LA546_0==198) ) {
                alt546=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 546, 0, input);

                throw nvae;
            }
            switch (alt546) {
                case 1 :
                    // GrammarShellForMancoosi.g:14073:4: if_statementGen+= if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_control_statement14885);
                    if_statementGen=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_if_statementGen==null) list_if_statementGen=new ArrayList();
                    list_if_statementGen.add(if_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node control_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		control_statementReturnNode.setKind("control_statement");
                      	    // Create a CST Node
                      		if(list_if_statementGen != null) {
                      	        for(Iterator it = list_if_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.if_statement_return r = (GrammarShellForMancoosiParser.if_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("if_statement");
                      	            	control_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = control_statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14091:5: case_statementGen+= case_statement
                    {
                    pushFollow(FOLLOW_case_statement_in_control_statement14897);
                    case_statementGen=case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_case_statementGen==null) list_case_statementGen=new ArrayList();
                    list_case_statementGen.add(case_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node control_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		control_statementReturnNode.setKind("control_statement");
                      	    // Create a CST Node
                      		if(list_case_statementGen != null) {
                      	        for(Iterator it = list_case_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.case_statement_return r = (GrammarShellForMancoosiParser.case_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("case_statement");
                      	            	control_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = control_statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "loop_statement"
    // GrammarShellForMancoosi.g:14111:1: loop_statement returns [Node returnNode] : (for_statementGen+= for_statement | until_statementGen+= until_statement | while_statementGen+= while_statement );
    public final GrammarShellForMancoosiParser.loop_statement_return loop_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.loop_statement_return retval = new GrammarShellForMancoosiParser.loop_statement_return();
        retval.start = input.LT(1);

        List list_for_statementGen=null;
        List list_until_statementGen=null;
        List list_while_statementGen=null;
        RuleReturnScope for_statementGen = null;
        RuleReturnScope until_statementGen = null;
        RuleReturnScope while_statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14112:1: (for_statementGen+= for_statement | until_statementGen+= until_statement | while_statementGen+= while_statement )
            int alt547=3;
            switch ( input.LA(1) ) {
            case 102:
                {
                alt547=1;
                }
                break;
            case 197:
                {
                alt547=2;
                }
                break;
            case 176:
                {
                alt547=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 547, 0, input);

                throw nvae;
            }

            switch (alt547) {
                case 1 :
                    // GrammarShellForMancoosi.g:14112:4: for_statementGen+= for_statement
                    {
                    pushFollow(FOLLOW_for_statement_in_loop_statement14922);
                    for_statementGen=for_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_for_statementGen==null) list_for_statementGen=new ArrayList();
                    list_for_statementGen.add(for_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loop_statementReturnNode.setKind("loop_statement");
                      	    // Create a CST Node
                      		if(list_for_statementGen != null) {
                      	        for(Iterator it = list_for_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.for_statement_return r = (GrammarShellForMancoosiParser.for_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("for_statement");
                      	            	loop_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loop_statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14130:5: until_statementGen+= until_statement
                    {
                    pushFollow(FOLLOW_until_statement_in_loop_statement14934);
                    until_statementGen=until_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_until_statementGen==null) list_until_statementGen=new ArrayList();
                    list_until_statementGen.add(until_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loop_statementReturnNode.setKind("loop_statement");
                      	    // Create a CST Node
                      		if(list_until_statementGen != null) {
                      	        for(Iterator it = list_until_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.until_statement_return r = (GrammarShellForMancoosiParser.until_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("until_statement");
                      	            	loop_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loop_statementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:14148:5: while_statementGen+= while_statement
                    {
                    pushFollow(FOLLOW_while_statement_in_loop_statement14946);
                    while_statementGen=while_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_while_statementGen==null) list_while_statementGen=new ArrayList();
                    list_while_statementGen.add(while_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loop_statementReturnNode.setKind("loop_statement");
                      	    // Create a CST Node
                      		if(list_while_statementGen != null) {
                      	        for(Iterator it = list_while_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.while_statement_return r = (GrammarShellForMancoosiParser.while_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("while_statement");
                      	            	loop_statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loop_statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class until_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "until_statement"
    // GrammarShellForMancoosi.g:14168:1: until_statement returns [Node returnNode] : TK_0= 'until' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' ) ;
    public final GrammarShellForMancoosiParser.until_statement_return until_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.until_statement_return retval = new GrammarShellForMancoosiParser.until_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_conditionGen=null;
        List list_statementGen=null;
        RuleReturnScope conditionGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14169:1: (TK_0= 'until' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' ) )
            // GrammarShellForMancoosi.g:14169:4: TK_0= 'until' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' )
            {
            TK_0=(Token)match(input,197,FOLLOW_197_in_until_statement14972); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14169:17: (TK_1= '\\n' )?
            int alt548=2;
            int LA548_0 = input.LA(1);

            if ( (LA548_0==78) ) {
                alt548=1;
            }
            switch (alt548) {
                case 1 :
                    // GrammarShellForMancoosi.g:14169:19: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_until_statement14978); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_condition_in_until_statement14985);
            conditionGen=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionGen==null) list_conditionGen=new ArrayList();
            list_conditionGen.add(conditionGen);

            // GrammarShellForMancoosi.g:14169:56: (TK_2= ';' | TK_3= '\\n' )?
            int alt549=3;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==83) ) {
                alt549=1;
            }
            else if ( (LA549_0==78) ) {
                alt549=2;
            }
            switch (alt549) {
                case 1 :
                    // GrammarShellForMancoosi.g:14169:58: TK_2= ';'
                    {
                    TK_2=(Token)match(input,83,FOLLOW_83_in_until_statement14991); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14169:70: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_until_statement14998); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,106,FOLLOW_106_in_until_statement15005); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14169:93: (TK_5= '\\n' )?
            int alt550=2;
            int LA550_0 = input.LA(1);

            if ( (LA550_0==78) ) {
                alt550=1;
            }
            switch (alt550) {
                case 1 :
                    // GrammarShellForMancoosi.g:14169:95: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_until_statement15011); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14169:120: (statementGen+= statement )*
            loop551:
            do {
                int alt551=2;
                int LA551_0 = input.LA(1);

                if ( (LA551_0==PATHNULL||(LA551_0>=PATHEMACSINST && LA551_0<=PATHEMACSREM)||(LA551_0>=PATHGCONFSCH && LA551_0<=UNDERSCORE)||LA551_0==PATHCOMPYTH||LA551_0==LGRAF||(LA551_0>=PATHMIME && LA551_0<=LPAR)||(LA551_0>=PATHXWINDOW && LA551_0<=PATHSCRIPT)||(LA551_0>=PATHREL && LA551_0<=ID)||(LA551_0>=79 && LA551_0<=82)||LA551_0==85||(LA551_0>=87 && LA551_0<=93)||(LA551_0>=95 && LA551_0<=103)||LA551_0==105||(LA551_0>=107 && LA551_0<=108)||(LA551_0>=110 && LA551_0<=112)||(LA551_0>=114 && LA551_0<=119)||(LA551_0>=121 && LA551_0<=144)||(LA551_0>=146 && LA551_0<=159)||(LA551_0>=161 && LA551_0<=188)||(LA551_0>=190 && LA551_0<=198)||(LA551_0>=200 && LA551_0<=207)) ) {
                    alt551=1;
                }


                switch (alt551) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_until_statement15018);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop551;
                }
            } while (true);

            TK_6=(Token)match(input,109,FOLLOW_109_in_until_statement15024); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14169:146: (TK_7= '\\n' | TK_8= ';' )
            int alt552=2;
            int LA552_0 = input.LA(1);

            if ( (LA552_0==78) ) {
                alt552=1;
            }
            else if ( (LA552_0==83) ) {
                alt552=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 552, 0, input);

                throw nvae;
            }
            switch (alt552) {
                case 1 :
                    // GrammarShellForMancoosi.g:14169:148: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_until_statement15030); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14169:161: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_until_statement15037); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node until_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		until_statementReturnNode.setKind("until_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_conditionGen != null) {
              	        for(Iterator it = list_conditionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.condition_return r = (GrammarShellForMancoosiParser.condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition");
              	            	until_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	until_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		until_statementReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = until_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "until_statement"

    public static class while_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "while_statement"
    // GrammarShellForMancoosi.g:14245:1: while_statement returns [Node returnNode] : TK_0= 'while' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' ) ;
    public final GrammarShellForMancoosiParser.while_statement_return while_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.while_statement_return retval = new GrammarShellForMancoosiParser.while_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_conditionGen=null;
        List list_statementGen=null;
        RuleReturnScope conditionGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14246:1: (TK_0= 'while' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' ) )
            // GrammarShellForMancoosi.g:14246:4: TK_0= 'while' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'do' (TK_5= '\\n' )? (statementGen+= statement )* TK_6= 'done' (TK_7= '\\n' | TK_8= ';' )
            {
            TK_0=(Token)match(input,176,FOLLOW_176_in_while_statement15061); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14246:17: (TK_1= '\\n' )?
            int alt553=2;
            int LA553_0 = input.LA(1);

            if ( (LA553_0==78) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    // GrammarShellForMancoosi.g:14246:19: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_while_statement15067); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_condition_in_while_statement15074);
            conditionGen=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionGen==null) list_conditionGen=new ArrayList();
            list_conditionGen.add(conditionGen);

            // GrammarShellForMancoosi.g:14246:56: (TK_2= ';' | TK_3= '\\n' )?
            int alt554=3;
            int LA554_0 = input.LA(1);

            if ( (LA554_0==83) ) {
                alt554=1;
            }
            else if ( (LA554_0==78) ) {
                alt554=2;
            }
            switch (alt554) {
                case 1 :
                    // GrammarShellForMancoosi.g:14246:58: TK_2= ';'
                    {
                    TK_2=(Token)match(input,83,FOLLOW_83_in_while_statement15080); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14246:70: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_while_statement15087); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,106,FOLLOW_106_in_while_statement15094); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14246:93: (TK_5= '\\n' )?
            int alt555=2;
            int LA555_0 = input.LA(1);

            if ( (LA555_0==78) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    // GrammarShellForMancoosi.g:14246:95: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_while_statement15100); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14246:120: (statementGen+= statement )*
            loop556:
            do {
                int alt556=2;
                int LA556_0 = input.LA(1);

                if ( (LA556_0==PATHNULL||(LA556_0>=PATHEMACSINST && LA556_0<=PATHEMACSREM)||(LA556_0>=PATHGCONFSCH && LA556_0<=UNDERSCORE)||LA556_0==PATHCOMPYTH||LA556_0==LGRAF||(LA556_0>=PATHMIME && LA556_0<=LPAR)||(LA556_0>=PATHXWINDOW && LA556_0<=PATHSCRIPT)||(LA556_0>=PATHREL && LA556_0<=ID)||(LA556_0>=79 && LA556_0<=82)||LA556_0==85||(LA556_0>=87 && LA556_0<=93)||(LA556_0>=95 && LA556_0<=103)||LA556_0==105||(LA556_0>=107 && LA556_0<=108)||(LA556_0>=110 && LA556_0<=112)||(LA556_0>=114 && LA556_0<=119)||(LA556_0>=121 && LA556_0<=144)||(LA556_0>=146 && LA556_0<=159)||(LA556_0>=161 && LA556_0<=188)||(LA556_0>=190 && LA556_0<=198)||(LA556_0>=200 && LA556_0<=207)) ) {
                    alt556=1;
                }


                switch (alt556) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_while_statement15107);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop556;
                }
            } while (true);

            TK_6=(Token)match(input,109,FOLLOW_109_in_while_statement15113); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14246:146: (TK_7= '\\n' | TK_8= ';' )
            int alt557=2;
            int LA557_0 = input.LA(1);

            if ( (LA557_0==78) ) {
                alt557=1;
            }
            else if ( (LA557_0==83) ) {
                alt557=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 557, 0, input);

                throw nvae;
            }
            switch (alt557) {
                case 1 :
                    // GrammarShellForMancoosi.g:14246:148: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_while_statement15119); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14246:161: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_while_statement15126); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node while_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		while_statementReturnNode.setKind("while_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_conditionGen != null) {
              	        for(Iterator it = list_conditionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.condition_return r = (GrammarShellForMancoosiParser.condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition");
              	            	while_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	while_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		while_statementReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = while_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_statement"

    public static class case_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "case_statement"
    // GrammarShellForMancoosi.g:14321:1: case_statement returns [Node returnNode] : TK_0= 'case' (TK_1= '\\n' )? (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? TK_2= 'in' (TK_3= '\\n' )? (body_caseGen+= body_case )+ TK_4= 'esac' (TK_5= '\\n' | TK_6= ';' ) ;
    public final GrammarShellForMancoosiParser.case_statement_return case_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.case_statement_return retval = new GrammarShellForMancoosiParser.case_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        List list_wordGen=null;
        List list_body_caseGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope body_caseGen = null;
        try {
            // GrammarShellForMancoosi.g:14322:1: (TK_0= 'case' (TK_1= '\\n' )? (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? TK_2= 'in' (TK_3= '\\n' )? (body_caseGen+= body_case )+ TK_4= 'esac' (TK_5= '\\n' | TK_6= ';' ) )
            // GrammarShellForMancoosi.g:14322:4: TK_0= 'case' (TK_1= '\\n' )? (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? TK_2= 'in' (TK_3= '\\n' )? (body_caseGen+= body_case )+ TK_4= 'esac' (TK_5= '\\n' | TK_6= ';' )
            {
            TK_0=(Token)match(input,198,FOLLOW_198_in_case_statement15149); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14322:16: (TK_1= '\\n' )?
            int alt558=2;
            int LA558_0 = input.LA(1);

            if ( (LA558_0==78) ) {
                alt558=1;
            }
            switch (alt558) {
                case 1 :
                    // GrammarShellForMancoosi.g:14322:18: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_case_statement15155); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14322:30: (DQUOTEGen= DQUOTE )?
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==DQUOTE) ) {
                alt559=1;
            }
            switch (alt559) {
                case 1 :
                    // GrammarShellForMancoosi.g:14322:32: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_case_statement15163); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_word_in_case_statement15170);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            // GrammarShellForMancoosi.g:14322:66: (DQUOTEGen_1= DQUOTE )?
            int alt560=2;
            int LA560_0 = input.LA(1);

            if ( (LA560_0==DQUOTE) ) {
                alt560=1;
            }
            switch (alt560) {
                case 1 :
                    // GrammarShellForMancoosi.g:14322:68: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_case_statement15176); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,104,FOLLOW_104_in_case_statement15183); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14322:100: (TK_3= '\\n' )?
            int alt561=2;
            int LA561_0 = input.LA(1);

            if ( (LA561_0==78) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    // GrammarShellForMancoosi.g:14322:102: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_case_statement15189); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14322:127: (body_caseGen+= body_case )+
            int cnt562=0;
            loop562:
            do {
                int alt562=2;
                int LA562_0 = input.LA(1);

                if ( (LA562_0==UNDERSCORE||LA562_0==LPAR||(LA562_0>=VAR && LA562_0<=ID)||(LA562_0>=80 && LA562_0<=82)||LA562_0==85||(LA562_0>=87 && LA562_0<=93)||(LA562_0>=95 && LA562_0<=101)||LA562_0==103||LA562_0==105||(LA562_0>=107 && LA562_0<=108)||(LA562_0>=110 && LA562_0<=112)||(LA562_0>=114 && LA562_0<=119)||(LA562_0>=121 && LA562_0<=144)||(LA562_0>=146 && LA562_0<=159)||(LA562_0>=161 && LA562_0<=175)||(LA562_0>=177 && LA562_0<=188)||(LA562_0>=190 && LA562_0<=195)||(LA562_0>=201 && LA562_0<=207)) ) {
                    alt562=1;
                }


                switch (alt562) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: body_caseGen+= body_case
            	    {
            	    pushFollow(FOLLOW_body_case_in_case_statement15196);
            	    body_caseGen=body_case();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_body_caseGen==null) list_body_caseGen=new ArrayList();
            	    list_body_caseGen.add(body_caseGen);


            	    }
            	    break;

            	default :
            	    if ( cnt562 >= 1 ) break loop562;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(562, input);
                        throw eee;
                }
                cnt562++;
            } while (true);

            TK_4=(Token)match(input,199,FOLLOW_199_in_case_statement15202); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14322:153: (TK_5= '\\n' | TK_6= ';' )
            int alt563=2;
            int LA563_0 = input.LA(1);

            if ( (LA563_0==78) ) {
                alt563=1;
            }
            else if ( (LA563_0==83) ) {
                alt563=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 563, 0, input);

                throw nvae;
            }
            switch (alt563) {
                case 1 :
                    // GrammarShellForMancoosi.g:14322:155: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_case_statement15208); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14322:168: TK_6= ';'
                    {
                    TK_6=(Token)match(input,83,FOLLOW_83_in_case_statement15215); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		case_statementReturnNode.setKind("case_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			case_statementReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			case_statementReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_body_caseGen != null) {
              	        for(Iterator it = list_body_caseGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.body_case_return r = (GrammarShellForMancoosiParser.body_case_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("body_case");
              	            	case_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		case_statementReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = case_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_statement"

    public static class body_case_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_case"
    // GrammarShellForMancoosi.g:14397:1: body_case returns [Node returnNode] : case_conditionGen+= case_condition (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= '\\n' )? (DSEMIGen= DSEMI )? (TK_2= '\\n' )? ;
    public final GrammarShellForMancoosiParser.body_case_return body_case() throws RecognitionException {
        GrammarShellForMancoosiParser.body_case_return retval = new GrammarShellForMancoosiParser.body_case_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token DSEMIGen=null;
        Token TK_2=null;
        List list_case_conditionGen=null;
        List list_statementGen=null;
        RuleReturnScope case_conditionGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14398:1: (case_conditionGen+= case_condition (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= '\\n' )? (DSEMIGen= DSEMI )? (TK_2= '\\n' )? )
            // GrammarShellForMancoosi.g:14398:4: case_conditionGen+= case_condition (TK_0= '\\n' )? (statementGen+= statement )* (TK_1= '\\n' )? (DSEMIGen= DSEMI )? (TK_2= '\\n' )?
            {
            pushFollow(FOLLOW_case_condition_in_body_case15239);
            case_conditionGen=case_condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_case_conditionGen==null) list_case_conditionGen=new ArrayList();
            list_case_conditionGen.add(case_conditionGen);

            // GrammarShellForMancoosi.g:14398:38: (TK_0= '\\n' )?
            int alt564=2;
            int LA564_0 = input.LA(1);

            if ( (LA564_0==78) ) {
                int LA564_1 = input.LA(2);

                if ( (synpred646_GrammarShellForMancoosi()) ) {
                    alt564=1;
                }
            }
            switch (alt564) {
                case 1 :
                    // GrammarShellForMancoosi.g:14398:40: TK_0= '\\n'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_body_case15245); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14398:52: (statementGen+= statement )*
            loop565:
            do {
                int alt565=2;
                int LA565_0 = input.LA(1);

                if ( (LA565_0==PATHNULL||(LA565_0>=PATHEMACSINST && LA565_0<=PATHEMACSREM)||(LA565_0>=PATHGCONFSCH && LA565_0<=PATHOLDSCHEMA)||LA565_0==PATHCOMPYTH||LA565_0==LGRAF||(LA565_0>=PATHMIME && LA565_0<=PATHP)||(LA565_0>=PATHXWINDOW && LA565_0<=PATHSCRIPT)||(LA565_0>=PATHREL && LA565_0<=PATH)||LA565_0==79||LA565_0==102||LA565_0==176||(LA565_0>=196 && LA565_0<=198)||LA565_0==200) ) {
                    alt565=1;
                }
                else if ( (LA565_0==UNDERSCORE||LA565_0==LPAR||(LA565_0>=VAR && LA565_0<=ID)||(LA565_0>=80 && LA565_0<=82)||LA565_0==85||(LA565_0>=87 && LA565_0<=93)||(LA565_0>=95 && LA565_0<=101)||LA565_0==103||LA565_0==105||(LA565_0>=107 && LA565_0<=108)||(LA565_0>=110 && LA565_0<=112)||(LA565_0>=114 && LA565_0<=119)||(LA565_0>=121 && LA565_0<=144)||(LA565_0>=146 && LA565_0<=159)||(LA565_0>=161 && LA565_0<=175)||(LA565_0>=177 && LA565_0<=188)||(LA565_0>=190 && LA565_0<=195)||(LA565_0>=201 && LA565_0<=207)) ) {
                    int LA565_3 = input.LA(2);

                    if ( (synpred647_GrammarShellForMancoosi()) ) {
                        alt565=1;
                    }


                }


                switch (alt565) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:14398:54: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_body_case15253);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop565;
                }
            } while (true);

            // GrammarShellForMancoosi.g:14398:80: (TK_1= '\\n' )?
            int alt566=2;
            int LA566_0 = input.LA(1);

            if ( (LA566_0==78) ) {
                int LA566_1 = input.LA(2);

                if ( (synpred648_GrammarShellForMancoosi()) ) {
                    alt566=1;
                }
            }
            switch (alt566) {
                case 1 :
                    // GrammarShellForMancoosi.g:14398:82: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_body_case15261); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14398:103: (DSEMIGen= DSEMI )?
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( (LA567_0==DSEMI) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DSEMIGen= DSEMI
                    {
                    DSEMIGen=(Token)match(input,DSEMI,FOLLOW_DSEMI_in_body_case15268); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14398:111: (TK_2= '\\n' )?
            int alt568=2;
            int LA568_0 = input.LA(1);

            if ( (LA568_0==78) ) {
                alt568=1;
            }
            switch (alt568) {
                case 1 :
                    // GrammarShellForMancoosi.g:14398:113: TK_2= '\\n'
                    {
                    TK_2=(Token)match(input,78,FOLLOW_78_in_body_case15275); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node body_caseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		body_caseReturnNode.setKind("body_case");
              	    // Create a CST Node
              		if(list_case_conditionGen != null) {
              	        for(Iterator it = list_case_conditionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.case_condition_return r = (GrammarShellForMancoosiParser.case_condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("case_condition");
              	            	body_caseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		body_caseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	body_caseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		body_caseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(DSEMIGen != null) {
              			Leaf DSEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DSEMI", (DSEMIGen!=null?DSEMIGen.getText():null), DSEMIGen.getCharPositionInLine(), DSEMIGen.getLine());
              			body_caseReturnNode.getChildren().add(DSEMIGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		body_caseReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = body_caseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_case"

    public static class case_condition_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "case_condition"
    // GrammarShellForMancoosi.g:14448:1: case_condition returns [Node returnNode] : (LPARGen= LPAR )? wordGen+= word (TK_0= '\\n' )? (VBARGen_List+= VBAR wordGen_1+= word )* (TK_1= '\\n' )? RPARGen= RPAR ;
    public final GrammarShellForMancoosiParser.case_condition_return case_condition() throws RecognitionException {
        GrammarShellForMancoosiParser.case_condition_return retval = new GrammarShellForMancoosiParser.case_condition_return();
        retval.start = input.LT(1);

        Token LPARGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token RPARGen=null;
        Token VBARGen_List=null;
        List list_VBARGen_List=null;
        List list_wordGen=null;
        List list_wordGen_1=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope wordGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:14449:1: ( (LPARGen= LPAR )? wordGen+= word (TK_0= '\\n' )? (VBARGen_List+= VBAR wordGen_1+= word )* (TK_1= '\\n' )? RPARGen= RPAR )
            // GrammarShellForMancoosi.g:14449:4: (LPARGen= LPAR )? wordGen+= word (TK_0= '\\n' )? (VBARGen_List+= VBAR wordGen_1+= word )* (TK_1= '\\n' )? RPARGen= RPAR
            {
            // GrammarShellForMancoosi.g:14449:11: (LPARGen= LPAR )?
            int alt569=2;
            int LA569_0 = input.LA(1);

            if ( (LA569_0==LPAR) ) {
                alt569=1;
            }
            switch (alt569) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: LPARGen= LPAR
                    {
                    LPARGen=(Token)match(input,LPAR,FOLLOW_LPAR_in_case_condition15299); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_word_in_case_condition15305);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            // GrammarShellForMancoosi.g:14449:33: (TK_0= '\\n' )?
            int alt570=2;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==78) ) {
                int LA570_2 = input.LA(2);

                if ( (synpred652_GrammarShellForMancoosi()) ) {
                    alt570=1;
                }
            }
            switch (alt570) {
                case 1 :
                    // GrammarShellForMancoosi.g:14449:35: TK_0= '\\n'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_case_condition15311); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14449:47: (VBARGen_List+= VBAR wordGen_1+= word )*
            loop571:
            do {
                int alt571=2;
                int LA571_0 = input.LA(1);

                if ( (LA571_0==VBAR) ) {
                    alt571=1;
                }


                switch (alt571) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:14449:49: VBARGen_List+= VBAR wordGen_1+= word
            	    {
            	    VBARGen_List=(Token)match(input,VBAR,FOLLOW_VBAR_in_case_condition15319); if (state.failed) return retval;
            	    if (list_VBARGen_List==null) list_VBARGen_List=new ArrayList();
            	    list_VBARGen_List.add(VBARGen_List);

            	    pushFollow(FOLLOW_word_in_case_condition15324);
            	    wordGen_1=word();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_wordGen_1==null) list_wordGen_1=new ArrayList();
            	    list_wordGen_1.add(wordGen_1);


            	    }
            	    break;

            	default :
            	    break loop571;
                }
            } while (true);

            // GrammarShellForMancoosi.g:14449:87: (TK_1= '\\n' )?
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( (LA572_0==78) ) {
                alt572=1;
            }
            switch (alt572) {
                case 1 :
                    // GrammarShellForMancoosi.g:14449:89: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_case_condition15332); if (state.failed) return retval;

                    }
                    break;

            }

            RPARGen=(Token)match(input,RPAR,FOLLOW_RPAR_in_case_condition15339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node case_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		case_conditionReturnNode.setKind("case_condition");
              	    // Create a CST Leaf
              		if(LPARGen != null) {
              			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", (LPARGen!=null?LPARGen.getText():null), LPARGen.getCharPositionInLine(), LPARGen.getLine());
              			case_conditionReturnNode.getChildren().add(LPARGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	case_conditionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		case_conditionReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal VBARGen_List aggregation
              		if(list_VBARGen_List != null) {
              	    for(int pos = 0; pos < list_VBARGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_VBARGen_List != null) {
              		    Token t = (Token) list_VBARGen_List.get(pos); 
              		    Leaf VBARGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", t.getText(), t.getCharPositionInLine(), t.getLine());
              			case_conditionReturnNode.getChildren().add(VBARGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_wordGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) list_wordGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("word");
              	    		case_conditionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		case_conditionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(RPARGen != null) {
              			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", (RPARGen!=null?RPARGen.getText():null), RPARGen.getCharPositionInLine(), RPARGen.getLine());
              			case_conditionReturnNode.getChildren().add(RPARGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = case_conditionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_condition"

    public static class if_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "if_statement"
    // GrammarShellForMancoosi.g:14510:1: if_statement returns [Node returnNode] : TK_0= 'if' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )* (ifelse_branchGen+= ifelse_branch )* (else_branchGen+= else_branch )? TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' ) ;
    public final GrammarShellForMancoosiParser.if_statement_return if_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.if_statement_return retval = new GrammarShellForMancoosiParser.if_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_conditionGen=null;
        List list_statementGen=null;
        List list_ifelse_branchGen=null;
        List list_else_branchGen=null;
        RuleReturnScope conditionGen = null;
        RuleReturnScope statementGen = null;
        RuleReturnScope ifelse_branchGen = null;
        RuleReturnScope else_branchGen = null;
        try {
            // GrammarShellForMancoosi.g:14511:1: (TK_0= 'if' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )* (ifelse_branchGen+= ifelse_branch )* (else_branchGen+= else_branch )? TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' ) )
            // GrammarShellForMancoosi.g:14511:4: TK_0= 'if' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )* (ifelse_branchGen+= ifelse_branch )* (else_branchGen+= else_branch )? TK_6= 'fi' (TK_7= '\\n' | TK_8= ';' )
            {
            TK_0=(Token)match(input,79,FOLLOW_79_in_if_statement15361); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14511:14: (TK_1= '\\n' )?
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==78) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    // GrammarShellForMancoosi.g:14511:16: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_if_statement15367); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_condition_in_if_statement15374);
            conditionGen=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionGen==null) list_conditionGen=new ArrayList();
            list_conditionGen.add(conditionGen);

            // GrammarShellForMancoosi.g:14511:53: (TK_2= ';' | TK_3= '\\n' )?
            int alt574=3;
            int LA574_0 = input.LA(1);

            if ( (LA574_0==83) ) {
                alt574=1;
            }
            else if ( (LA574_0==78) ) {
                alt574=2;
            }
            switch (alt574) {
                case 1 :
                    // GrammarShellForMancoosi.g:14511:55: TK_2= ';'
                    {
                    TK_2=(Token)match(input,83,FOLLOW_83_in_if_statement15380); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14511:67: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_if_statement15387); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,84,FOLLOW_84_in_if_statement15394); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14511:92: (TK_5= '\\n' )?
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==78) ) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    // GrammarShellForMancoosi.g:14511:94: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_if_statement15400); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14511:119: (statementGen+= statement )*
            loop576:
            do {
                int alt576=2;
                int LA576_0 = input.LA(1);

                if ( (LA576_0==PATHNULL||(LA576_0>=PATHEMACSINST && LA576_0<=PATHEMACSREM)||(LA576_0>=PATHGCONFSCH && LA576_0<=UNDERSCORE)||LA576_0==PATHCOMPYTH||LA576_0==LGRAF||(LA576_0>=PATHMIME && LA576_0<=LPAR)||(LA576_0>=PATHXWINDOW && LA576_0<=PATHSCRIPT)||(LA576_0>=PATHREL && LA576_0<=ID)||(LA576_0>=79 && LA576_0<=82)||LA576_0==85||(LA576_0>=87 && LA576_0<=93)||(LA576_0>=95 && LA576_0<=103)||LA576_0==105||(LA576_0>=107 && LA576_0<=108)||(LA576_0>=110 && LA576_0<=112)||(LA576_0>=114 && LA576_0<=119)||(LA576_0>=121 && LA576_0<=144)||(LA576_0>=146 && LA576_0<=159)||(LA576_0>=161 && LA576_0<=188)||(LA576_0>=190 && LA576_0<=198)||(LA576_0>=200 && LA576_0<=207)) ) {
                    alt576=1;
                }


                switch (alt576) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_if_statement15407);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop576;
                }
            } while (true);

            // GrammarShellForMancoosi.g:14511:149: (ifelse_branchGen+= ifelse_branch )*
            loop577:
            do {
                int alt577=2;
                int LA577_0 = input.LA(1);

                if ( (LA577_0==160) ) {
                    alt577=1;
                }


                switch (alt577) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: ifelse_branchGen+= ifelse_branch
            	    {
            	    pushFollow(FOLLOW_ifelse_branch_in_if_statement15413);
            	    ifelse_branchGen=ifelse_branch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ifelse_branchGen==null) list_ifelse_branchGen=new ArrayList();
            	    list_ifelse_branchGen.add(ifelse_branchGen);


            	    }
            	    break;

            	default :
            	    break loop577;
                }
            } while (true);

            // GrammarShellForMancoosi.g:14511:181: (else_branchGen+= else_branch )?
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( (LA578_0==120) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: else_branchGen+= else_branch
                    {
                    pushFollow(FOLLOW_else_branch_in_if_statement15419);
                    else_branchGen=else_branch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_else_branchGen==null) list_else_branchGen=new ArrayList();
                    list_else_branchGen.add(else_branchGen);


                    }
                    break;

            }

            TK_6=(Token)match(input,86,FOLLOW_86_in_if_statement15426); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14511:208: (TK_7= '\\n' | TK_8= ';' )
            int alt579=2;
            int LA579_0 = input.LA(1);

            if ( (LA579_0==78) ) {
                alt579=1;
            }
            else if ( (LA579_0==83) ) {
                alt579=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 579, 0, input);

                throw nvae;
            }
            switch (alt579) {
                case 1 :
                    // GrammarShellForMancoosi.g:14511:210: TK_7= '\\n'
                    {
                    TK_7=(Token)match(input,78,FOLLOW_78_in_if_statement15432); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14511:223: TK_8= ';'
                    {
                    TK_8=(Token)match(input,83,FOLLOW_83_in_if_statement15439); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node if_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		if_statementReturnNode.setKind("if_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_conditionGen != null) {
              	        for(Iterator it = list_conditionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.condition_return r = (GrammarShellForMancoosiParser.condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_ifelse_branchGen != null) {
              	        for(Iterator it = list_ifelse_branchGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.ifelse_branch_return r = (GrammarShellForMancoosiParser.ifelse_branch_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ifelse_branch");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_else_branchGen != null) {
              	        for(Iterator it = list_else_branchGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.else_branch_return r = (GrammarShellForMancoosiParser.else_branch_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("else_branch");
              	            	if_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		if_statementReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = if_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class ifelse_branch_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ifelse_branch"
    // GrammarShellForMancoosi.g:14606:1: ifelse_branch returns [Node returnNode] : TK_0= 'elif' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )* ;
    public final GrammarShellForMancoosiParser.ifelse_branch_return ifelse_branch() throws RecognitionException {
        GrammarShellForMancoosiParser.ifelse_branch_return retval = new GrammarShellForMancoosiParser.ifelse_branch_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        List list_conditionGen=null;
        List list_statementGen=null;
        RuleReturnScope conditionGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14607:1: (TK_0= 'elif' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )* )
            // GrammarShellForMancoosi.g:14607:4: TK_0= 'elif' (TK_1= '\\n' )? conditionGen+= condition (TK_2= ';' | TK_3= '\\n' )? TK_4= 'then' (TK_5= '\\n' )? (statementGen+= statement )*
            {
            TK_0=(Token)match(input,160,FOLLOW_160_in_ifelse_branch15462); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14607:16: (TK_1= '\\n' )?
            int alt580=2;
            int LA580_0 = input.LA(1);

            if ( (LA580_0==78) ) {
                alt580=1;
            }
            switch (alt580) {
                case 1 :
                    // GrammarShellForMancoosi.g:14607:18: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_ifelse_branch15468); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_condition_in_ifelse_branch15475);
            conditionGen=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionGen==null) list_conditionGen=new ArrayList();
            list_conditionGen.add(conditionGen);

            // GrammarShellForMancoosi.g:14607:55: (TK_2= ';' | TK_3= '\\n' )?
            int alt581=3;
            int LA581_0 = input.LA(1);

            if ( (LA581_0==83) ) {
                alt581=1;
            }
            else if ( (LA581_0==78) ) {
                alt581=2;
            }
            switch (alt581) {
                case 1 :
                    // GrammarShellForMancoosi.g:14607:57: TK_2= ';'
                    {
                    TK_2=(Token)match(input,83,FOLLOW_83_in_ifelse_branch15481); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14607:69: TK_3= '\\n'
                    {
                    TK_3=(Token)match(input,78,FOLLOW_78_in_ifelse_branch15488); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,84,FOLLOW_84_in_ifelse_branch15495); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14607:94: (TK_5= '\\n' )?
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==78) ) {
                alt582=1;
            }
            switch (alt582) {
                case 1 :
                    // GrammarShellForMancoosi.g:14607:96: TK_5= '\\n'
                    {
                    TK_5=(Token)match(input,78,FOLLOW_78_in_ifelse_branch15501); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14607:121: (statementGen+= statement )*
            loop583:
            do {
                int alt583=2;
                int LA583_0 = input.LA(1);

                if ( (LA583_0==PATHNULL||(LA583_0>=PATHEMACSINST && LA583_0<=PATHEMACSREM)||(LA583_0>=PATHGCONFSCH && LA583_0<=UNDERSCORE)||LA583_0==PATHCOMPYTH||LA583_0==LGRAF||(LA583_0>=PATHMIME && LA583_0<=LPAR)||(LA583_0>=PATHXWINDOW && LA583_0<=PATHSCRIPT)||(LA583_0>=PATHREL && LA583_0<=ID)||(LA583_0>=79 && LA583_0<=82)||LA583_0==85||(LA583_0>=87 && LA583_0<=93)||(LA583_0>=95 && LA583_0<=103)||LA583_0==105||(LA583_0>=107 && LA583_0<=108)||(LA583_0>=110 && LA583_0<=112)||(LA583_0>=114 && LA583_0<=119)||(LA583_0>=121 && LA583_0<=144)||(LA583_0>=146 && LA583_0<=159)||(LA583_0>=161 && LA583_0<=188)||(LA583_0>=190 && LA583_0<=198)||(LA583_0>=200 && LA583_0<=207)) ) {
                    alt583=1;
                }


                switch (alt583) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_ifelse_branch15508);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop583;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node ifelse_branchReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		ifelse_branchReturnNode.setKind("ifelse_branch");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_conditionGen != null) {
              	        for(Iterator it = list_conditionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.condition_return r = (GrammarShellForMancoosiParser.condition_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("condition");
              	            	ifelse_branchReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		ifelse_branchReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	ifelse_branchReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = ifelse_branchReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ifelse_branch"

    public static class else_branch_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "else_branch"
    // GrammarShellForMancoosi.g:14667:1: else_branch returns [Node returnNode] : TK_0= 'else' (TK_1= '\\n' )? (statementGen+= statement )* ;
    public final GrammarShellForMancoosiParser.else_branch_return else_branch() throws RecognitionException {
        GrammarShellForMancoosiParser.else_branch_return retval = new GrammarShellForMancoosiParser.else_branch_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        List list_statementGen=null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14668:1: (TK_0= 'else' (TK_1= '\\n' )? (statementGen+= statement )* )
            // GrammarShellForMancoosi.g:14668:4: TK_0= 'else' (TK_1= '\\n' )? (statementGen+= statement )*
            {
            TK_0=(Token)match(input,120,FOLLOW_120_in_else_branch15532); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14668:16: (TK_1= '\\n' )?
            int alt584=2;
            int LA584_0 = input.LA(1);

            if ( (LA584_0==78) ) {
                alt584=1;
            }
            switch (alt584) {
                case 1 :
                    // GrammarShellForMancoosi.g:14668:18: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_else_branch15538); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14668:43: (statementGen+= statement )*
            loop585:
            do {
                int alt585=2;
                int LA585_0 = input.LA(1);

                if ( (LA585_0==PATHNULL||(LA585_0>=PATHEMACSINST && LA585_0<=PATHEMACSREM)||(LA585_0>=PATHGCONFSCH && LA585_0<=UNDERSCORE)||LA585_0==PATHCOMPYTH||LA585_0==LGRAF||(LA585_0>=PATHMIME && LA585_0<=LPAR)||(LA585_0>=PATHXWINDOW && LA585_0<=PATHSCRIPT)||(LA585_0>=PATHREL && LA585_0<=ID)||(LA585_0>=79 && LA585_0<=82)||LA585_0==85||(LA585_0>=87 && LA585_0<=93)||(LA585_0>=95 && LA585_0<=103)||LA585_0==105||(LA585_0>=107 && LA585_0<=108)||(LA585_0>=110 && LA585_0<=112)||(LA585_0>=114 && LA585_0<=119)||(LA585_0>=121 && LA585_0<=144)||(LA585_0>=146 && LA585_0<=159)||(LA585_0>=161 && LA585_0<=188)||(LA585_0>=190 && LA585_0<=198)||(LA585_0>=200 && LA585_0<=207)) ) {
                    alt585=1;
                }


                switch (alt585) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_else_branch15545);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop585;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node else_branchReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		else_branchReturnNode.setKind("else_branch");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		else_branchReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		else_branchReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	else_branchReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = else_branchReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_branch"

    public static class condition_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "condition"
    // GrammarShellForMancoosi.g:14698:1: condition returns [Node returnNode] : (conditional_expr_listGen+= conditional_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )* | command_expr_listGen+= command_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expr_listGen+= conditional_expr_list )* );
    public final GrammarShellForMancoosiParser.condition_return condition() throws RecognitionException {
        GrammarShellForMancoosiParser.condition_return retval = new GrammarShellForMancoosiParser.condition_return();
        retval.start = input.LT(1);

        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        List list_conditional_expr_listGen=null;
        List list_command_expr_listGen=null;
        RuleReturnScope conditional_expr_listGen = null;
        RuleReturnScope command_expr_listGen = null;
        try {
            // GrammarShellForMancoosi.g:14699:1: (conditional_expr_listGen+= conditional_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )* | command_expr_listGen+= command_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expr_listGen+= conditional_expr_list )* )
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==LSBRACK) ) {
                int LA592_1 = input.LA(2);

                if ( (synpred673_GrammarShellForMancoosi()) ) {
                    alt592=1;
                }
                else if ( (true) ) {
                    alt592=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 592, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA592_0==EXCL||LA592_0==PATHNULL||(LA592_0>=PATHEMACSINST && LA592_0<=PATHEMACSREM)||(LA592_0>=PATHGCONFSCH && LA592_0<=UNDERSCORE)||LA592_0==PATHCOMPYTH||(LA592_0>=PATHMIME && LA592_0<=PATHP)||(LA592_0>=PATHXWINDOW && LA592_0<=PATHSCRIPT)||(LA592_0>=PATHREL && LA592_0<=ID)||(LA592_0>=80 && LA592_0<=82)||LA592_0==85||(LA592_0>=87 && LA592_0<=93)||(LA592_0>=95 && LA592_0<=101)||LA592_0==103||LA592_0==105||(LA592_0>=107 && LA592_0<=108)||(LA592_0>=110 && LA592_0<=112)||(LA592_0>=114 && LA592_0<=119)||(LA592_0>=121 && LA592_0<=144)||(LA592_0>=146 && LA592_0<=159)||(LA592_0>=161 && LA592_0<=175)||(LA592_0>=177 && LA592_0<=188)||(LA592_0>=190 && LA592_0<=195)||(LA592_0>=200 && LA592_0<=207)) ) {
                alt592=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 592, 0, input);

                throw nvae;
            }
            switch (alt592) {
                case 1 :
                    // GrammarShellForMancoosi.g:14699:4: conditional_expr_listGen+= conditional_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )*
                    {
                    pushFollow(FOLLOW_conditional_expr_list_in_condition15568);
                    conditional_expr_listGen=conditional_expr_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_conditional_expr_listGen==null) list_conditional_expr_listGen=new ArrayList();
                    list_conditional_expr_listGen.add(conditional_expr_listGen);

                    // GrammarShellForMancoosi.g:14699:52: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )*
                    loop588:
                    do {
                        int alt588=2;
                        int LA588_0 = input.LA(1);

                        if ( (LA588_0==AND||LA588_0==OR) ) {
                            alt588=1;
                        }


                        switch (alt588) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:14699:53: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list
                    	    {
                    	    // GrammarShellForMancoosi.g:14699:53: (ANDGen= AND | ORGen= OR )
                    	    int alt586=2;
                    	    int LA586_0 = input.LA(1);

                    	    if ( (LA586_0==AND) ) {
                    	        alt586=1;
                    	    }
                    	    else if ( (LA586_0==OR) ) {
                    	        alt586=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 586, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt586) {
                    	        case 1 :
                    	            // GrammarShellForMancoosi.g:14699:55: ANDGen= AND
                    	            {
                    	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_condition15575); if (state.failed) return retval;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // GrammarShellForMancoosi.g:14699:69: ORGen= OR
                    	            {
                    	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_condition15582); if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }

                    	    // GrammarShellForMancoosi.g:14699:79: (TK_0= '\\n' )?
                    	    int alt587=2;
                    	    int LA587_0 = input.LA(1);

                    	    if ( (LA587_0==78) ) {
                    	        alt587=1;
                    	    }
                    	    switch (alt587) {
                    	        case 1 :
                    	            // GrammarShellForMancoosi.g:14699:81: TK_0= '\\n'
                    	            {
                    	            TK_0=(Token)match(input,78,FOLLOW_78_in_condition15589); if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_command_expr_list_in_condition15596);
                    	    command_expr_listGen=command_expr_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_command_expr_listGen==null) list_command_expr_listGen=new ArrayList();
                    	    list_command_expr_listGen.add(command_expr_listGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop588;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		conditionReturnNode.setKind("condition");
                      	    // Create a CST Node
                      		if(list_conditional_expr_listGen != null) {
                      	        for(Iterator it = list_conditional_expr_listGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.conditional_expr_list_return r = (GrammarShellForMancoosiParser.conditional_expr_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("conditional_expr_list");
                      	            	conditionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal command_expr_listGen aggregation
                      		if(list_command_expr_listGen != null) {
                      	    for(int pos = 0; pos < list_command_expr_listGen.size(); pos++ )  { 
                      	    // Create a CST Leaf
                      		if(ANDGen != null) {
                      			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
                      			conditionReturnNode.getChildren().add(ANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ORGen != null) {
                      			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
                      			conditionReturnNode.getChildren().add(ORGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		conditionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_command_expr_listGen != null) {		
                      	    	GrammarShellForMancoosiParser.command_expr_list_return r = (GrammarShellForMancoosiParser.command_expr_list_return) list_command_expr_listGen.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("command_expr_list");
                      	    		conditionReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = conditionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14747:5: command_expr_listGen+= command_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expr_listGen+= conditional_expr_list )*
                    {
                    pushFollow(FOLLOW_command_expr_list_in_condition15610);
                    command_expr_listGen=command_expr_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_expr_listGen==null) list_command_expr_listGen=new ArrayList();
                    list_command_expr_listGen.add(command_expr_listGen);

                    // GrammarShellForMancoosi.g:14747:45: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expr_listGen+= conditional_expr_list )*
                    loop591:
                    do {
                        int alt591=2;
                        int LA591_0 = input.LA(1);

                        if ( (LA591_0==AND||LA591_0==OR) ) {
                            alt591=1;
                        }


                        switch (alt591) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:14747:46: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expr_listGen+= conditional_expr_list
                    	    {
                    	    // GrammarShellForMancoosi.g:14747:46: (ANDGen= AND | ORGen= OR )
                    	    int alt589=2;
                    	    int LA589_0 = input.LA(1);

                    	    if ( (LA589_0==AND) ) {
                    	        alt589=1;
                    	    }
                    	    else if ( (LA589_0==OR) ) {
                    	        alt589=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 589, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt589) {
                    	        case 1 :
                    	            // GrammarShellForMancoosi.g:14747:48: ANDGen= AND
                    	            {
                    	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_condition15617); if (state.failed) return retval;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // GrammarShellForMancoosi.g:14747:62: ORGen= OR
                    	            {
                    	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_condition15624); if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }

                    	    // GrammarShellForMancoosi.g:14747:72: (TK_0= '\\n' )?
                    	    int alt590=2;
                    	    int LA590_0 = input.LA(1);

                    	    if ( (LA590_0==78) ) {
                    	        alt590=1;
                    	    }
                    	    switch (alt590) {
                    	        case 1 :
                    	            // GrammarShellForMancoosi.g:14747:74: TK_0= '\\n'
                    	            {
                    	            TK_0=(Token)match(input,78,FOLLOW_78_in_condition15631); if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_conditional_expr_list_in_condition15638);
                    	    conditional_expr_listGen=conditional_expr_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_conditional_expr_listGen==null) list_conditional_expr_listGen=new ArrayList();
                    	    list_conditional_expr_listGen.add(conditional_expr_listGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop591;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		conditionReturnNode.setKind("condition");
                      	    // Create a CST Node
                      		if(list_command_expr_listGen != null) {
                      	        for(Iterator it = list_command_expr_listGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.command_expr_list_return r = (GrammarShellForMancoosiParser.command_expr_list_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("command_expr_list");
                      	            	conditionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal conditional_expr_listGen aggregation
                      		if(list_conditional_expr_listGen != null) {
                      	    for(int pos = 0; pos < list_conditional_expr_listGen.size(); pos++ )  { 
                      	    // Create a CST Leaf
                      		if(ANDGen != null) {
                      			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
                      			conditionReturnNode.getChildren().add(ANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ORGen != null) {
                      			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
                      			conditionReturnNode.getChildren().add(ORGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		conditionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_conditional_expr_listGen != null) {		
                      	    	GrammarShellForMancoosiParser.conditional_expr_list_return r = (GrammarShellForMancoosiParser.conditional_expr_list_return) list_conditional_expr_listGen.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("conditional_expr_list");
                      	    		conditionReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = conditionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition"

    public static class conditional_expr_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditional_expr_list"
    // GrammarShellForMancoosi.g:14797:1: conditional_expr_list returns [Node returnNode] : conditional_expressionGen+= conditional_expression ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression )* ;
    public final GrammarShellForMancoosiParser.conditional_expr_list_return conditional_expr_list() throws RecognitionException {
        GrammarShellForMancoosiParser.conditional_expr_list_return retval = new GrammarShellForMancoosiParser.conditional_expr_list_return();
        retval.start = input.LT(1);

        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        List list_conditional_expressionGen=null;
        List list_conditional_expressionGen_1=null;
        RuleReturnScope conditional_expressionGen = null;
        RuleReturnScope conditional_expressionGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:14798:1: (conditional_expressionGen+= conditional_expression ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression )* )
            // GrammarShellForMancoosi.g:14798:4: conditional_expressionGen+= conditional_expression ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression )*
            {
            pushFollow(FOLLOW_conditional_expression_in_conditional_expr_list15662);
            conditional_expressionGen=conditional_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditional_expressionGen==null) list_conditional_expressionGen=new ArrayList();
            list_conditional_expressionGen.add(conditional_expressionGen);

            // GrammarShellForMancoosi.g:14798:54: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression )*
            loop595:
            do {
                int alt595=2;
                int LA595_0 = input.LA(1);

                if ( (LA595_0==AND||LA595_0==OR) ) {
                    int LA595_1 = input.LA(2);

                    if ( (synpred679_GrammarShellForMancoosi()) ) {
                        alt595=1;
                    }


                }


                switch (alt595) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:14798:55: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression
            	    {
            	    // GrammarShellForMancoosi.g:14798:55: (ANDGen= AND | ORGen= OR )
            	    int alt593=2;
            	    int LA593_0 = input.LA(1);

            	    if ( (LA593_0==AND) ) {
            	        alt593=1;
            	    }
            	    else if ( (LA593_0==OR) ) {
            	        alt593=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 593, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt593) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:14798:57: ANDGen= AND
            	            {
            	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_conditional_expr_list15669); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // GrammarShellForMancoosi.g:14798:71: ORGen= OR
            	            {
            	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_conditional_expr_list15676); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:14798:81: (TK_0= '\\n' )?
            	    int alt594=2;
            	    int LA594_0 = input.LA(1);

            	    if ( (LA594_0==78) ) {
            	        alt594=1;
            	    }
            	    switch (alt594) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:14798:83: TK_0= '\\n'
            	            {
            	            TK_0=(Token)match(input,78,FOLLOW_78_in_conditional_expr_list15683); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_conditional_expression_in_conditional_expr_list15690);
            	    conditional_expressionGen_1=conditional_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_conditional_expressionGen_1==null) list_conditional_expressionGen_1=new ArrayList();
            	    list_conditional_expressionGen_1.add(conditional_expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop595;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node conditional_expr_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditional_expr_listReturnNode.setKind("conditional_expr_list");
              	    // Create a CST Node
              		if(list_conditional_expressionGen != null) {
              	        for(Iterator it = list_conditional_expressionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.conditional_expression_return r = (GrammarShellForMancoosiParser.conditional_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditional_expression");
              	            	conditional_expr_listReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal conditional_expressionGen_1 aggregation
              		if(list_conditional_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_conditional_expressionGen_1.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			conditional_expr_listReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			conditional_expr_listReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		conditional_expr_listReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_conditional_expressionGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.conditional_expression_return r = (GrammarShellForMancoosiParser.conditional_expression_return) list_conditional_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("conditional_expression");
              	    		conditional_expr_listReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditional_expr_listReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditional_expr_list"

    public static class command_expr_list_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "command_expr_list"
    // GrammarShellForMancoosi.g:14848:1: command_expr_list returns [Node returnNode] : (LSBRACKGen= LSBRACK )? (EXCLGen= EXCL )? pipelineGen+= pipeline (RSBRACKGen= RSBRACK )? ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )? )* ;
    public final GrammarShellForMancoosiParser.command_expr_list_return command_expr_list() throws RecognitionException {
        GrammarShellForMancoosiParser.command_expr_list_return retval = new GrammarShellForMancoosiParser.command_expr_list_return();
        retval.start = input.LT(1);

        Token LSBRACKGen=null;
        Token EXCLGen=null;
        Token RSBRACKGen=null;
        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        Token LSBRACKGen_1=null;
        Token EXCLGen_1=null;
        Token RSBRACKGen_1=null;
        List list_pipelineGen=null;
        List list_pipelineGen_1=null;
        RuleReturnScope pipelineGen = null;
        RuleReturnScope pipelineGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:14849:1: ( (LSBRACKGen= LSBRACK )? (EXCLGen= EXCL )? pipelineGen+= pipeline (RSBRACKGen= RSBRACK )? ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )? )* )
            // GrammarShellForMancoosi.g:14849:4: (LSBRACKGen= LSBRACK )? (EXCLGen= EXCL )? pipelineGen+= pipeline (RSBRACKGen= RSBRACK )? ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )? )*
            {
            // GrammarShellForMancoosi.g:14849:14: (LSBRACKGen= LSBRACK )?
            int alt596=2;
            int LA596_0 = input.LA(1);

            if ( (LA596_0==LSBRACK) ) {
                alt596=1;
            }
            switch (alt596) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: LSBRACKGen= LSBRACK
                    {
                    LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_command_expr_list15715); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14849:32: (EXCLGen= EXCL )?
            int alt597=2;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==EXCL) ) {
                alt597=1;
            }
            switch (alt597) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: EXCLGen= EXCL
                    {
                    EXCLGen=(Token)match(input,EXCL,FOLLOW_EXCL_in_command_expr_list15721); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_pipeline_in_command_expr_list15727);
            pipelineGen=pipeline();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pipelineGen==null) list_pipelineGen=new ArrayList();
            list_pipelineGen.add(pipelineGen);

            // GrammarShellForMancoosi.g:14849:73: (RSBRACKGen= RSBRACK )?
            int alt598=2;
            int LA598_0 = input.LA(1);

            if ( (LA598_0==RSBRACK) ) {
                alt598=1;
            }
            switch (alt598) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: RSBRACKGen= RSBRACK
                    {
                    RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_command_expr_list15732); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14849:83: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )? )*
            loop604:
            do {
                int alt604=2;
                int LA604_0 = input.LA(1);

                if ( (LA604_0==AND||LA604_0==OR) ) {
                    int LA604_2 = input.LA(2);

                    if ( (synpred688_GrammarShellForMancoosi()) ) {
                        alt604=1;
                    }


                }


                switch (alt604) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:14849:84: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )?
            	    {
            	    // GrammarShellForMancoosi.g:14849:84: (ANDGen= AND | ORGen= OR )
            	    int alt599=2;
            	    int LA599_0 = input.LA(1);

            	    if ( (LA599_0==AND) ) {
            	        alt599=1;
            	    }
            	    else if ( (LA599_0==OR) ) {
            	        alt599=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 599, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt599) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:14849:86: ANDGen= AND
            	            {
            	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_command_expr_list15740); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // GrammarShellForMancoosi.g:14849:100: ORGen= OR
            	            {
            	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_command_expr_list15747); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:14849:110: (TK_0= '\\n' )?
            	    int alt600=2;
            	    int LA600_0 = input.LA(1);

            	    if ( (LA600_0==78) ) {
            	        alt600=1;
            	    }
            	    switch (alt600) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:14849:112: TK_0= '\\n'
            	            {
            	            TK_0=(Token)match(input,78,FOLLOW_78_in_command_expr_list15754); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:14849:137: (LSBRACKGen_1= LSBRACK )?
            	    int alt601=2;
            	    int LA601_0 = input.LA(1);

            	    if ( (LA601_0==LSBRACK) ) {
            	        alt601=1;
            	    }
            	    switch (alt601) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: LSBRACKGen_1= LSBRACK
            	            {
            	            LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_command_expr_list15761); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // GrammarShellForMancoosi.g:14849:157: (EXCLGen_1= EXCL )?
            	    int alt602=2;
            	    int LA602_0 = input.LA(1);

            	    if ( (LA602_0==EXCL) ) {
            	        alt602=1;
            	    }
            	    switch (alt602) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: EXCLGen_1= EXCL
            	            {
            	            EXCLGen_1=(Token)match(input,EXCL,FOLLOW_EXCL_in_command_expr_list15767); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_pipeline_in_command_expr_list15773);
            	    pipelineGen_1=pipeline();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
            	    list_pipelineGen_1.add(pipelineGen_1);

            	    // GrammarShellForMancoosi.g:14849:202: (RSBRACKGen_1= RSBRACK )?
            	    int alt603=2;
            	    int LA603_0 = input.LA(1);

            	    if ( (LA603_0==RSBRACK) ) {
            	        alt603=1;
            	    }
            	    switch (alt603) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: RSBRACKGen_1= RSBRACK
            	            {
            	            RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_command_expr_list15778); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop604;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node command_expr_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		command_expr_listReturnNode.setKind("command_expr_list");
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			command_expr_listReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(EXCLGen != null) {
              			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", (EXCLGen!=null?EXCLGen.getText():null), EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
              			command_expr_listReturnNode.getChildren().add(EXCLGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_pipelineGen != null) {
              	        for(Iterator it = list_pipelineGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pipeline");
              	            	command_expr_listReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			command_expr_listReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}

              		// Create a special CST Node for terminal pipelineGen_1 aggregation
              		if(list_pipelineGen_1 != null) {
              	    for(int pos = 0; pos < list_pipelineGen_1.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(ANDGen != null) {
              			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
              			command_expr_listReturnNode.getChildren().add(ANDGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(ORGen != null) {
              			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
              			command_expr_listReturnNode.getChildren().add(ORGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		command_expr_listReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LSBRACKGen_1 != null) {
              			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen_1!=null?LSBRACKGen_1.getText():null), LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
              			command_expr_listReturnNode.getChildren().add(LSBRACKGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(EXCLGen_1 != null) {
              			Leaf EXCLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", (EXCLGen_1!=null?EXCLGen_1.getText():null), EXCLGen_1.getCharPositionInLine(), EXCLGen_1.getLine());
              			command_expr_listReturnNode.getChildren().add(EXCLGen_1Leaf);
              		}
              		// No Terminal extractor
              	    if(list_pipelineGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) list_pipelineGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("pipeline");
              	    		command_expr_listReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a CST Leaf
              		if(RSBRACKGen_1 != null) {
              			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen_1!=null?RSBRACKGen_1.getText():null), RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
              			command_expr_listReturnNode.getChildren().add(RSBRACKGen_1Leaf);
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = command_expr_listReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_expr_list"

    public static class for_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "for_statement"
    // GrammarShellForMancoosi.g:14929:1: for_statement returns [Node returnNode] : TK_0= 'for' (TK_1= '\\n' )? wordGen+= word TK_2= 'in' (wordGen_1+= word | pathGen+= path )+ (TK_3= ';' | TK_4= '\\n' )? TK_5= 'do' (TK_6= '\\n' )? (statementGen+= statement )* TK_7= 'done' (TK_8= '\\n' | TK_9= ';' ) ;
    public final GrammarShellForMancoosiParser.for_statement_return for_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.for_statement_return retval = new GrammarShellForMancoosiParser.for_statement_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        Token TK_9=null;
        List list_wordGen=null;
        List list_wordGen_1=null;
        List list_pathGen=null;
        List list_statementGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope wordGen_1 = null;
        RuleReturnScope pathGen = null;
        RuleReturnScope statementGen = null;
        try {
            // GrammarShellForMancoosi.g:14930:1: (TK_0= 'for' (TK_1= '\\n' )? wordGen+= word TK_2= 'in' (wordGen_1+= word | pathGen+= path )+ (TK_3= ';' | TK_4= '\\n' )? TK_5= 'do' (TK_6= '\\n' )? (statementGen+= statement )* TK_7= 'done' (TK_8= '\\n' | TK_9= ';' ) )
            // GrammarShellForMancoosi.g:14930:4: TK_0= 'for' (TK_1= '\\n' )? wordGen+= word TK_2= 'in' (wordGen_1+= word | pathGen+= path )+ (TK_3= ';' | TK_4= '\\n' )? TK_5= 'do' (TK_6= '\\n' )? (statementGen+= statement )* TK_7= 'done' (TK_8= '\\n' | TK_9= ';' )
            {
            TK_0=(Token)match(input,102,FOLLOW_102_in_for_statement15803); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14930:15: (TK_1= '\\n' )?
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==78) ) {
                alt605=1;
            }
            switch (alt605) {
                case 1 :
                    // GrammarShellForMancoosi.g:14930:17: TK_1= '\\n'
                    {
                    TK_1=(Token)match(input,78,FOLLOW_78_in_for_statement15809); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_word_in_for_statement15816);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            TK_2=(Token)match(input,104,FOLLOW_104_in_for_statement15821); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14930:55: (wordGen_1+= word | pathGen+= path )+
            int cnt606=0;
            loop606:
            do {
                int alt606=3;
                int LA606_0 = input.LA(1);

                if ( (LA606_0==UNDERSCORE||(LA606_0>=VAR && LA606_0<=ID)||(LA606_0>=80 && LA606_0<=82)||LA606_0==85||(LA606_0>=87 && LA606_0<=93)||(LA606_0>=95 && LA606_0<=101)||LA606_0==103||LA606_0==105||(LA606_0>=107 && LA606_0<=108)||(LA606_0>=110 && LA606_0<=112)||(LA606_0>=114 && LA606_0<=119)||(LA606_0>=121 && LA606_0<=144)||(LA606_0>=146 && LA606_0<=159)||(LA606_0>=161 && LA606_0<=175)||(LA606_0>=177 && LA606_0<=188)||(LA606_0>=190 && LA606_0<=195)||(LA606_0>=201 && LA606_0<=207)) ) {
                    alt606=1;
                }
                else if ( (LA606_0==PATHNULL||(LA606_0>=PATHEMACSINST && LA606_0<=PATHEMACSREM)||(LA606_0>=PATHGCONFSCH && LA606_0<=PATHOLDSCHEMA)||LA606_0==PATHCOMPYTH||(LA606_0>=PATHMIME && LA606_0<=PATHSUID)||LA606_0==PATHSS||LA606_0==PATHP||(LA606_0>=PATHXWINDOW && LA606_0<=PATHSCRIPT)||(LA606_0>=PATHREL && LA606_0<=PATH)) ) {
                    alt606=2;
                }


                switch (alt606) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:14930:57: wordGen_1+= word
            	    {
            	    pushFollow(FOLLOW_word_in_for_statement15827);
            	    wordGen_1=word();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_wordGen_1==null) list_wordGen_1=new ArrayList();
            	    list_wordGen_1.add(wordGen_1);


            	    }
            	    break;
            	case 2 :
            	    // GrammarShellForMancoosi.g:14930:76: pathGen+= path
            	    {
            	    pushFollow(FOLLOW_path_in_for_statement15834);
            	    pathGen=path();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_pathGen==null) list_pathGen=new ArrayList();
            	    list_pathGen.add(pathGen);


            	    }
            	    break;

            	default :
            	    if ( cnt606 >= 1 ) break loop606;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(606, input);
                        throw eee;
                }
                cnt606++;
            } while (true);

            // GrammarShellForMancoosi.g:14930:92: (TK_3= ';' | TK_4= '\\n' )?
            int alt607=3;
            int LA607_0 = input.LA(1);

            if ( (LA607_0==83) ) {
                alt607=1;
            }
            else if ( (LA607_0==78) ) {
                alt607=2;
            }
            switch (alt607) {
                case 1 :
                    // GrammarShellForMancoosi.g:14930:94: TK_3= ';'
                    {
                    TK_3=(Token)match(input,83,FOLLOW_83_in_for_statement15842); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14930:106: TK_4= '\\n'
                    {
                    TK_4=(Token)match(input,78,FOLLOW_78_in_for_statement15849); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,106,FOLLOW_106_in_for_statement15856); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14930:129: (TK_6= '\\n' )?
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( (LA608_0==78) ) {
                alt608=1;
            }
            switch (alt608) {
                case 1 :
                    // GrammarShellForMancoosi.g:14930:131: TK_6= '\\n'
                    {
                    TK_6=(Token)match(input,78,FOLLOW_78_in_for_statement15862); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:14930:156: (statementGen+= statement )*
            loop609:
            do {
                int alt609=2;
                int LA609_0 = input.LA(1);

                if ( (LA609_0==PATHNULL||(LA609_0>=PATHEMACSINST && LA609_0<=PATHEMACSREM)||(LA609_0>=PATHGCONFSCH && LA609_0<=UNDERSCORE)||LA609_0==PATHCOMPYTH||LA609_0==LGRAF||(LA609_0>=PATHMIME && LA609_0<=LPAR)||(LA609_0>=PATHXWINDOW && LA609_0<=PATHSCRIPT)||(LA609_0>=PATHREL && LA609_0<=ID)||(LA609_0>=79 && LA609_0<=82)||LA609_0==85||(LA609_0>=87 && LA609_0<=93)||(LA609_0>=95 && LA609_0<=103)||LA609_0==105||(LA609_0>=107 && LA609_0<=108)||(LA609_0>=110 && LA609_0<=112)||(LA609_0>=114 && LA609_0<=119)||(LA609_0>=121 && LA609_0<=144)||(LA609_0>=146 && LA609_0<=159)||(LA609_0>=161 && LA609_0<=188)||(LA609_0>=190 && LA609_0<=198)||(LA609_0>=200 && LA609_0<=207)) ) {
                    alt609=1;
                }


                switch (alt609) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:0:0: statementGen+= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_for_statement15869);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);


            	    }
            	    break;

            	default :
            	    break loop609;
                }
            } while (true);

            TK_7=(Token)match(input,109,FOLLOW_109_in_for_statement15875); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:14930:182: (TK_8= '\\n' | TK_9= ';' )
            int alt610=2;
            int LA610_0 = input.LA(1);

            if ( (LA610_0==78) ) {
                alt610=1;
            }
            else if ( (LA610_0==83) ) {
                alt610=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);

                throw nvae;
            }
            switch (alt610) {
                case 1 :
                    // GrammarShellForMancoosi.g:14930:184: TK_8= '\\n'
                    {
                    TK_8=(Token)match(input,78,FOLLOW_78_in_for_statement15881); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:14930:197: TK_9= ';'
                    {
                    TK_9=(Token)match(input,83,FOLLOW_83_in_for_statement15888); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node for_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		for_statementReturnNode.setKind("for_statement");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	for_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_2Leaf);
              	 	}

              		// Create a special CST Node for terminal wordGen_1 aggregation
              		if(list_wordGen_1 != null) {
              	    for(int pos = 0; pos < list_wordGen_1.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_wordGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) list_wordGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("word");
              	    		for_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}


              		// Create a special CST Node for terminal pathGen aggregation
              		if(list_pathGen != null) {
              	    for(int pos = 0; pos < list_pathGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_pathGen != null) {		
              	    	GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) list_pathGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("path");
              	    		for_statementReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.statement_return r = (GrammarShellForMancoosiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	for_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_7!=null?TK_7.getText():null), TK_7.getCharPositionInLine(), TK_7.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_8!=null?TK_8.getText():null), TK_8.getCharPositionInLine(), TK_8.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_9 != null) {
              			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_9!=null?TK_9.getText():null), TK_9.getCharPositionInLine(), TK_9.getLine());
              	 		for_statementReturnNode.getChildren().add(TK_9Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = for_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_statement"

    public static class assignment_statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "assignment_statement"
    // GrammarShellForMancoosi.g:15040:1: assignment_statement returns [Node returnNode] : wordGen+= word EQUGen= EQU (paramsGen+= params )* ;
    public final GrammarShellForMancoosiParser.assignment_statement_return assignment_statement() throws RecognitionException {
        GrammarShellForMancoosiParser.assignment_statement_return retval = new GrammarShellForMancoosiParser.assignment_statement_return();
        retval.start = input.LT(1);

        Token EQUGen=null;
        List list_wordGen=null;
        List list_paramsGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope paramsGen = null;
        try {
            // GrammarShellForMancoosi.g:15041:1: (wordGen+= word EQUGen= EQU (paramsGen+= params )* )
            // GrammarShellForMancoosi.g:15041:4: wordGen+= word EQUGen= EQU (paramsGen+= params )*
            {
            pushFollow(FOLLOW_word_in_assignment_statement15911);
            wordGen=word();

            state._fsp--;
            if (state.failed) return retval;
            if (list_wordGen==null) list_wordGen=new ArrayList();
            list_wordGen.add(wordGen);

            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_assignment_statement15916); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:15041:30: (paramsGen+= params )*
            loop611:
            do {
                int alt611=2;
                int LA611_0 = input.LA(1);

                if ( (LA611_0==DQUOTE||(LA611_0>=GREAT && LA611_0<=MINUS)||(LA611_0>=PATHEMACSINST && LA611_0<=PATHCOMPYTH)||(LA611_0>=PSINGLE && LA611_0<=BSLASH)||(LA611_0>=PATHMIME && LA611_0<=PATHP)||(LA611_0>=DLESS && LA611_0<=CLOBBER)||(LA611_0>=PATHREL && LA611_0<=ID)||(LA611_0>=80 && LA611_0<=82)||LA611_0==85||(LA611_0>=87 && LA611_0<=93)||(LA611_0>=95 && LA611_0<=101)||LA611_0==103||LA611_0==105||(LA611_0>=107 && LA611_0<=108)||(LA611_0>=110 && LA611_0<=112)||(LA611_0>=114 && LA611_0<=119)||(LA611_0>=121 && LA611_0<=144)||(LA611_0>=146 && LA611_0<=159)||(LA611_0>=161 && LA611_0<=175)||(LA611_0>=177 && LA611_0<=188)||(LA611_0>=190 && LA611_0<=195)||(LA611_0>=201 && LA611_0<=207)) ) {
                    alt611=1;
                }


                switch (alt611) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:15041:32: paramsGen+= params
            	    {
            	    pushFollow(FOLLOW_params_in_assignment_statement15922);
            	    paramsGen=params();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_paramsGen==null) list_paramsGen=new ArrayList();
            	    list_paramsGen.add(paramsGen);


            	    }
            	    break;

            	default :
            	    break loop611;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node assignment_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		assignment_statementReturnNode.setKind("assignment_statement");
              	    // Create a CST Node
              		if(list_wordGen != null) {
              	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("word");
              	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(EQUGen != null) {
              			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
              			assignment_statementReturnNode.getChildren().add(EQUGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_paramsGen != null) {
              	        for(Iterator it = list_paramsGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.params_return r = (GrammarShellForMancoosiParser.params_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("params");
              	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = assignment_statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignment_statement"

    public static class conditional_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditional_expression"
    // GrammarShellForMancoosi.g:15076:1: conditional_expression returns [Node returnNode] : LSBRACKGen= LSBRACK (EXCLGen= EXCL )? (boolean_expressionGen+= boolean_expression | command_expressionGen+= command_expression ) RSBRACKGen= RSBRACK ;
    public final GrammarShellForMancoosiParser.conditional_expression_return conditional_expression() throws RecognitionException {
        GrammarShellForMancoosiParser.conditional_expression_return retval = new GrammarShellForMancoosiParser.conditional_expression_return();
        retval.start = input.LT(1);

        Token LSBRACKGen=null;
        Token EXCLGen=null;
        Token RSBRACKGen=null;
        List list_boolean_expressionGen=null;
        List list_command_expressionGen=null;
        RuleReturnScope boolean_expressionGen = null;
        RuleReturnScope command_expressionGen = null;
        try {
            // GrammarShellForMancoosi.g:15077:1: (LSBRACKGen= LSBRACK (EXCLGen= EXCL )? (boolean_expressionGen+= boolean_expression | command_expressionGen+= command_expression ) RSBRACKGen= RSBRACK )
            // GrammarShellForMancoosi.g:15077:5: LSBRACKGen= LSBRACK (EXCLGen= EXCL )? (boolean_expressionGen+= boolean_expression | command_expressionGen+= command_expression ) RSBRACKGen= RSBRACK
            {
            LSBRACKGen=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_conditional_expression15948); if (state.failed) return retval;
            // GrammarShellForMancoosi.g:15077:32: (EXCLGen= EXCL )?
            int alt612=2;
            int LA612_0 = input.LA(1);

            if ( (LA612_0==EXCL) ) {
                alt612=1;
            }
            switch (alt612) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: EXCLGen= EXCL
                    {
                    EXCLGen=(Token)match(input,EXCL,FOLLOW_EXCL_in_conditional_expression15953); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:15077:39: (boolean_expressionGen+= boolean_expression | command_expressionGen+= command_expression )
            int alt613=2;
            switch ( input.LA(1) ) {
            case DQUOTE:
                {
                alt613=1;
                }
                break;
            case UNDERSCORE:
            case VAR:
            case VARINPUT:
            case VARQMARK:
            case VARDOLLAR:
            case VAREXCL:
            case VARSTAR:
            case VARAT:
            case VARHOME:
            case VARPATH:
            case VARPS:
            case ID:
            case 80:
            case 81:
            case 82:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 103:
            case 105:
            case 107:
            case 108:
            case 110:
            case 111:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
                {
                int LA613_2 = input.LA(2);

                if ( (synpred699_GrammarShellForMancoosi()) ) {
                    alt613=1;
                }
                else if ( (true) ) {
                    alt613=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 613, 2, input);

                    throw nvae;
                }
                }
                break;
            case GREAT:
            case PATHNULL:
            case NUMBER:
            case GREATAND:
            case MINUS:
            case PATHEMACSINST:
            case PATHEMACSREM:
            case DMINUS:
            case PATHGCONFSCH:
            case PATHOLDSCHEMA:
            case AP:
            case PATHCOMPYTH:
            case PSINGLE:
            case TILDE:
            case SLASH:
            case BSLASH:
            case PATHMIME:
            case PATHSUID:
            case COLON:
            case PATHSS:
            case DOT:
            case PATHP:
            case DLESS:
            case PATHXWINDOW:
            case PATHXMANAGER:
            case PATHCONFMOD:
            case PATHDOCID:
            case PATHPACK:
            case PATHKVERS:
            case PATHSCRIPT:
            case LESS:
            case DGREAT:
            case LESSAND:
            case DLESSDASH:
            case LESSGREAT:
            case ANDGREAT:
            case CLOBBER:
            case PATHREL:
            case PATH:
                {
                alt613=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 613, 0, input);

                throw nvae;
            }

            switch (alt613) {
                case 1 :
                    // GrammarShellForMancoosi.g:15077:41: boolean_expressionGen+= boolean_expression
                    {
                    pushFollow(FOLLOW_boolean_expression_in_conditional_expression15960);
                    boolean_expressionGen=boolean_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_boolean_expressionGen==null) list_boolean_expressionGen=new ArrayList();
                    list_boolean_expressionGen.add(boolean_expressionGen);


                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15077:86: command_expressionGen+= command_expression
                    {
                    pushFollow(FOLLOW_command_expression_in_conditional_expression15967);
                    command_expressionGen=command_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_expressionGen==null) list_command_expressionGen=new ArrayList();
                    list_command_expressionGen.add(command_expressionGen);


                    }
                    break;

            }

            RSBRACKGen=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_conditional_expression15974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node conditional_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditional_expressionReturnNode.setKind("conditional_expression");
              	    // Create a CST Leaf
              		if(LSBRACKGen != null) {
              			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", (LSBRACKGen!=null?LSBRACKGen.getText():null), LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
              			conditional_expressionReturnNode.getChildren().add(LSBRACKGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(EXCLGen != null) {
              			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", (EXCLGen!=null?EXCLGen.getText():null), EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
              			conditional_expressionReturnNode.getChildren().add(EXCLGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_boolean_expressionGen != null) {
              	        for(Iterator it = list_boolean_expressionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.boolean_expression_return r = (GrammarShellForMancoosiParser.boolean_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("boolean_expression");
              	            	conditional_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_command_expressionGen != null) {
              	        for(Iterator it = list_command_expressionGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.command_expression_return r = (GrammarShellForMancoosiParser.command_expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("command_expression");
              	            	conditional_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RSBRACKGen != null) {
              			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", (RSBRACKGen!=null?RSBRACKGen.getText():null), RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
              			conditional_expressionReturnNode.getChildren().add(RSBRACKGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditional_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public static class boolean_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "boolean_expression"
    // GrammarShellForMancoosi.g:15122:1: boolean_expression returns [Node returnNode] : ( (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? (EQUGen= EQU | NOTEQUGen= NOTEQU ) (DQUOTEGen_2= DQUOTE )? paramGen+= param (DQUOTEGen_3= DQUOTE )? | (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? );
    public final GrammarShellForMancoosiParser.boolean_expression_return boolean_expression() throws RecognitionException {
        GrammarShellForMancoosiParser.boolean_expression_return retval = new GrammarShellForMancoosiParser.boolean_expression_return();
        retval.start = input.LT(1);

        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token NOTEQUGen=null;
        Token DQUOTEGen_2=null;
        Token DQUOTEGen_3=null;
        List list_wordGen=null;
        List list_paramGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:15123:1: ( (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? (EQUGen= EQU | NOTEQUGen= NOTEQU ) (DQUOTEGen_2= DQUOTE )? paramGen+= param (DQUOTEGen_3= DQUOTE )? | (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? )
            int alt621=2;
            int LA621_0 = input.LA(1);

            if ( (LA621_0==DQUOTE||LA621_0==UNDERSCORE||(LA621_0>=VAR && LA621_0<=ID)||(LA621_0>=80 && LA621_0<=82)||LA621_0==85||(LA621_0>=87 && LA621_0<=93)||(LA621_0>=95 && LA621_0<=101)||LA621_0==103||LA621_0==105||(LA621_0>=107 && LA621_0<=108)||(LA621_0>=110 && LA621_0<=112)||(LA621_0>=114 && LA621_0<=119)||(LA621_0>=121 && LA621_0<=144)||(LA621_0>=146 && LA621_0<=159)||(LA621_0>=161 && LA621_0<=175)||(LA621_0>=177 && LA621_0<=188)||(LA621_0>=190 && LA621_0<=195)||(LA621_0>=201 && LA621_0<=207)) ) {
                int LA621_1 = input.LA(2);

                if ( (synpred705_GrammarShellForMancoosi()) ) {
                    alt621=1;
                }
                else if ( (true) ) {
                    alt621=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 621, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 621, 0, input);

                throw nvae;
            }
            switch (alt621) {
                case 1 :
                    // GrammarShellForMancoosi.g:15123:4: (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? (EQUGen= EQU | NOTEQUGen= NOTEQU ) (DQUOTEGen_2= DQUOTE )? paramGen+= param (DQUOTEGen_3= DQUOTE )?
                    {
                    // GrammarShellForMancoosi.g:15123:13: (DQUOTEGen= DQUOTE )?
                    int alt614=2;
                    int LA614_0 = input.LA(1);

                    if ( (LA614_0==DQUOTE) ) {
                        alt614=1;
                    }
                    switch (alt614) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                            {
                            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression15996); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_word_in_boolean_expression16002);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    // GrammarShellForMancoosi.g:15123:49: (DQUOTEGen_1= DQUOTE )?
                    int alt615=2;
                    int LA615_0 = input.LA(1);

                    if ( (LA615_0==DQUOTE) ) {
                        alt615=1;
                    }
                    switch (alt615) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                            {
                            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression16007); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:15123:58: (EQUGen= EQU | NOTEQUGen= NOTEQU )
                    int alt616=2;
                    int LA616_0 = input.LA(1);

                    if ( (LA616_0==EQU) ) {
                        alt616=1;
                    }
                    else if ( (LA616_0==NOTEQU) ) {
                        alt616=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 616, 0, input);

                        throw nvae;
                    }
                    switch (alt616) {
                        case 1 :
                            // GrammarShellForMancoosi.g:15123:60: EQUGen= EQU
                            {
                            EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_boolean_expression16014); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // GrammarShellForMancoosi.g:15123:74: NOTEQUGen= NOTEQU
                            {
                            NOTEQUGen=(Token)match(input,NOTEQU,FOLLOW_NOTEQU_in_boolean_expression16021); if (state.failed) return retval;

                            }
                            break;

                    }

                    // GrammarShellForMancoosi.g:15123:104: (DQUOTEGen_2= DQUOTE )?
                    int alt617=2;
                    int LA617_0 = input.LA(1);

                    if ( (LA617_0==DQUOTE) ) {
                        alt617=1;
                    }
                    switch (alt617) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                            {
                            DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression16027); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_param_in_boolean_expression16033);
                    paramGen=param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_paramGen==null) list_paramGen=new ArrayList();
                    list_paramGen.add(paramGen);

                    // GrammarShellForMancoosi.g:15123:142: (DQUOTEGen_3= DQUOTE )?
                    int alt618=2;
                    int LA618_0 = input.LA(1);

                    if ( (LA618_0==DQUOTE) ) {
                        alt618=1;
                    }
                    switch (alt618) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                            {
                            DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression16038); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node boolean_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		boolean_expressionReturnNode.setKind("boolean_expression");
                      	    // Create a CST Leaf
                      		if(DQUOTEGen != null) {
                      			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(DQUOTEGen_1 != null) {
                      			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
                      		}
                      	    // Create a CST Leaf
                      		if(EQUGen != null) {
                      			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", (EQUGen!=null?EQUGen.getText():null), EQUGen.getCharPositionInLine(), EQUGen.getLine());
                      			boolean_expressionReturnNode.getChildren().add(EQUGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(NOTEQUGen != null) {
                      			Leaf NOTEQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NOTEQU", (NOTEQUGen!=null?NOTEQUGen.getText():null), NOTEQUGen.getCharPositionInLine(), NOTEQUGen.getLine());
                      			boolean_expressionReturnNode.getChildren().add(NOTEQUGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(DQUOTEGen_2 != null) {
                      			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_2!=null?DQUOTEGen_2.getText():null), DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_2Leaf);
                      		}
                      	    // Create a CST Node
                      		if(list_paramGen != null) {
                      	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("param");
                      	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(DQUOTEGen_3 != null) {
                      			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_3!=null?DQUOTEGen_3.getText():null), DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_3Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = boolean_expressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15181:5: (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )?
                    {
                    // GrammarShellForMancoosi.g:15181:14: (DQUOTEGen= DQUOTE )?
                    int alt619=2;
                    int LA619_0 = input.LA(1);

                    if ( (LA619_0==DQUOTE) ) {
                        alt619=1;
                    }
                    switch (alt619) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                            {
                            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression16051); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_word_in_boolean_expression16057);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    // GrammarShellForMancoosi.g:15181:50: (DQUOTEGen_1= DQUOTE )?
                    int alt620=2;
                    int LA620_0 = input.LA(1);

                    if ( (LA620_0==DQUOTE) ) {
                        alt620=1;
                    }
                    switch (alt620) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                            {
                            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_boolean_expression16062); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node boolean_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		boolean_expressionReturnNode.setKind("boolean_expression");
                      	    // Create a CST Leaf
                      		if(DQUOTEGen != null) {
                      			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(DQUOTEGen_1 != null) {
                      			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
                      			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = boolean_expressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_expression"

    public static class command_expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "command_expression"
    // GrammarShellForMancoosi.g:15211:1: command_expression returns [Node returnNode] : paramGen+= param ( (DQUOTEGen= DQUOTE )? paramGen_1+= param (DQUOTEGen_1= DQUOTE )? )* ;
    public final GrammarShellForMancoosiParser.command_expression_return command_expression() throws RecognitionException {
        GrammarShellForMancoosiParser.command_expression_return retval = new GrammarShellForMancoosiParser.command_expression_return();
        retval.start = input.LT(1);

        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        List list_paramGen=null;
        List list_paramGen_1=null;
        RuleReturnScope paramGen = null;
        RuleReturnScope paramGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:15212:1: (paramGen+= param ( (DQUOTEGen= DQUOTE )? paramGen_1+= param (DQUOTEGen_1= DQUOTE )? )* )
            // GrammarShellForMancoosi.g:15212:4: paramGen+= param ( (DQUOTEGen= DQUOTE )? paramGen_1+= param (DQUOTEGen_1= DQUOTE )? )*
            {
            pushFollow(FOLLOW_param_in_command_expression16085);
            paramGen=param();

            state._fsp--;
            if (state.failed) return retval;
            if (list_paramGen==null) list_paramGen=new ArrayList();
            list_paramGen.add(paramGen);

            // GrammarShellForMancoosi.g:15212:20: ( (DQUOTEGen= DQUOTE )? paramGen_1+= param (DQUOTEGen_1= DQUOTE )? )*
            loop624:
            do {
                int alt624=2;
                int LA624_0 = input.LA(1);

                if ( (LA624_0==DQUOTE||(LA624_0>=GREAT && LA624_0<=MINUS)||(LA624_0>=PATHEMACSINST && LA624_0<=PATHCOMPYTH)||(LA624_0>=PSINGLE && LA624_0<=BSLASH)||(LA624_0>=PATHMIME && LA624_0<=PATHP)||(LA624_0>=DLESS && LA624_0<=CLOBBER)||(LA624_0>=PATHREL && LA624_0<=ID)||(LA624_0>=80 && LA624_0<=82)||LA624_0==85||(LA624_0>=87 && LA624_0<=93)||(LA624_0>=95 && LA624_0<=101)||LA624_0==103||LA624_0==105||(LA624_0>=107 && LA624_0<=108)||(LA624_0>=110 && LA624_0<=112)||(LA624_0>=114 && LA624_0<=119)||(LA624_0>=121 && LA624_0<=144)||(LA624_0>=146 && LA624_0<=159)||(LA624_0>=161 && LA624_0<=175)||(LA624_0>=177 && LA624_0<=188)||(LA624_0>=190 && LA624_0<=195)||(LA624_0>=201 && LA624_0<=207)) ) {
                    alt624=1;
                }


                switch (alt624) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:15212:22: (DQUOTEGen= DQUOTE )? paramGen_1+= param (DQUOTEGen_1= DQUOTE )?
            	    {
            	    // GrammarShellForMancoosi.g:15212:31: (DQUOTEGen= DQUOTE )?
            	    int alt622=2;
            	    int LA622_0 = input.LA(1);

            	    if ( (LA622_0==DQUOTE) ) {
            	        alt622=1;
            	    }
            	    switch (alt622) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
            	            {
            	            DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_command_expression16091); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_param_in_command_expression16097);
            	    paramGen_1=param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_paramGen_1==null) list_paramGen_1=new ArrayList();
            	    list_paramGen_1.add(paramGen_1);

            	    // GrammarShellForMancoosi.g:15212:71: (DQUOTEGen_1= DQUOTE )?
            	    int alt623=2;
            	    int LA623_0 = input.LA(1);

            	    if ( (LA623_0==DQUOTE) ) {
            	        int LA623_1 = input.LA(2);

            	        if ( (synpred709_GrammarShellForMancoosi()) ) {
            	            alt623=1;
            	        }
            	    }
            	    switch (alt623) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
            	            {
            	            DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_command_expression16102); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop624;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node command_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		command_expressionReturnNode.setKind("command_expression");
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	command_expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal paramGen_1 aggregation
              		if(list_paramGen_1 != null) {
              	    for(int pos = 0; pos < list_paramGen_1.size(); pos++ )  { 
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			command_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              		// No Terminal extractor
              	    if(list_paramGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) list_paramGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("param");
              	    		command_expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			command_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = command_expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_expression"

    public static class simple_command_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "simple_command"
    // GrammarShellForMancoosi.g:15257:1: simple_command returns [Node returnNode] : (assignment_statementGen+= assignment_statement | command_nameGen+= command_name (paramsGen+= params )* );
    public final GrammarShellForMancoosiParser.simple_command_return simple_command() throws RecognitionException {
        GrammarShellForMancoosiParser.simple_command_return retval = new GrammarShellForMancoosiParser.simple_command_return();
        retval.start = input.LT(1);

        List list_assignment_statementGen=null;
        List list_command_nameGen=null;
        List list_paramsGen=null;
        RuleReturnScope assignment_statementGen = null;
        RuleReturnScope command_nameGen = null;
        RuleReturnScope paramsGen = null;
        try {
            // GrammarShellForMancoosi.g:15258:1: (assignment_statementGen+= assignment_statement | command_nameGen+= command_name (paramsGen+= params )* )
            int alt626=2;
            int LA626_0 = input.LA(1);

            if ( (LA626_0==UNDERSCORE||(LA626_0>=VAR && LA626_0<=ID)||(LA626_0>=80 && LA626_0<=82)||LA626_0==85||(LA626_0>=87 && LA626_0<=93)||(LA626_0>=95 && LA626_0<=101)||LA626_0==103||LA626_0==105||(LA626_0>=107 && LA626_0<=108)||(LA626_0>=110 && LA626_0<=112)||(LA626_0>=114 && LA626_0<=119)||(LA626_0>=121 && LA626_0<=144)||(LA626_0>=146 && LA626_0<=159)||(LA626_0>=161 && LA626_0<=175)||(LA626_0>=177 && LA626_0<=188)||(LA626_0>=190 && LA626_0<=195)||(LA626_0>=201 && LA626_0<=207)) ) {
                int LA626_1 = input.LA(2);

                if ( (synpred711_GrammarShellForMancoosi()) ) {
                    alt626=1;
                }
                else if ( (true) ) {
                    alt626=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 626, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA626_0==PATHNULL||(LA626_0>=PATHEMACSINST && LA626_0<=PATHEMACSREM)||(LA626_0>=PATHGCONFSCH && LA626_0<=PATHOLDSCHEMA)||LA626_0==PATHCOMPYTH||(LA626_0>=PATHMIME && LA626_0<=PATHP)||(LA626_0>=PATHXWINDOW && LA626_0<=PATHSCRIPT)||(LA626_0>=PATHREL && LA626_0<=PATH)) ) {
                alt626=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 626, 0, input);

                throw nvae;
            }
            switch (alt626) {
                case 1 :
                    // GrammarShellForMancoosi.g:15258:4: assignment_statementGen+= assignment_statement
                    {
                    pushFollow(FOLLOW_assignment_statement_in_simple_command16128);
                    assignment_statementGen=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_assignment_statementGen==null) list_assignment_statementGen=new ArrayList();
                    list_assignment_statementGen.add(assignment_statementGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simple_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_commandReturnNode.setKind("simple_command");
                      	    // Create a CST Node
                      		if(list_assignment_statementGen != null) {
                      	        for(Iterator it = list_assignment_statementGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.assignment_statement_return r = (GrammarShellForMancoosiParser.assignment_statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("assignment_statement");
                      	            	simple_commandReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_commandReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15276:5: command_nameGen+= command_name (paramsGen+= params )*
                    {
                    pushFollow(FOLLOW_command_name_in_simple_command16140);
                    command_nameGen=command_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
                    list_command_nameGen.add(command_nameGen);

                    // GrammarShellForMancoosi.g:15276:35: (paramsGen+= params )*
                    loop625:
                    do {
                        int alt625=2;
                        int LA625_0 = input.LA(1);

                        if ( (LA625_0==DQUOTE||(LA625_0>=GREAT && LA625_0<=MINUS)||(LA625_0>=PATHEMACSINST && LA625_0<=PATHCOMPYTH)||(LA625_0>=PSINGLE && LA625_0<=BSLASH)||(LA625_0>=PATHMIME && LA625_0<=PATHP)||(LA625_0>=DLESS && LA625_0<=CLOBBER)||(LA625_0>=PATHREL && LA625_0<=ID)||(LA625_0>=80 && LA625_0<=82)||LA625_0==85||(LA625_0>=87 && LA625_0<=93)||(LA625_0>=95 && LA625_0<=101)||LA625_0==103||LA625_0==105||(LA625_0>=107 && LA625_0<=108)||(LA625_0>=110 && LA625_0<=112)||(LA625_0>=114 && LA625_0<=119)||(LA625_0>=121 && LA625_0<=144)||(LA625_0>=146 && LA625_0<=159)||(LA625_0>=161 && LA625_0<=175)||(LA625_0>=177 && LA625_0<=188)||(LA625_0>=190 && LA625_0<=195)||(LA625_0>=201 && LA625_0<=207)) ) {
                            alt625=1;
                        }


                        switch (alt625) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:15276:37: paramsGen+= params
                    	    {
                    	    pushFollow(FOLLOW_params_in_simple_command16146);
                    	    paramsGen=params();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_paramsGen==null) list_paramsGen=new ArrayList();
                    	    list_paramsGen.add(paramsGen);


                    	    }
                    	    break;

                    	default :
                    	    break loop625;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simple_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simple_commandReturnNode.setKind("simple_command");
                      	    // Create a CST Node
                      		if(list_command_nameGen != null) {
                      	        for(Iterator it = list_command_nameGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.command_name_return r = (GrammarShellForMancoosiParser.command_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("command_name");
                      	            	simple_commandReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_paramsGen != null) {
                      	        for(Iterator it = list_paramsGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.params_return r = (GrammarShellForMancoosiParser.params_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("params");
                      	            	simple_commandReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simple_commandReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_command"

    public static class params_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "params"
    // GrammarShellForMancoosi.g:15306:1: params returns [Node returnNode] : (DQUOTEGen= DQUOTE )? (PSINGLEGen= PSINGLE )? (paramGen+= param )+ (PSINGLEGen_1= PSINGLE )? (DQUOTEGen_1= DQUOTE )? ;
    public final GrammarShellForMancoosiParser.params_return params() throws RecognitionException {
        GrammarShellForMancoosiParser.params_return retval = new GrammarShellForMancoosiParser.params_return();
        retval.start = input.LT(1);

        Token DQUOTEGen=null;
        Token PSINGLEGen=null;
        Token PSINGLEGen_1=null;
        Token DQUOTEGen_1=null;
        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        try {
            // GrammarShellForMancoosi.g:15307:1: ( (DQUOTEGen= DQUOTE )? (PSINGLEGen= PSINGLE )? (paramGen+= param )+ (PSINGLEGen_1= PSINGLE )? (DQUOTEGen_1= DQUOTE )? )
            // GrammarShellForMancoosi.g:15307:4: (DQUOTEGen= DQUOTE )? (PSINGLEGen= PSINGLE )? (paramGen+= param )+ (PSINGLEGen_1= PSINGLE )? (DQUOTEGen_1= DQUOTE )?
            {
            // GrammarShellForMancoosi.g:15307:13: (DQUOTEGen= DQUOTE )?
            int alt627=2;
            int LA627_0 = input.LA(1);

            if ( (LA627_0==DQUOTE) ) {
                alt627=1;
            }
            switch (alt627) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                    {
                    DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_params16170); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:15307:33: (PSINGLEGen= PSINGLE )?
            int alt628=2;
            int LA628_0 = input.LA(1);

            if ( (LA628_0==PSINGLE) ) {
                int LA628_1 = input.LA(2);

                if ( (synpred714_GrammarShellForMancoosi()) ) {
                    alt628=1;
                }
            }
            switch (alt628) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: PSINGLEGen= PSINGLE
                    {
                    PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_params16176); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:15307:43: (paramGen+= param )+
            int cnt629=0;
            loop629:
            do {
                int alt629=2;
                int LA629_0 = input.LA(1);

                if ( ((LA629_0>=GREAT && LA629_0<=MINUS)||(LA629_0>=PATHEMACSINST && LA629_0<=PATHCOMPYTH)||(LA629_0>=PSINGLE && LA629_0<=BSLASH)||(LA629_0>=PATHMIME && LA629_0<=PATHP)||(LA629_0>=DLESS && LA629_0<=CLOBBER)||(LA629_0>=PATHREL && LA629_0<=ID)||(LA629_0>=80 && LA629_0<=82)||LA629_0==85||(LA629_0>=87 && LA629_0<=93)||(LA629_0>=95 && LA629_0<=101)||LA629_0==103||LA629_0==105||(LA629_0>=107 && LA629_0<=108)||(LA629_0>=110 && LA629_0<=112)||(LA629_0>=114 && LA629_0<=119)||(LA629_0>=121 && LA629_0<=144)||(LA629_0>=146 && LA629_0<=159)||(LA629_0>=161 && LA629_0<=175)||(LA629_0>=177 && LA629_0<=188)||(LA629_0>=190 && LA629_0<=195)||(LA629_0>=201 && LA629_0<=207)) ) {
                    int LA629_2 = input.LA(2);

                    if ( (synpred715_GrammarShellForMancoosi()) ) {
                        alt629=1;
                    }


                }


                switch (alt629) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:15307:45: paramGen+= param
            	    {
            	    pushFollow(FOLLOW_param_in_params16183);
            	    paramGen=param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_paramGen==null) list_paramGen=new ArrayList();
            	    list_paramGen.add(paramGen);


            	    }
            	    break;

            	default :
            	    if ( cnt629 >= 1 ) break loop629;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(629, input);
                        throw eee;
                }
                cnt629++;
            } while (true);

            // GrammarShellForMancoosi.g:15307:76: (PSINGLEGen_1= PSINGLE )?
            int alt630=2;
            int LA630_0 = input.LA(1);

            if ( (LA630_0==PSINGLE) ) {
                int LA630_1 = input.LA(2);

                if ( (synpred716_GrammarShellForMancoosi()) ) {
                    alt630=1;
                }
            }
            switch (alt630) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: PSINGLEGen_1= PSINGLE
                    {
                    PSINGLEGen_1=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_params16190); if (state.failed) return retval;

                    }
                    break;

            }

            // GrammarShellForMancoosi.g:15307:98: (DQUOTEGen_1= DQUOTE )?
            int alt631=2;
            int LA631_0 = input.LA(1);

            if ( (LA631_0==DQUOTE) ) {
                int LA631_2 = input.LA(2);

                if ( (synpred717_GrammarShellForMancoosi()) ) {
                    alt631=1;
                }
            }
            switch (alt631) {
                case 1 :
                    // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                    {
                    DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_params16196); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node paramsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		paramsReturnNode.setKind("params");
              	    // Create a CST Leaf
              		if(DQUOTEGen != null) {
              			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen!=null?DQUOTEGen.getText():null), DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
              			paramsReturnNode.getChildren().add(DQUOTEGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(PSINGLEGen != null) {
              			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen!=null?PSINGLEGen.getText():null), PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
              			paramsReturnNode.getChildren().add(PSINGLEGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_paramGen != null) {
              	        for(Iterator it = list_paramGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.param_return r = (GrammarShellForMancoosiParser.param_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("param");
              	            	paramsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(PSINGLEGen_1 != null) {
              			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen_1!=null?PSINGLEGen_1.getText():null), PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
              			paramsReturnNode.getChildren().add(PSINGLEGen_1Leaf);
              		}
              	    // Create a CST Leaf
              		if(DQUOTEGen_1 != null) {
              			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", (DQUOTEGen_1!=null?DQUOTEGen_1.getText():null), DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
              			paramsReturnNode.getChildren().add(DQUOTEGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = paramsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "params"

    public static class param_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "param"
    // GrammarShellForMancoosi.g:15347:1: param returns [Node returnNode] : (option_paramGen+= option_param | wordGen+= word | pathGen+= path | redirectionGen+= redirection | NUMBERGen= NUMBER | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | command_nameGen+= command_name | BSLASHGen= BSLASH | SLASHGen= SLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' | APGen= AP );
    public final GrammarShellForMancoosiParser.param_return param() throws RecognitionException {
        GrammarShellForMancoosiParser.param_return retval = new GrammarShellForMancoosiParser.param_return();
        retval.start = input.LT(1);

        Token NUMBERGen=null;
        Token COLONGen=null;
        Token APGen=null;
        Token APGen_1=null;
        Token BSLASHGen=null;
        Token SLASHGen=null;
        Token PSINGLEGen=null;
        Token TILDEGen=null;
        Token TK_0=null;
        List list_option_paramGen=null;
        List list_wordGen=null;
        List list_pathGen=null;
        List list_redirectionGen=null;
        List list_nestedCommandGen=null;
        List list_command_nameGen=null;
        RuleReturnScope option_paramGen = null;
        RuleReturnScope wordGen = null;
        RuleReturnScope pathGen = null;
        RuleReturnScope redirectionGen = null;
        RuleReturnScope nestedCommandGen = null;
        RuleReturnScope command_nameGen = null;
        try {
            // GrammarShellForMancoosi.g:15348:1: (option_paramGen+= option_param | wordGen+= word | pathGen+= path | redirectionGen+= redirection | NUMBERGen= NUMBER | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | command_nameGen+= command_name | BSLASHGen= BSLASH | SLASHGen= SLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' | APGen= AP )
            int alt632=14;
            alt632 = dfa632.predict(input);
            switch (alt632) {
                case 1 :
                    // GrammarShellForMancoosi.g:15348:4: option_paramGen+= option_param
                    {
                    pushFollow(FOLLOW_option_param_in_param16221);
                    option_paramGen=option_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_option_paramGen==null) list_option_paramGen=new ArrayList();
                    list_option_paramGen.add(option_paramGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Node
                      		if(list_option_paramGen != null) {
                      	        for(Iterator it = list_option_paramGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.option_param_return r = (GrammarShellForMancoosiParser.option_param_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("option_param");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15366:5: wordGen+= word
                    {
                    pushFollow(FOLLOW_word_in_param16233);
                    wordGen=word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wordGen==null) list_wordGen=new ArrayList();
                    list_wordGen.add(wordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:15384:5: pathGen+= path
                    {
                    pushFollow(FOLLOW_path_in_param16245);
                    pathGen=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pathGen==null) list_pathGen=new ArrayList();
                    list_pathGen.add(pathGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Node
                      		if(list_pathGen != null) {
                      	        for(Iterator it = list_pathGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.path_return r = (GrammarShellForMancoosiParser.path_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("path");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:15402:5: redirectionGen+= redirection
                    {
                    pushFollow(FOLLOW_redirection_in_param16257);
                    redirectionGen=redirection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_redirectionGen==null) list_redirectionGen=new ArrayList();
                    list_redirectionGen.add(redirectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Node
                      		if(list_redirectionGen != null) {
                      	        for(Iterator it = list_redirectionGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.redirection_return r = (GrammarShellForMancoosiParser.redirection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("redirection");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:15420:5: NUMBERGen= NUMBER
                    {
                    NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_param16269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(NUMBERGen != null) {
                      			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", (NUMBERGen!=null?NUMBERGen.getText():null), NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
                      			paramReturnNode.getChildren().add(NUMBERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:15433:5: COLONGen= COLON
                    {
                    COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_param16281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(COLONGen != null) {
                      			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", (COLONGen!=null?COLONGen.getText():null), COLONGen.getCharPositionInLine(), COLONGen.getLine());
                      			paramReturnNode.getChildren().add(COLONGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:15446:5: APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP
                    {
                    APGen=(Token)match(input,AP,FOLLOW_AP_in_param16293); if (state.failed) return retval;
                    pushFollow(FOLLOW_nestedCommand_in_param16298);
                    nestedCommandGen=nestedCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_nestedCommandGen==null) list_nestedCommandGen=new ArrayList();
                    list_nestedCommandGen.add(nestedCommandGen);

                    APGen_1=(Token)match(input,AP,FOLLOW_AP_in_param16303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(APGen != null) {
                      			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
                      			paramReturnNode.getChildren().add(APGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_nestedCommandGen != null) {
                      	        for(Iterator it = list_nestedCommandGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.nestedCommand_return r = (GrammarShellForMancoosiParser.nestedCommand_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nestedCommand");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Leaf
                      		if(APGen_1 != null) {
                      			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen_1!=null?APGen_1.getText():null), APGen_1.getCharPositionInLine(), APGen_1.getLine());
                      			paramReturnNode.getChildren().add(APGen_1Leaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:15474:5: command_nameGen+= command_name
                    {
                    pushFollow(FOLLOW_command_name_in_param16315);
                    command_nameGen=command_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
                    list_command_nameGen.add(command_nameGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Node
                      		if(list_command_nameGen != null) {
                      	        for(Iterator it = list_command_nameGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.command_name_return r = (GrammarShellForMancoosiParser.command_name_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("command_name");
                      	            	paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:15492:5: BSLASHGen= BSLASH
                    {
                    BSLASHGen=(Token)match(input,BSLASH,FOLLOW_BSLASH_in_param16327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(BSLASHGen != null) {
                      			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", (BSLASHGen!=null?BSLASHGen.getText():null), BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
                      			paramReturnNode.getChildren().add(BSLASHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:15505:5: SLASHGen= SLASH
                    {
                    SLASHGen=(Token)match(input,SLASH,FOLLOW_SLASH_in_param16339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(SLASHGen != null) {
                      			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", (SLASHGen!=null?SLASHGen.getText():null), SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
                      			paramReturnNode.getChildren().add(SLASHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:15518:5: PSINGLEGen= PSINGLE
                    {
                    PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_param16351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(PSINGLEGen != null) {
                      			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", (PSINGLEGen!=null?PSINGLEGen.getText():null), PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
                      			paramReturnNode.getChildren().add(PSINGLEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // GrammarShellForMancoosi.g:15531:5: TILDEGen= TILDE
                    {
                    TILDEGen=(Token)match(input,TILDE,FOLLOW_TILDE_in_param16363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(TILDEGen != null) {
                      			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", (TILDEGen!=null?TILDEGen.getText():null), TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
                      			paramReturnNode.getChildren().add(TILDEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // GrammarShellForMancoosi.g:15544:5: TK_0= '*'
                    {
                    TK_0=(Token)match(input,166,FOLLOW_166_in_param16375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		paramReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // GrammarShellForMancoosi.g:15557:5: APGen= AP
                    {
                    APGen=(Token)match(input,AP,FOLLOW_AP_in_param16387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		paramReturnNode.setKind("param");
                      	    // Create a CST Leaf
                      		if(APGen != null) {
                      			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", (APGen!=null?APGen.getText():null), APGen.getCharPositionInLine(), APGen.getLine());
                      			paramReturnNode.getChildren().add(APGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = paramReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param"

    public static class option_param_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "option_param"
    // GrammarShellForMancoosi.g:15572:1: option_param returns [Node returnNode] : (MINUSGen= MINUS (wordGen+= word )? | DMINUSGen= DMINUS (wordGen+= word )? );
    public final GrammarShellForMancoosiParser.option_param_return option_param() throws RecognitionException {
        GrammarShellForMancoosiParser.option_param_return retval = new GrammarShellForMancoosiParser.option_param_return();
        retval.start = input.LT(1);

        Token MINUSGen=null;
        Token DMINUSGen=null;
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        try {
            // GrammarShellForMancoosi.g:15573:1: (MINUSGen= MINUS (wordGen+= word )? | DMINUSGen= DMINUS (wordGen+= word )? )
            int alt635=2;
            int LA635_0 = input.LA(1);

            if ( (LA635_0==MINUS) ) {
                alt635=1;
            }
            else if ( (LA635_0==DMINUS) ) {
                alt635=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 635, 0, input);

                throw nvae;
            }
            switch (alt635) {
                case 1 :
                    // GrammarShellForMancoosi.g:15573:4: MINUSGen= MINUS (wordGen+= word )?
                    {
                    MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_option_param16409); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:15573:27: (wordGen+= word )?
                    int alt633=2;
                    int LA633_0 = input.LA(1);

                    if ( (LA633_0==UNDERSCORE||(LA633_0>=VAR && LA633_0<=ID)||(LA633_0>=80 && LA633_0<=82)||LA633_0==85||(LA633_0>=87 && LA633_0<=93)||(LA633_0>=95 && LA633_0<=101)||LA633_0==103||LA633_0==105||(LA633_0>=107 && LA633_0<=108)||(LA633_0>=110 && LA633_0<=112)||(LA633_0>=114 && LA633_0<=119)||(LA633_0>=121 && LA633_0<=144)||(LA633_0>=146 && LA633_0<=159)||(LA633_0>=161 && LA633_0<=175)||(LA633_0>=177 && LA633_0<=188)||(LA633_0>=190 && LA633_0<=195)||(LA633_0>=201 && LA633_0<=207)) ) {
                        int LA633_1 = input.LA(2);

                        if ( (synpred731_GrammarShellForMancoosi()) ) {
                            alt633=1;
                        }
                    }
                    switch (alt633) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: wordGen+= word
                            {
                            pushFollow(FOLLOW_word_in_option_param16414);
                            wordGen=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_wordGen==null) list_wordGen=new ArrayList();
                            list_wordGen.add(wordGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node option_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		option_paramReturnNode.setKind("option_param");
                      	    // Create a CST Leaf
                      		if(MINUSGen != null) {
                      			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", (MINUSGen!=null?MINUSGen.getText():null), MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
                      			option_paramReturnNode.getChildren().add(MINUSGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	option_paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = option_paramReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15596:5: DMINUSGen= DMINUS (wordGen+= word )?
                    {
                    DMINUSGen=(Token)match(input,DMINUS,FOLLOW_DMINUS_in_option_param16427); if (state.failed) return retval;
                    // GrammarShellForMancoosi.g:15596:30: (wordGen+= word )?
                    int alt634=2;
                    int LA634_0 = input.LA(1);

                    if ( (LA634_0==UNDERSCORE||(LA634_0>=VAR && LA634_0<=ID)||(LA634_0>=80 && LA634_0<=82)||LA634_0==85||(LA634_0>=87 && LA634_0<=93)||(LA634_0>=95 && LA634_0<=101)||LA634_0==103||LA634_0==105||(LA634_0>=107 && LA634_0<=108)||(LA634_0>=110 && LA634_0<=112)||(LA634_0>=114 && LA634_0<=119)||(LA634_0>=121 && LA634_0<=144)||(LA634_0>=146 && LA634_0<=159)||(LA634_0>=161 && LA634_0<=175)||(LA634_0>=177 && LA634_0<=188)||(LA634_0>=190 && LA634_0<=195)||(LA634_0>=201 && LA634_0<=207)) ) {
                        int LA634_2 = input.LA(2);

                        if ( (synpred733_GrammarShellForMancoosi()) ) {
                            alt634=1;
                        }
                    }
                    switch (alt634) {
                        case 1 :
                            // GrammarShellForMancoosi.g:0:0: wordGen+= word
                            {
                            pushFollow(FOLLOW_word_in_option_param16432);
                            wordGen=word();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_wordGen==null) list_wordGen=new ArrayList();
                            list_wordGen.add(wordGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node option_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		option_paramReturnNode.setKind("option_param");
                      	    // Create a CST Leaf
                      		if(DMINUSGen != null) {
                      			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", (DMINUSGen!=null?DMINUSGen.getText():null), DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
                      			option_paramReturnNode.getChildren().add(DMINUSGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_wordGen != null) {
                      	        for(Iterator it = list_wordGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.word_return r = (GrammarShellForMancoosiParser.word_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("word");
                      	            	option_paramReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = option_paramReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "option_param"

    public static class word_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "word"
    // GrammarShellForMancoosi.g:15621:1: word returns [Node returnNode] : (input_variableGen+= input_variable | in_command_variableGen+= in_command_variable | shell_variableGen+= shell_variable | special_variableGen+= special_variable | external_variableGen+= external_variable | substitution_variableGen+= substitution_variable | idGen+= id );
    public final GrammarShellForMancoosiParser.word_return word() throws RecognitionException {
        GrammarShellForMancoosiParser.word_return retval = new GrammarShellForMancoosiParser.word_return();
        retval.start = input.LT(1);

        List list_input_variableGen=null;
        List list_in_command_variableGen=null;
        List list_shell_variableGen=null;
        List list_special_variableGen=null;
        List list_external_variableGen=null;
        List list_substitution_variableGen=null;
        List list_idGen=null;
        RuleReturnScope input_variableGen = null;
        RuleReturnScope in_command_variableGen = null;
        RuleReturnScope shell_variableGen = null;
        RuleReturnScope special_variableGen = null;
        RuleReturnScope external_variableGen = null;
        RuleReturnScope substitution_variableGen = null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:15622:1: (input_variableGen+= input_variable | in_command_variableGen+= in_command_variable | shell_variableGen+= shell_variable | special_variableGen+= special_variable | external_variableGen+= external_variable | substitution_variableGen+= substitution_variable | idGen+= id )
            int alt636=7;
            switch ( input.LA(1) ) {
            case VARINPUT:
                {
                alt636=1;
                }
                break;
            case ID:
            case 80:
            case 81:
            case 82:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 103:
            case 107:
            case 108:
            case 110:
            case 111:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 139:
            case 142:
            case 143:
            case 144:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 177:
            case 178:
            case 179:
            case 181:
            case 182:
            case 183:
            case 185:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
                {
                alt636=7;
                }
                break;
            case VARQMARK:
            case VARDOLLAR:
            case VAREXCL:
            case VARSTAR:
            case VARAT:
                {
                alt636=4;
                }
                break;
            case UNDERSCORE:
                {
                alt636=5;
                }
                break;
            case VARHOME:
            case VARPATH:
            case VARPS:
                {
                alt636=3;
                }
                break;
            case VAR:
            case 101:
            case 105:
            case 123:
            case 127:
            case 138:
            case 140:
            case 141:
            case 180:
            case 184:
            case 186:
            case 187:
            case 188:
                {
                alt636=2;
                }
                break;
            case 146:
                {
                int LA636_7 = input.LA(2);

                if ( (synpred738_GrammarShellForMancoosi()) ) {
                    alt636=5;
                }
                else if ( (synpred739_GrammarShellForMancoosi()) ) {
                    alt636=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 636, 7, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 636, 0, input);

                throw nvae;
            }

            switch (alt636) {
                case 1 :
                    // GrammarShellForMancoosi.g:15622:4: input_variableGen+= input_variable
                    {
                    pushFollow(FOLLOW_input_variable_in_word16455);
                    input_variableGen=input_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_input_variableGen==null) list_input_variableGen=new ArrayList();
                    list_input_variableGen.add(input_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_input_variableGen != null) {
                      	        for(Iterator it = list_input_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.input_variable_return r = (GrammarShellForMancoosiParser.input_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("input_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15640:5: in_command_variableGen+= in_command_variable
                    {
                    pushFollow(FOLLOW_in_command_variable_in_word16467);
                    in_command_variableGen=in_command_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_in_command_variableGen==null) list_in_command_variableGen=new ArrayList();
                    list_in_command_variableGen.add(in_command_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_in_command_variableGen != null) {
                      	        for(Iterator it = list_in_command_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.in_command_variable_return r = (GrammarShellForMancoosiParser.in_command_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("in_command_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:15658:5: shell_variableGen+= shell_variable
                    {
                    pushFollow(FOLLOW_shell_variable_in_word16479);
                    shell_variableGen=shell_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_shell_variableGen==null) list_shell_variableGen=new ArrayList();
                    list_shell_variableGen.add(shell_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_shell_variableGen != null) {
                      	        for(Iterator it = list_shell_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.shell_variable_return r = (GrammarShellForMancoosiParser.shell_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("shell_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:15676:5: special_variableGen+= special_variable
                    {
                    pushFollow(FOLLOW_special_variable_in_word16491);
                    special_variableGen=special_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_special_variableGen==null) list_special_variableGen=new ArrayList();
                    list_special_variableGen.add(special_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_special_variableGen != null) {
                      	        for(Iterator it = list_special_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.special_variable_return r = (GrammarShellForMancoosiParser.special_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("special_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:15694:5: external_variableGen+= external_variable
                    {
                    pushFollow(FOLLOW_external_variable_in_word16503);
                    external_variableGen=external_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_external_variableGen==null) list_external_variableGen=new ArrayList();
                    list_external_variableGen.add(external_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_external_variableGen != null) {
                      	        for(Iterator it = list_external_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.external_variable_return r = (GrammarShellForMancoosiParser.external_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("external_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:15712:5: substitution_variableGen+= substitution_variable
                    {
                    pushFollow(FOLLOW_substitution_variable_in_word16515);
                    substitution_variableGen=substitution_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_substitution_variableGen==null) list_substitution_variableGen=new ArrayList();
                    list_substitution_variableGen.add(substitution_variableGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_substitution_variableGen != null) {
                      	        for(Iterator it = list_substitution_variableGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.substitution_variable_return r = (GrammarShellForMancoosiParser.substitution_variable_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("substitution_variable");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:15730:5: idGen+= id
                    {
                    pushFollow(FOLLOW_id_in_word16527);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		wordReturnNode.setKind("word");
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	wordReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = wordReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "word"

    public static class pipeline_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "pipeline"
    // GrammarShellForMancoosi.g:15750:1: pipeline returns [Node returnNode] : (TK_0= 'time' )? simple_commandGen+= simple_command (VBARGen_List+= VBAR (TK_1= '\\n' )? simple_commandGen_1+= simple_command )* ;
    public final GrammarShellForMancoosiParser.pipeline_return pipeline() throws RecognitionException {
        GrammarShellForMancoosiParser.pipeline_return retval = new GrammarShellForMancoosiParser.pipeline_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token TK_1=null;
        Token VBARGen_List=null;
        List list_VBARGen_List=null;
        List list_simple_commandGen=null;
        List list_simple_commandGen_1=null;
        RuleReturnScope simple_commandGen = null;
        RuleReturnScope simple_commandGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:15751:1: ( (TK_0= 'time' )? simple_commandGen+= simple_command (VBARGen_List+= VBAR (TK_1= '\\n' )? simple_commandGen_1+= simple_command )* )
            // GrammarShellForMancoosi.g:15751:3: (TK_0= 'time' )? simple_commandGen+= simple_command (VBARGen_List+= VBAR (TK_1= '\\n' )? simple_commandGen_1+= simple_command )*
            {
            // GrammarShellForMancoosi.g:15751:3: (TK_0= 'time' )?
            int alt637=2;
            int LA637_0 = input.LA(1);

            if ( (LA637_0==200) ) {
                alt637=1;
            }
            switch (alt637) {
                case 1 :
                    // GrammarShellForMancoosi.g:15751:5: TK_0= 'time'
                    {
                    TK_0=(Token)match(input,200,FOLLOW_200_in_pipeline16551); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_simple_command_in_pipeline16558);
            simple_commandGen=simple_command();

            state._fsp--;
            if (state.failed) return retval;
            if (list_simple_commandGen==null) list_simple_commandGen=new ArrayList();
            list_simple_commandGen.add(simple_commandGen);

            // GrammarShellForMancoosi.g:15751:54: (VBARGen_List+= VBAR (TK_1= '\\n' )? simple_commandGen_1+= simple_command )*
            loop639:
            do {
                int alt639=2;
                int LA639_0 = input.LA(1);

                if ( (LA639_0==VBAR) ) {
                    alt639=1;
                }


                switch (alt639) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:15751:56: VBARGen_List+= VBAR (TK_1= '\\n' )? simple_commandGen_1+= simple_command
            	    {
            	    VBARGen_List=(Token)match(input,VBAR,FOLLOW_VBAR_in_pipeline16564); if (state.failed) return retval;
            	    if (list_VBARGen_List==null) list_VBARGen_List=new ArrayList();
            	    list_VBARGen_List.add(VBARGen_List);

            	    // GrammarShellForMancoosi.g:15751:75: (TK_1= '\\n' )?
            	    int alt638=2;
            	    int LA638_0 = input.LA(1);

            	    if ( (LA638_0==78) ) {
            	        alt638=1;
            	    }
            	    switch (alt638) {
            	        case 1 :
            	            // GrammarShellForMancoosi.g:15751:77: TK_1= '\\n'
            	            {
            	            TK_1=(Token)match(input,78,FOLLOW_78_in_pipeline16570); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_command_in_pipeline16577);
            	    simple_commandGen_1=simple_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_simple_commandGen_1==null) list_simple_commandGen_1=new ArrayList();
            	    list_simple_commandGen_1.add(simple_commandGen_1);


            	    }
            	    break;

            	default :
            	    break loop639;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node pipelineReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pipelineReturnNode.setKind("pipeline");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		pipelineReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_simple_commandGen != null) {
              	        for(Iterator it = list_simple_commandGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.simple_command_return r = (GrammarShellForMancoosiParser.simple_command_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simple_command");
              	            	pipelineReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal VBARGen_List aggregation
              		if(list_VBARGen_List != null) {
              	    for(int pos = 0; pos < list_VBARGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_VBARGen_List != null) {
              		    Token t = (Token) list_VBARGen_List.get(pos); 
              		    Leaf VBARGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", t.getText(), t.getCharPositionInLine(), t.getLine());
              			pipelineReturnNode.getChildren().add(VBARGen_ListLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		pipelineReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_simple_commandGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.simple_command_return r = (GrammarShellForMancoosiParser.simple_command_return) list_simple_commandGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("simple_command");
              	    		pipelineReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pipelineReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pipeline"

    public static class list_of_commands_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "list_of_commands"
    // GrammarShellForMancoosi.g:15802:1: list_of_commands returns [Node returnNode] : (pipelineGen+= pipeline ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )* | asynchronousGen+= asynchronous );
    public final GrammarShellForMancoosiParser.list_of_commands_return list_of_commands() throws RecognitionException {
        GrammarShellForMancoosiParser.list_of_commands_return retval = new GrammarShellForMancoosiParser.list_of_commands_return();
        retval.start = input.LT(1);

        Token ANDGen=null;
        Token ORGen=null;
        List list_pipelineGen=null;
        List list_pipelineGen_1=null;
        List list_asynchronousGen=null;
        RuleReturnScope pipelineGen = null;
        RuleReturnScope pipelineGen_1 = null;
        RuleReturnScope asynchronousGen = null;
        try {
            // GrammarShellForMancoosi.g:15803:1: (pipelineGen+= pipeline ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )* | asynchronousGen+= asynchronous )
            int alt642=2;
            int LA642_0 = input.LA(1);

            if ( (LA642_0==PATHNULL||(LA642_0>=PATHEMACSINST && LA642_0<=PATHEMACSREM)||(LA642_0>=PATHGCONFSCH && LA642_0<=UNDERSCORE)||LA642_0==PATHCOMPYTH||(LA642_0>=PATHMIME && LA642_0<=PATHP)||(LA642_0>=PATHXWINDOW && LA642_0<=PATHSCRIPT)||(LA642_0>=PATHREL && LA642_0<=ID)||(LA642_0>=80 && LA642_0<=82)||LA642_0==85||(LA642_0>=87 && LA642_0<=93)||(LA642_0>=95 && LA642_0<=101)||LA642_0==103||LA642_0==105||(LA642_0>=107 && LA642_0<=108)||(LA642_0>=110 && LA642_0<=112)||(LA642_0>=114 && LA642_0<=119)||(LA642_0>=121 && LA642_0<=144)||(LA642_0>=146 && LA642_0<=159)||(LA642_0>=161 && LA642_0<=175)||(LA642_0>=177 && LA642_0<=188)||(LA642_0>=190 && LA642_0<=195)||(LA642_0>=200 && LA642_0<=207)) ) {
                int LA642_1 = input.LA(2);

                if ( (synpred745_GrammarShellForMancoosi()) ) {
                    alt642=1;
                }
                else if ( (true) ) {
                    alt642=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 642, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);

                throw nvae;
            }
            switch (alt642) {
                case 1 :
                    // GrammarShellForMancoosi.g:15803:4: pipelineGen+= pipeline ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )*
                    {
                    pushFollow(FOLLOW_pipeline_in_list_of_commands16601);
                    pipelineGen=pipeline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pipelineGen==null) list_pipelineGen=new ArrayList();
                    list_pipelineGen.add(pipelineGen);

                    // GrammarShellForMancoosi.g:15803:26: ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )*
                    loop641:
                    do {
                        int alt641=2;
                        int LA641_0 = input.LA(1);

                        if ( (LA641_0==AND||LA641_0==OR) ) {
                            alt641=1;
                        }


                        switch (alt641) {
                    	case 1 :
                    	    // GrammarShellForMancoosi.g:15803:27: (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline
                    	    {
                    	    // GrammarShellForMancoosi.g:15803:27: (ANDGen= AND | ORGen= OR )
                    	    int alt640=2;
                    	    int LA640_0 = input.LA(1);

                    	    if ( (LA640_0==AND) ) {
                    	        alt640=1;
                    	    }
                    	    else if ( (LA640_0==OR) ) {
                    	        alt640=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 640, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt640) {
                    	        case 1 :
                    	            // GrammarShellForMancoosi.g:15803:29: ANDGen= AND
                    	            {
                    	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_list_of_commands16608); if (state.failed) return retval;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // GrammarShellForMancoosi.g:15803:43: ORGen= OR
                    	            {
                    	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_list_of_commands16615); if (state.failed) return retval;

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_pipeline_in_list_of_commands16621);
                    	    pipelineGen_1=pipeline();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
                    	    list_pipelineGen_1.add(pipelineGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop641;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node list_of_commandsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		list_of_commandsReturnNode.setKind("list_of_commands");
                      	    // Create a CST Node
                      		if(list_pipelineGen != null) {
                      	        for(Iterator it = list_pipelineGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("pipeline");
                      	            	list_of_commandsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal pipelineGen_1 aggregation
                      		if(list_pipelineGen_1 != null) {
                      	    for(int pos = 0; pos < list_pipelineGen_1.size(); pos++ )  { 
                      	    // Create a CST Leaf
                      		if(ANDGen != null) {
                      			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", (ANDGen!=null?ANDGen.getText():null), ANDGen.getCharPositionInLine(), ANDGen.getLine());
                      			list_of_commandsReturnNode.getChildren().add(ANDGenLeaf);
                      		}
                      	    // Create a CST Leaf
                      		if(ORGen != null) {
                      			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", (ORGen!=null?ORGen.getText():null), ORGen.getCharPositionInLine(), ORGen.getLine());
                      			list_of_commandsReturnNode.getChildren().add(ORGenLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_pipelineGen_1 != null) {		
                      	    	GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) list_pipelineGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("pipeline");
                      	    		list_of_commandsReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = list_of_commandsReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15846:5: asynchronousGen+= asynchronous
                    {
                    pushFollow(FOLLOW_asynchronous_in_list_of_commands16635);
                    asynchronousGen=asynchronous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_asynchronousGen==null) list_asynchronousGen=new ArrayList();
                    list_asynchronousGen.add(asynchronousGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node list_of_commandsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		list_of_commandsReturnNode.setKind("list_of_commands");
                      	    // Create a CST Node
                      		if(list_asynchronousGen != null) {
                      	        for(Iterator it = list_asynchronousGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.asynchronous_return r = (GrammarShellForMancoosiParser.asynchronous_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("asynchronous");
                      	            	list_of_commandsReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = list_of_commandsReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_of_commands"

    public static class asynchronous_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "asynchronous"
    // GrammarShellForMancoosi.g:15866:1: asynchronous returns [Node returnNode] : pipelineGen+= pipeline (AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline )* (AMPERSANDGen_1= AMPERSAND )? ;
    public final GrammarShellForMancoosiParser.asynchronous_return asynchronous() throws RecognitionException {
        GrammarShellForMancoosiParser.asynchronous_return retval = new GrammarShellForMancoosiParser.asynchronous_return();
        retval.start = input.LT(1);

        Token AMPERSANDGen_1=null;
        Token AMPERSANDGen_List=null;
        List list_AMPERSANDGen_List=null;
        List list_pipelineGen=null;
        List list_pipelineGen_1=null;
        RuleReturnScope pipelineGen = null;
        RuleReturnScope pipelineGen_1 = null;
        try {
            // GrammarShellForMancoosi.g:15867:1: (pipelineGen+= pipeline (AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline )* (AMPERSANDGen_1= AMPERSAND )? )
            // GrammarShellForMancoosi.g:15867:4: pipelineGen+= pipeline (AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline )* (AMPERSANDGen_1= AMPERSAND )?
            {
            pushFollow(FOLLOW_pipeline_in_asynchronous16657);
            pipelineGen=pipeline();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pipelineGen==null) list_pipelineGen=new ArrayList();
            list_pipelineGen.add(pipelineGen);

            // GrammarShellForMancoosi.g:15867:26: (AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline )*
            loop643:
            do {
                int alt643=2;
                int LA643_0 = input.LA(1);

                if ( (LA643_0==AMPERSAND) ) {
                    int LA643_2 = input.LA(2);

                    if ( (synpred746_GrammarShellForMancoosi()) ) {
                        alt643=1;
                    }


                }


                switch (alt643) {
            	case 1 :
            	    // GrammarShellForMancoosi.g:15867:28: AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline
            	    {
            	    AMPERSANDGen_List=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_asynchronous16663); if (state.failed) return retval;
            	    if (list_AMPERSANDGen_List==null) list_AMPERSANDGen_List=new ArrayList();
            	    list_AMPERSANDGen_List.add(AMPERSANDGen_List);

            	    pushFollow(FOLLOW_pipeline_in_asynchronous16668);
            	    pipelineGen_1=pipeline();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
            	    list_pipelineGen_1.add(pipelineGen_1);


            	    }
            	    break;

            	default :
            	    break loop643;
                }
            } while (true);

            // GrammarShellForMancoosi.g:15867:84: (AMPERSANDGen_1= AMPERSAND )?
            int alt644=2;
            int LA644_0 = input.LA(1);

            if ( (LA644_0==AMPERSAND) ) {
                alt644=1;
            }
            switch (alt644) {
                case 1 :
                    // GrammarShellForMancoosi.g:15867:86: AMPERSANDGen_1= AMPERSAND
                    {
                    AMPERSANDGen_1=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_asynchronous16676); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node asynchronousReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		asynchronousReturnNode.setKind("asynchronous");
              	    // Create a CST Node
              		if(list_pipelineGen != null) {
              	        for(Iterator it = list_pipelineGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("pipeline");
              	            	asynchronousReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal AMPERSANDGen_List aggregation
              		if(list_AMPERSANDGen_List != null) {
              	    for(int pos = 0; pos < list_AMPERSANDGen_List.size(); pos++ )  { 
              		// Terminal extractor
              	    if(list_AMPERSANDGen_List != null) {
              		    Token t = (Token) list_AMPERSANDGen_List.get(pos); 
              		    Leaf AMPERSANDGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AMPERSAND", t.getText(), t.getCharPositionInLine(), t.getLine());
              			asynchronousReturnNode.getChildren().add(AMPERSANDGen_ListLeaf);
              		}
              		// No Terminal extractor
              	    if(list_pipelineGen_1 != null) {		
              	    	GrammarShellForMancoosiParser.pipeline_return r = (GrammarShellForMancoosiParser.pipeline_return) list_pipelineGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("pipeline");
              	    		asynchronousReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a CST Leaf
              		if(AMPERSANDGen_1 != null) {
              			Leaf AMPERSANDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AMPERSAND", (AMPERSANDGen_1!=null?AMPERSANDGen_1.getText():null), AMPERSANDGen_1.getCharPositionInLine(), AMPERSANDGen_1.getLine());
              			asynchronousReturnNode.getChildren().add(AMPERSANDGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = asynchronousReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "asynchronous"

    public static class path_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "path"
    // GrammarShellForMancoosi.g:15913:1: path returns [Node returnNode] : (PATHPGen= PATHP | PATHSSGen= PATHSS | PATHKVERSGen= PATHKVERS | PATHSCRIPTGen= PATHSCRIPT | PATHOLDSCHEMAGen= PATHOLDSCHEMA | PATHPACKGen= PATHPACK | PATHGCONFSCHGen= PATHGCONFSCH | PATHSUIDGen= PATHSUID | PATHXWINDOWGen= PATHXWINDOW | PATHEMACSINSTGen= PATHEMACSINST | PATHEMACSREMGen= PATHEMACSREM | PATHXMANAGERGen= PATHXMANAGER | PATHCONFMODGen= PATHCONFMOD | PATHMIMEGen= PATHMIME | PATHDOCIDGen= PATHDOCID | PATHCOMPYTHGen= PATHCOMPYTH | PATHNULLGen= PATHNULL | PATHRELGen= PATHREL | PATHGen= PATH );
    public final GrammarShellForMancoosiParser.path_return path() throws RecognitionException {
        GrammarShellForMancoosiParser.path_return retval = new GrammarShellForMancoosiParser.path_return();
        retval.start = input.LT(1);

        Token PATHPGen=null;
        Token PATHSSGen=null;
        Token PATHKVERSGen=null;
        Token PATHSCRIPTGen=null;
        Token PATHOLDSCHEMAGen=null;
        Token PATHPACKGen=null;
        Token PATHGCONFSCHGen=null;
        Token PATHSUIDGen=null;
        Token PATHXWINDOWGen=null;
        Token PATHEMACSINSTGen=null;
        Token PATHEMACSREMGen=null;
        Token PATHXMANAGERGen=null;
        Token PATHCONFMODGen=null;
        Token PATHMIMEGen=null;
        Token PATHDOCIDGen=null;
        Token PATHCOMPYTHGen=null;
        Token PATHNULLGen=null;
        Token PATHRELGen=null;
        Token PATHGen=null;

        try {
            // GrammarShellForMancoosi.g:15914:1: (PATHPGen= PATHP | PATHSSGen= PATHSS | PATHKVERSGen= PATHKVERS | PATHSCRIPTGen= PATHSCRIPT | PATHOLDSCHEMAGen= PATHOLDSCHEMA | PATHPACKGen= PATHPACK | PATHGCONFSCHGen= PATHGCONFSCH | PATHSUIDGen= PATHSUID | PATHXWINDOWGen= PATHXWINDOW | PATHEMACSINSTGen= PATHEMACSINST | PATHEMACSREMGen= PATHEMACSREM | PATHXMANAGERGen= PATHXMANAGER | PATHCONFMODGen= PATHCONFMOD | PATHMIMEGen= PATHMIME | PATHDOCIDGen= PATHDOCID | PATHCOMPYTHGen= PATHCOMPYTH | PATHNULLGen= PATHNULL | PATHRELGen= PATHREL | PATHGen= PATH )
            int alt645=19;
            alt645 = dfa645.predict(input);
            switch (alt645) {
                case 1 :
                    // GrammarShellForMancoosi.g:15914:4: PATHPGen= PATHP
                    {
                    PATHPGen=(Token)match(input,PATHP,FOLLOW_PATHP_in_path16700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHPGen != null) {
                      			Leaf PATHPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHP", (PATHPGen!=null?PATHPGen.getText():null), PATHPGen.getCharPositionInLine(), PATHPGen.getLine());
                      			pathReturnNode.getChildren().add(PATHPGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:15927:5: PATHSSGen= PATHSS
                    {
                    PATHSSGen=(Token)match(input,PATHSS,FOLLOW_PATHSS_in_path16712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHSSGen != null) {
                      			Leaf PATHSSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", (PATHSSGen!=null?PATHSSGen.getText():null), PATHSSGen.getCharPositionInLine(), PATHSSGen.getLine());
                      			pathReturnNode.getChildren().add(PATHSSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:15940:5: PATHKVERSGen= PATHKVERS
                    {
                    PATHKVERSGen=(Token)match(input,PATHKVERS,FOLLOW_PATHKVERS_in_path16724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHKVERSGen != null) {
                      			Leaf PATHKVERSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHKVERS", (PATHKVERSGen!=null?PATHKVERSGen.getText():null), PATHKVERSGen.getCharPositionInLine(), PATHKVERSGen.getLine());
                      			pathReturnNode.getChildren().add(PATHKVERSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:15953:5: PATHSCRIPTGen= PATHSCRIPT
                    {
                    PATHSCRIPTGen=(Token)match(input,PATHSCRIPT,FOLLOW_PATHSCRIPT_in_path16736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHSCRIPTGen != null) {
                      			Leaf PATHSCRIPTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSCRIPT", (PATHSCRIPTGen!=null?PATHSCRIPTGen.getText():null), PATHSCRIPTGen.getCharPositionInLine(), PATHSCRIPTGen.getLine());
                      			pathReturnNode.getChildren().add(PATHSCRIPTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:15966:5: PATHOLDSCHEMAGen= PATHOLDSCHEMA
                    {
                    PATHOLDSCHEMAGen=(Token)match(input,PATHOLDSCHEMA,FOLLOW_PATHOLDSCHEMA_in_path16748); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHOLDSCHEMAGen != null) {
                      			Leaf PATHOLDSCHEMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHOLDSCHEMA", (PATHOLDSCHEMAGen!=null?PATHOLDSCHEMAGen.getText():null), PATHOLDSCHEMAGen.getCharPositionInLine(), PATHOLDSCHEMAGen.getLine());
                      			pathReturnNode.getChildren().add(PATHOLDSCHEMAGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:15979:5: PATHPACKGen= PATHPACK
                    {
                    PATHPACKGen=(Token)match(input,PATHPACK,FOLLOW_PATHPACK_in_path16760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHPACKGen != null) {
                      			Leaf PATHPACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHPACK", (PATHPACKGen!=null?PATHPACKGen.getText():null), PATHPACKGen.getCharPositionInLine(), PATHPACKGen.getLine());
                      			pathReturnNode.getChildren().add(PATHPACKGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:15992:5: PATHGCONFSCHGen= PATHGCONFSCH
                    {
                    PATHGCONFSCHGen=(Token)match(input,PATHGCONFSCH,FOLLOW_PATHGCONFSCH_in_path16772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHGCONFSCHGen != null) {
                      			Leaf PATHGCONFSCHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHGCONFSCH", (PATHGCONFSCHGen!=null?PATHGCONFSCHGen.getText():null), PATHGCONFSCHGen.getCharPositionInLine(), PATHGCONFSCHGen.getLine());
                      			pathReturnNode.getChildren().add(PATHGCONFSCHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:16005:5: PATHSUIDGen= PATHSUID
                    {
                    PATHSUIDGen=(Token)match(input,PATHSUID,FOLLOW_PATHSUID_in_path16784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHSUIDGen != null) {
                      			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", (PATHSUIDGen!=null?PATHSUIDGen.getText():null), PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
                      			pathReturnNode.getChildren().add(PATHSUIDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:16018:5: PATHXWINDOWGen= PATHXWINDOW
                    {
                    PATHXWINDOWGen=(Token)match(input,PATHXWINDOW,FOLLOW_PATHXWINDOW_in_path16796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHXWINDOWGen != null) {
                      			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", (PATHXWINDOWGen!=null?PATHXWINDOWGen.getText():null), PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
                      			pathReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:16031:5: PATHEMACSINSTGen= PATHEMACSINST
                    {
                    PATHEMACSINSTGen=(Token)match(input,PATHEMACSINST,FOLLOW_PATHEMACSINST_in_path16808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHEMACSINSTGen != null) {
                      			Leaf PATHEMACSINSTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", (PATHEMACSINSTGen!=null?PATHEMACSINSTGen.getText():null), PATHEMACSINSTGen.getCharPositionInLine(), PATHEMACSINSTGen.getLine());
                      			pathReturnNode.getChildren().add(PATHEMACSINSTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:16044:5: PATHEMACSREMGen= PATHEMACSREM
                    {
                    PATHEMACSREMGen=(Token)match(input,PATHEMACSREM,FOLLOW_PATHEMACSREM_in_path16820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHEMACSREMGen != null) {
                      			Leaf PATHEMACSREMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", (PATHEMACSREMGen!=null?PATHEMACSREMGen.getText():null), PATHEMACSREMGen.getCharPositionInLine(), PATHEMACSREMGen.getLine());
                      			pathReturnNode.getChildren().add(PATHEMACSREMGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // GrammarShellForMancoosi.g:16057:5: PATHXMANAGERGen= PATHXMANAGER
                    {
                    PATHXMANAGERGen=(Token)match(input,PATHXMANAGER,FOLLOW_PATHXMANAGER_in_path16832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHXMANAGERGen != null) {
                      			Leaf PATHXMANAGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXMANAGER", (PATHXMANAGERGen!=null?PATHXMANAGERGen.getText():null), PATHXMANAGERGen.getCharPositionInLine(), PATHXMANAGERGen.getLine());
                      			pathReturnNode.getChildren().add(PATHXMANAGERGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // GrammarShellForMancoosi.g:16070:5: PATHCONFMODGen= PATHCONFMOD
                    {
                    PATHCONFMODGen=(Token)match(input,PATHCONFMOD,FOLLOW_PATHCONFMOD_in_path16844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHCONFMODGen != null) {
                      			Leaf PATHCONFMODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", (PATHCONFMODGen!=null?PATHCONFMODGen.getText():null), PATHCONFMODGen.getCharPositionInLine(), PATHCONFMODGen.getLine());
                      			pathReturnNode.getChildren().add(PATHCONFMODGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // GrammarShellForMancoosi.g:16083:5: PATHMIMEGen= PATHMIME
                    {
                    PATHMIMEGen=(Token)match(input,PATHMIME,FOLLOW_PATHMIME_in_path16856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHMIMEGen != null) {
                      			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", (PATHMIMEGen!=null?PATHMIMEGen.getText():null), PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
                      			pathReturnNode.getChildren().add(PATHMIMEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // GrammarShellForMancoosi.g:16096:5: PATHDOCIDGen= PATHDOCID
                    {
                    PATHDOCIDGen=(Token)match(input,PATHDOCID,FOLLOW_PATHDOCID_in_path16868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHDOCIDGen != null) {
                      			Leaf PATHDOCIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHDOCID", (PATHDOCIDGen!=null?PATHDOCIDGen.getText():null), PATHDOCIDGen.getCharPositionInLine(), PATHDOCIDGen.getLine());
                      			pathReturnNode.getChildren().add(PATHDOCIDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // GrammarShellForMancoosi.g:16109:5: PATHCOMPYTHGen= PATHCOMPYTH
                    {
                    PATHCOMPYTHGen=(Token)match(input,PATHCOMPYTH,FOLLOW_PATHCOMPYTH_in_path16880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHCOMPYTHGen != null) {
                      			Leaf PATHCOMPYTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", (PATHCOMPYTHGen!=null?PATHCOMPYTHGen.getText():null), PATHCOMPYTHGen.getCharPositionInLine(), PATHCOMPYTHGen.getLine());
                      			pathReturnNode.getChildren().add(PATHCOMPYTHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // GrammarShellForMancoosi.g:16122:5: PATHNULLGen= PATHNULL
                    {
                    PATHNULLGen=(Token)match(input,PATHNULL,FOLLOW_PATHNULL_in_path16892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHNULLGen != null) {
                      			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", (PATHNULLGen!=null?PATHNULLGen.getText():null), PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
                      			pathReturnNode.getChildren().add(PATHNULLGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // GrammarShellForMancoosi.g:16135:5: PATHRELGen= PATHREL
                    {
                    PATHRELGen=(Token)match(input,PATHREL,FOLLOW_PATHREL_in_path16904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHRELGen != null) {
                      			Leaf PATHRELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHREL", (PATHRELGen!=null?PATHRELGen.getText():null), PATHRELGen.getCharPositionInLine(), PATHRELGen.getLine());
                      			pathReturnNode.getChildren().add(PATHRELGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;
                case 19 :
                    // GrammarShellForMancoosi.g:16148:5: PATHGen= PATH
                    {
                    PATHGen=(Token)match(input,PATH,FOLLOW_PATH_in_path16916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		pathReturnNode.setKind("path");
                      	    // Create a CST Leaf
                      		if(PATHGen != null) {
                      			Leaf PATHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATH", (PATHGen!=null?PATHGen.getText():null), PATHGen.getCharPositionInLine(), PATHGen.getLine());
                      			pathReturnNode.getChildren().add(PATHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = pathReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "path"

    public static class var_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "var"
    // GrammarShellForMancoosi.g:16164:1: var returns [Node returnNode] : (TK_0= '$i' | TK_0= '$SCHEMA_FILES' | TK_0= '$PYTHON' | TK_0= '$DIRLIST' | TK_0= '$_dh_action' | TK_0= '$dir' | TK_0= '$inst' | TK_0= '$user' | TK_0= '$group' | TK_0= '$line' | TK_0= '$mode' | TK_0= '$OLD_DIR' | VARGen= VAR );
    public final GrammarShellForMancoosiParser.var_return var() throws RecognitionException {
        GrammarShellForMancoosiParser.var_return retval = new GrammarShellForMancoosiParser.var_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token VARGen=null;

        try {
            // GrammarShellForMancoosi.g:16165:1: (TK_0= '$i' | TK_0= '$SCHEMA_FILES' | TK_0= '$PYTHON' | TK_0= '$DIRLIST' | TK_0= '$_dh_action' | TK_0= '$dir' | TK_0= '$inst' | TK_0= '$user' | TK_0= '$group' | TK_0= '$line' | TK_0= '$mode' | TK_0= '$OLD_DIR' | VARGen= VAR )
            int alt646=13;
            alt646 = dfa646.predict(input);
            switch (alt646) {
                case 1 :
                    // GrammarShellForMancoosi.g:16165:4: TK_0= '$i'
                    {
                    TK_0=(Token)match(input,141,FOLLOW_141_in_var16939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:16178:5: TK_0= '$SCHEMA_FILES'
                    {
                    TK_0=(Token)match(input,105,FOLLOW_105_in_var16951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:16191:5: TK_0= '$PYTHON'
                    {
                    TK_0=(Token)match(input,138,FOLLOW_138_in_var16963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:16204:5: TK_0= '$DIRLIST'
                    {
                    TK_0=(Token)match(input,140,FOLLOW_140_in_var16975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:16217:5: TK_0= '$_dh_action'
                    {
                    TK_0=(Token)match(input,123,FOLLOW_123_in_var16987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:16230:5: TK_0= '$dir'
                    {
                    TK_0=(Token)match(input,184,FOLLOW_184_in_var16999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:16243:5: TK_0= '$inst'
                    {
                    TK_0=(Token)match(input,127,FOLLOW_127_in_var17011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:16256:5: TK_0= '$user'
                    {
                    TK_0=(Token)match(input,186,FOLLOW_186_in_var17023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:16269:5: TK_0= '$group'
                    {
                    TK_0=(Token)match(input,187,FOLLOW_187_in_var17035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:16282:5: TK_0= '$line'
                    {
                    TK_0=(Token)match(input,180,FOLLOW_180_in_var17047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:16295:5: TK_0= '$mode'
                    {
                    TK_0=(Token)match(input,188,FOLLOW_188_in_var17059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // GrammarShellForMancoosi.g:16308:5: TK_0= '$OLD_DIR'
                    {
                    TK_0=(Token)match(input,101,FOLLOW_101_in_var17071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		varReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // GrammarShellForMancoosi.g:16321:5: VARGen= VAR
                    {
                    VARGen=(Token)match(input,VAR,FOLLOW_VAR_in_var17083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		varReturnNode.setKind("var");
                      	    // Create a CST Leaf
                      		if(VARGen != null) {
                      			Leaf VARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VAR", (VARGen!=null?VARGen.getText():null), VARGen.getCharPositionInLine(), VARGen.getLine());
                      			varReturnNode.getChildren().add(VARGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = varReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "var"

    public static class substitution_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "substitution_variable"
    // GrammarShellForMancoosi.g:16336:1: substitution_variable returns [Node returnNode] : TK_0= '$' LGRAFGen= LGRAF idGen+= id RGRAFGen= RGRAF ;
    public final GrammarShellForMancoosiParser.substitution_variable_return substitution_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.substitution_variable_return retval = new GrammarShellForMancoosiParser.substitution_variable_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token LGRAFGen=null;
        Token RGRAFGen=null;
        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:16337:1: (TK_0= '$' LGRAFGen= LGRAF idGen+= id RGRAFGen= RGRAF )
            // GrammarShellForMancoosi.g:16337:4: TK_0= '$' LGRAFGen= LGRAF idGen+= id RGRAFGen= RGRAF
            {
            TK_0=(Token)match(input,146,FOLLOW_146_in_substitution_variable17105); if (state.failed) return retval;
            LGRAFGen=(Token)match(input,LGRAF,FOLLOW_LGRAF_in_substitution_variable17110); if (state.failed) return retval;
            pushFollow(FOLLOW_id_in_substitution_variable17115);
            idGen=id();

            state._fsp--;
            if (state.failed) return retval;
            if (list_idGen==null) list_idGen=new ArrayList();
            list_idGen.add(idGen);

            RGRAFGen=(Token)match(input,RGRAF,FOLLOW_RGRAF_in_substitution_variable17120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node substitution_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		substitution_variableReturnNode.setKind("substitution_variable");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		substitution_variableReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(LGRAFGen != null) {
              			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", (LGRAFGen!=null?LGRAFGen.getText():null), LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
              			substitution_variableReturnNode.getChildren().add(LGRAFGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_idGen != null) {
              	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("id");
              	            	substitution_variableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(RGRAFGen != null) {
              			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", (RGRAFGen!=null?RGRAFGen.getText():null), RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
              			substitution_variableReturnNode.getChildren().add(RGRAFGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = substitution_variableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution_variable"

    public static class input_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "input_variable"
    // GrammarShellForMancoosi.g:16372:1: input_variable returns [Node returnNode] : VARINPUTGen= VARINPUT ;
    public final GrammarShellForMancoosiParser.input_variable_return input_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.input_variable_return retval = new GrammarShellForMancoosiParser.input_variable_return();
        retval.start = input.LT(1);

        Token VARINPUTGen=null;

        try {
            // GrammarShellForMancoosi.g:16373:1: (VARINPUTGen= VARINPUT )
            // GrammarShellForMancoosi.g:16373:4: VARINPUTGen= VARINPUT
            {
            VARINPUTGen=(Token)match(input,VARINPUT,FOLLOW_VARINPUT_in_input_variable17142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node input_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		input_variableReturnNode.setKind("input_variable");
              	    // Create a CST Leaf
              		if(VARINPUTGen != null) {
              			Leaf VARINPUTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARINPUT", (VARINPUTGen!=null?VARINPUTGen.getText():null), VARINPUTGen.getCharPositionInLine(), VARINPUTGen.getLine());
              			input_variableReturnNode.getChildren().add(VARINPUTGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = input_variableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "input_variable"

    public static class in_command_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "in_command_variable"
    // GrammarShellForMancoosi.g:16388:1: in_command_variable returns [Node returnNode] : varGen+= var ;
    public final GrammarShellForMancoosiParser.in_command_variable_return in_command_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.in_command_variable_return retval = new GrammarShellForMancoosiParser.in_command_variable_return();
        retval.start = input.LT(1);

        List list_varGen=null;
        RuleReturnScope varGen = null;
        try {
            // GrammarShellForMancoosi.g:16389:1: (varGen+= var )
            // GrammarShellForMancoosi.g:16389:4: varGen+= var
            {
            pushFollow(FOLLOW_var_in_in_command_variable17165);
            varGen=var();

            state._fsp--;
            if (state.failed) return retval;
            if (list_varGen==null) list_varGen=new ArrayList();
            list_varGen.add(varGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node in_command_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		in_command_variableReturnNode.setKind("in_command_variable");
              	    // Create a CST Node
              		if(list_varGen != null) {
              	        for(Iterator it = list_varGen.iterator(); it.hasNext(); )  { 
              	            GrammarShellForMancoosiParser.var_return r = (GrammarShellForMancoosiParser.var_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("var");
              	            	in_command_variableReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = in_command_variableReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_command_variable"

    public static class external_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "external_variable"
    // GrammarShellForMancoosi.g:16409:1: external_variable returns [Node returnNode] : (UNDERSCOREGen= UNDERSCORE idGen+= id | TK_0= '$' UNDERSCOREGen= UNDERSCORE idGen+= id );
    public final GrammarShellForMancoosiParser.external_variable_return external_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.external_variable_return retval = new GrammarShellForMancoosiParser.external_variable_return();
        retval.start = input.LT(1);

        Token UNDERSCOREGen=null;
        Token TK_0=null;
        List list_idGen=null;
        RuleReturnScope idGen = null;
        try {
            // GrammarShellForMancoosi.g:16410:1: (UNDERSCOREGen= UNDERSCORE idGen+= id | TK_0= '$' UNDERSCOREGen= UNDERSCORE idGen+= id )
            int alt647=2;
            int LA647_0 = input.LA(1);

            if ( (LA647_0==UNDERSCORE) ) {
                alt647=1;
            }
            else if ( (LA647_0==146) ) {
                alt647=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 647, 0, input);

                throw nvae;
            }
            switch (alt647) {
                case 1 :
                    // GrammarShellForMancoosi.g:16410:4: UNDERSCOREGen= UNDERSCORE idGen+= id
                    {
                    UNDERSCOREGen=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_external_variable17188); if (state.failed) return retval;
                    pushFollow(FOLLOW_id_in_external_variable17193);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node external_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		external_variableReturnNode.setKind("external_variable");
                      	    // Create a CST Leaf
                      		if(UNDERSCOREGen != null) {
                      			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", (UNDERSCOREGen!=null?UNDERSCOREGen.getText():null), UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
                      			external_variableReturnNode.getChildren().add(UNDERSCOREGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	external_variableReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = external_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:16433:5: TK_0= '$' UNDERSCOREGen= UNDERSCORE idGen+= id
                    {
                    TK_0=(Token)match(input,146,FOLLOW_146_in_external_variable17205); if (state.failed) return retval;
                    UNDERSCOREGen=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_external_variable17210); if (state.failed) return retval;
                    pushFollow(FOLLOW_id_in_external_variable17215);
                    idGen=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_idGen==null) list_idGen=new ArrayList();
                    list_idGen.add(idGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node external_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		external_variableReturnNode.setKind("external_variable");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		external_variableReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(UNDERSCOREGen != null) {
                      			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", (UNDERSCOREGen!=null?UNDERSCOREGen.getText():null), UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
                      			external_variableReturnNode.getChildren().add(UNDERSCOREGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_idGen != null) {
                      	        for(Iterator it = list_idGen.iterator(); it.hasNext(); )  { 
                      	            GrammarShellForMancoosiParser.id_return r = (GrammarShellForMancoosiParser.id_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("id");
                      	            	external_variableReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = external_variableReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "external_variable"

    public static class special_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "special_variable"
    // GrammarShellForMancoosi.g:16463:1: special_variable returns [Node returnNode] : (VARQMARKGen= VARQMARK | VARDOLLARGen= VARDOLLAR | VAREXCLGen= VAREXCL | VARSTARGen= VARSTAR | VARATGen= VARAT );
    public final GrammarShellForMancoosiParser.special_variable_return special_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.special_variable_return retval = new GrammarShellForMancoosiParser.special_variable_return();
        retval.start = input.LT(1);

        Token VARQMARKGen=null;
        Token VARDOLLARGen=null;
        Token VAREXCLGen=null;
        Token VARSTARGen=null;
        Token VARATGen=null;

        try {
            // GrammarShellForMancoosi.g:16464:1: (VARQMARKGen= VARQMARK | VARDOLLARGen= VARDOLLAR | VAREXCLGen= VAREXCL | VARSTARGen= VARSTAR | VARATGen= VARAT )
            int alt648=5;
            switch ( input.LA(1) ) {
            case VARQMARK:
                {
                alt648=1;
                }
                break;
            case VARDOLLAR:
                {
                alt648=2;
                }
                break;
            case VAREXCL:
                {
                alt648=3;
                }
                break;
            case VARSTAR:
                {
                alt648=4;
                }
                break;
            case VARAT:
                {
                alt648=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 648, 0, input);

                throw nvae;
            }

            switch (alt648) {
                case 1 :
                    // GrammarShellForMancoosi.g:16464:4: VARQMARKGen= VARQMARK
                    {
                    VARQMARKGen=(Token)match(input,VARQMARK,FOLLOW_VARQMARK_in_special_variable17238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		special_variableReturnNode.setKind("special_variable");
                      	    // Create a CST Leaf
                      		if(VARQMARKGen != null) {
                      			Leaf VARQMARKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARQMARK", (VARQMARKGen!=null?VARQMARKGen.getText():null), VARQMARKGen.getCharPositionInLine(), VARQMARKGen.getLine());
                      			special_variableReturnNode.getChildren().add(VARQMARKGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = special_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:16477:5: VARDOLLARGen= VARDOLLAR
                    {
                    VARDOLLARGen=(Token)match(input,VARDOLLAR,FOLLOW_VARDOLLAR_in_special_variable17250); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		special_variableReturnNode.setKind("special_variable");
                      	    // Create a CST Leaf
                      		if(VARDOLLARGen != null) {
                      			Leaf VARDOLLARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARDOLLAR", (VARDOLLARGen!=null?VARDOLLARGen.getText():null), VARDOLLARGen.getCharPositionInLine(), VARDOLLARGen.getLine());
                      			special_variableReturnNode.getChildren().add(VARDOLLARGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = special_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:16490:5: VAREXCLGen= VAREXCL
                    {
                    VAREXCLGen=(Token)match(input,VAREXCL,FOLLOW_VAREXCL_in_special_variable17262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		special_variableReturnNode.setKind("special_variable");
                      	    // Create a CST Leaf
                      		if(VAREXCLGen != null) {
                      			Leaf VAREXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VAREXCL", (VAREXCLGen!=null?VAREXCLGen.getText():null), VAREXCLGen.getCharPositionInLine(), VAREXCLGen.getLine());
                      			special_variableReturnNode.getChildren().add(VAREXCLGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = special_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:16503:5: VARSTARGen= VARSTAR
                    {
                    VARSTARGen=(Token)match(input,VARSTAR,FOLLOW_VARSTAR_in_special_variable17274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		special_variableReturnNode.setKind("special_variable");
                      	    // Create a CST Leaf
                      		if(VARSTARGen != null) {
                      			Leaf VARSTARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARSTAR", (VARSTARGen!=null?VARSTARGen.getText():null), VARSTARGen.getCharPositionInLine(), VARSTARGen.getLine());
                      			special_variableReturnNode.getChildren().add(VARSTARGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = special_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:16516:5: VARATGen= VARAT
                    {
                    VARATGen=(Token)match(input,VARAT,FOLLOW_VARAT_in_special_variable17286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		special_variableReturnNode.setKind("special_variable");
                      	    // Create a CST Leaf
                      		if(VARATGen != null) {
                      			Leaf VARATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARAT", (VARATGen!=null?VARATGen.getText():null), VARATGen.getCharPositionInLine(), VARATGen.getLine());
                      			special_variableReturnNode.getChildren().add(VARATGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = special_variableReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "special_variable"

    public static class shell_variable_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "shell_variable"
    // GrammarShellForMancoosi.g:16531:1: shell_variable returns [Node returnNode] : (VARHOMEGen= VARHOME | VARPATHGen= VARPATH | VARPSGen= VARPS );
    public final GrammarShellForMancoosiParser.shell_variable_return shell_variable() throws RecognitionException {
        GrammarShellForMancoosiParser.shell_variable_return retval = new GrammarShellForMancoosiParser.shell_variable_return();
        retval.start = input.LT(1);

        Token VARHOMEGen=null;
        Token VARPATHGen=null;
        Token VARPSGen=null;

        try {
            // GrammarShellForMancoosi.g:16532:1: (VARHOMEGen= VARHOME | VARPATHGen= VARPATH | VARPSGen= VARPS )
            int alt649=3;
            switch ( input.LA(1) ) {
            case VARHOME:
                {
                alt649=1;
                }
                break;
            case VARPATH:
                {
                alt649=2;
                }
                break;
            case VARPS:
                {
                alt649=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 649, 0, input);

                throw nvae;
            }

            switch (alt649) {
                case 1 :
                    // GrammarShellForMancoosi.g:16532:4: VARHOMEGen= VARHOME
                    {
                    VARHOMEGen=(Token)match(input,VARHOME,FOLLOW_VARHOME_in_shell_variable17309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		shell_variableReturnNode.setKind("shell_variable");
                      	    // Create a CST Leaf
                      		if(VARHOMEGen != null) {
                      			Leaf VARHOMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARHOME", (VARHOMEGen!=null?VARHOMEGen.getText():null), VARHOMEGen.getCharPositionInLine(), VARHOMEGen.getLine());
                      			shell_variableReturnNode.getChildren().add(VARHOMEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = shell_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:16545:5: VARPATHGen= VARPATH
                    {
                    VARPATHGen=(Token)match(input,VARPATH,FOLLOW_VARPATH_in_shell_variable17321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		shell_variableReturnNode.setKind("shell_variable");
                      	    // Create a CST Leaf
                      		if(VARPATHGen != null) {
                      			Leaf VARPATHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARPATH", (VARPATHGen!=null?VARPATHGen.getText():null), VARPATHGen.getCharPositionInLine(), VARPATHGen.getLine());
                      			shell_variableReturnNode.getChildren().add(VARPATHGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = shell_variableReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:16558:5: VARPSGen= VARPS
                    {
                    VARPSGen=(Token)match(input,VARPS,FOLLOW_VARPS_in_shell_variable17333); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		shell_variableReturnNode.setKind("shell_variable");
                      	    // Create a CST Leaf
                      		if(VARPSGen != null) {
                      			Leaf VARPSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARPS", (VARPSGen!=null?VARPSGen.getText():null), VARPSGen.getCharPositionInLine(), VARPSGen.getLine());
                      			shell_variableReturnNode.getChildren().add(VARPSGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = shell_variableReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shell_variable"

    public static class id_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "id"
    // GrammarShellForMancoosi.g:16573:1: id returns [Node returnNode] : (TK_0= 'HOME' | TK_0= 'PATH' | TK_0= 'PS' | TK_0= 'update-desktop-database' | TK_0= 'which' | TK_0= 'configure' | TK_0= 'remove' | TK_0= 'install-docs' | TK_0= 'upgrade' | TK_0= 'update-gconf-defaults' | TK_0= 'register' | TK_0= 'unregister' | TK_0= 'OLD_DIR' | TK_0= 'SCHEMA_FILES' | TK_0= 'SCHEMA' | TK_0= 'purge' | TK_0= 'rm' | TK_0= 'rmdir' | TK_0= 'ignore-fail-on-non-empty' | TK_0= 'update-icon-cache' | TK_0= 'quiet' | TK_0= 'install-info' | TK_0= 'update-rc.d' | TK_0= 'ldconfig' | TK_0= 'update-menus' | TK_0= 'PYTHON' | TK_0= 'DIRLIST' | TK_0= 'scrollkeeper-update' | TK_0= 'update-mime-database' | TK_0= 'update-mime' | TK_0= 'dh_action' | TK_0= 'restart' | TK_0= 'start' | TK_0= 'invoke-rc.d' | TK_0= 'stop' | TK_0= 'inst' | TK_0= 'a+x' | TK_0= 'a-x' | TK_0= 'catalog' | TK_0= 'super' | TK_0= 'update-catalog' | TK_0= 'old' | TK_0= 'suidunregister' | TK_0= 'update-alternatives' | TK_0= 'install' | TK_0= 'x-window-manager' | TK_0= 'depmod' | TK_0= 'add' | TK_0= 'update-fonts-dir' | TK_0= 'md5sum' | TK_0= 'sed' | TK_0= 's' | TK_0= 'p' | TK_0= 'ordcat' | TK_0= 'dpkg-query' | TK_0= 'Conffiles' | TK_0= 'db_purge' | TK_0= 'slave' | TK_0= 'x-window-manager.1.gz' | TK_0= 'suidregister' | TK_0= 'chown' | TK_0= 'chmod' | TK_0= 'read' | TK_0= 'dir' | TK_0= 'true' | TK_0= 'echo' | TK_0= 'Preserving' | TK_0= 'user' | TK_0= 'changes' | TK_0= 'to' | TK_0= 'o' | TK_0= 'mv' | TK_0= 'line' | TK_0= 'mode' | TK_0= 'mkdir' | TK_0= 'group' | TK_0= 'dpkg' | TK_0= 'awk' | TK_0= 'py' | TK_0= 'print' | TK_0= 'c' | TK_0= 'xargs' | TK_0= 'n' | TK_0= 'set' | TK_0= '*' | TK_0= 'q' | TK_0= 'i' | TK_0= 'r' | TK_0= 'x' | TK_0= 'd' | TK_0= 'f' | TK_0= 'e' | TK_0= 'a' | TK_0= 'F' | TK_0= 'L' | TK_0= 'W' | IDGen= ID );
    public final GrammarShellForMancoosiParser.id_return id() throws RecognitionException {
        GrammarShellForMancoosiParser.id_return retval = new GrammarShellForMancoosiParser.id_return();
        retval.start = input.LT(1);

        Token TK_0=null;
        Token IDGen=null;

        try {
            // GrammarShellForMancoosi.g:16574:1: (TK_0= 'HOME' | TK_0= 'PATH' | TK_0= 'PS' | TK_0= 'update-desktop-database' | TK_0= 'which' | TK_0= 'configure' | TK_0= 'remove' | TK_0= 'install-docs' | TK_0= 'upgrade' | TK_0= 'update-gconf-defaults' | TK_0= 'register' | TK_0= 'unregister' | TK_0= 'OLD_DIR' | TK_0= 'SCHEMA_FILES' | TK_0= 'SCHEMA' | TK_0= 'purge' | TK_0= 'rm' | TK_0= 'rmdir' | TK_0= 'ignore-fail-on-non-empty' | TK_0= 'update-icon-cache' | TK_0= 'quiet' | TK_0= 'install-info' | TK_0= 'update-rc.d' | TK_0= 'ldconfig' | TK_0= 'update-menus' | TK_0= 'PYTHON' | TK_0= 'DIRLIST' | TK_0= 'scrollkeeper-update' | TK_0= 'update-mime-database' | TK_0= 'update-mime' | TK_0= 'dh_action' | TK_0= 'restart' | TK_0= 'start' | TK_0= 'invoke-rc.d' | TK_0= 'stop' | TK_0= 'inst' | TK_0= 'a+x' | TK_0= 'a-x' | TK_0= 'catalog' | TK_0= 'super' | TK_0= 'update-catalog' | TK_0= 'old' | TK_0= 'suidunregister' | TK_0= 'update-alternatives' | TK_0= 'install' | TK_0= 'x-window-manager' | TK_0= 'depmod' | TK_0= 'add' | TK_0= 'update-fonts-dir' | TK_0= 'md5sum' | TK_0= 'sed' | TK_0= 's' | TK_0= 'p' | TK_0= 'ordcat' | TK_0= 'dpkg-query' | TK_0= 'Conffiles' | TK_0= 'db_purge' | TK_0= 'slave' | TK_0= 'x-window-manager.1.gz' | TK_0= 'suidregister' | TK_0= 'chown' | TK_0= 'chmod' | TK_0= 'read' | TK_0= 'dir' | TK_0= 'true' | TK_0= 'echo' | TK_0= 'Preserving' | TK_0= 'user' | TK_0= 'changes' | TK_0= 'to' | TK_0= 'o' | TK_0= 'mv' | TK_0= 'line' | TK_0= 'mode' | TK_0= 'mkdir' | TK_0= 'group' | TK_0= 'dpkg' | TK_0= 'awk' | TK_0= 'py' | TK_0= 'print' | TK_0= 'c' | TK_0= 'xargs' | TK_0= 'n' | TK_0= 'set' | TK_0= '*' | TK_0= 'q' | TK_0= 'i' | TK_0= 'r' | TK_0= 'x' | TK_0= 'd' | TK_0= 'f' | TK_0= 'e' | TK_0= 'a' | TK_0= 'F' | TK_0= 'L' | TK_0= 'W' | IDGen= ID )
            int alt650=97;
            alt650 = dfa650.predict(input);
            switch (alt650) {
                case 1 :
                    // GrammarShellForMancoosi.g:16574:4: TK_0= 'HOME'
                    {
                    TK_0=(Token)match(input,201,FOLLOW_201_in_id17355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // GrammarShellForMancoosi.g:16587:5: TK_0= 'PATH'
                    {
                    TK_0=(Token)match(input,202,FOLLOW_202_in_id17367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // GrammarShellForMancoosi.g:16600:5: TK_0= 'PS'
                    {
                    TK_0=(Token)match(input,203,FOLLOW_203_in_id17379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // GrammarShellForMancoosi.g:16613:5: TK_0= 'update-desktop-database'
                    {
                    TK_0=(Token)match(input,82,FOLLOW_82_in_id17392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // GrammarShellForMancoosi.g:16626:5: TK_0= 'which'
                    {
                    TK_0=(Token)match(input,81,FOLLOW_81_in_id17404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // GrammarShellForMancoosi.g:16639:5: TK_0= 'configure'
                    {
                    TK_0=(Token)match(input,80,FOLLOW_80_in_id17416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // GrammarShellForMancoosi.g:16652:5: TK_0= 'remove'
                    {
                    TK_0=(Token)match(input,87,FOLLOW_87_in_id17428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // GrammarShellForMancoosi.g:16665:5: TK_0= 'install-docs'
                    {
                    TK_0=(Token)match(input,88,FOLLOW_88_in_id17440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // GrammarShellForMancoosi.g:16678:5: TK_0= 'upgrade'
                    {
                    TK_0=(Token)match(input,90,FOLLOW_90_in_id17452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // GrammarShellForMancoosi.g:16691:5: TK_0= 'update-gconf-defaults'
                    {
                    TK_0=(Token)match(input,93,FOLLOW_93_in_id17464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // GrammarShellForMancoosi.g:16704:5: TK_0= 'register'
                    {
                    TK_0=(Token)match(input,95,FOLLOW_95_in_id17476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // GrammarShellForMancoosi.g:16717:5: TK_0= 'unregister'
                    {
                    TK_0=(Token)match(input,96,FOLLOW_96_in_id17488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // GrammarShellForMancoosi.g:16730:5: TK_0= 'OLD_DIR'
                    {
                    TK_0=(Token)match(input,98,FOLLOW_98_in_id17500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // GrammarShellForMancoosi.g:16743:5: TK_0= 'SCHEMA_FILES'
                    {
                    TK_0=(Token)match(input,99,FOLLOW_99_in_id17512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // GrammarShellForMancoosi.g:16756:5: TK_0= 'SCHEMA'
                    {
                    TK_0=(Token)match(input,103,FOLLOW_103_in_id17524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // GrammarShellForMancoosi.g:16769:5: TK_0= 'purge'
                    {
                    TK_0=(Token)match(input,97,FOLLOW_97_in_id17536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // GrammarShellForMancoosi.g:16782:5: TK_0= 'rm'
                    {
                    TK_0=(Token)match(input,107,FOLLOW_107_in_id17548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // GrammarShellForMancoosi.g:16795:5: TK_0= 'rmdir'
                    {
                    TK_0=(Token)match(input,110,FOLLOW_110_in_id17560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 19 :
                    // GrammarShellForMancoosi.g:16808:5: TK_0= 'ignore-fail-on-non-empty'
                    {
                    TK_0=(Token)match(input,112,FOLLOW_112_in_id17572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 20 :
                    // GrammarShellForMancoosi.g:16821:5: TK_0= 'update-icon-cache'
                    {
                    TK_0=(Token)match(input,204,FOLLOW_204_in_id17584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 21 :
                    // GrammarShellForMancoosi.g:16834:5: TK_0= 'quiet'
                    {
                    TK_0=(Token)match(input,115,FOLLOW_115_in_id17596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 22 :
                    // GrammarShellForMancoosi.g:16847:5: TK_0= 'install-info'
                    {
                    TK_0=(Token)match(input,114,FOLLOW_114_in_id17608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 23 :
                    // GrammarShellForMancoosi.g:16860:5: TK_0= 'update-rc.d'
                    {
                    TK_0=(Token)match(input,116,FOLLOW_116_in_id17620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 24 :
                    // GrammarShellForMancoosi.g:16873:5: TK_0= 'ldconfig'
                    {
                    TK_0=(Token)match(input,125,FOLLOW_125_in_id17632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 25 :
                    // GrammarShellForMancoosi.g:16886:5: TK_0= 'update-menus'
                    {
                    TK_0=(Token)match(input,130,FOLLOW_130_in_id17644); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 26 :
                    // GrammarShellForMancoosi.g:16899:5: TK_0= 'PYTHON'
                    {
                    TK_0=(Token)match(input,137,FOLLOW_137_in_id17656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 27 :
                    // GrammarShellForMancoosi.g:16912:5: TK_0= 'DIRLIST'
                    {
                    TK_0=(Token)match(input,139,FOLLOW_139_in_id17668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 28 :
                    // GrammarShellForMancoosi.g:16925:5: TK_0= 'scrollkeeper-update'
                    {
                    TK_0=(Token)match(input,151,FOLLOW_151_in_id17680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 29 :
                    // GrammarShellForMancoosi.g:16938:5: TK_0= 'update-mime-database'
                    {
                    TK_0=(Token)match(input,156,FOLLOW_156_in_id17692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 30 :
                    // GrammarShellForMancoosi.g:16951:5: TK_0= 'update-mime'
                    {
                    TK_0=(Token)match(input,157,FOLLOW_157_in_id17704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 31 :
                    // GrammarShellForMancoosi.g:16964:5: TK_0= 'dh_action'
                    {
                    TK_0=(Token)match(input,118,FOLLOW_118_in_id17716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 32 :
                    // GrammarShellForMancoosi.g:16977:5: TK_0= 'restart'
                    {
                    TK_0=(Token)match(input,119,FOLLOW_119_in_id17728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 33 :
                    // GrammarShellForMancoosi.g:16990:5: TK_0= 'start'
                    {
                    TK_0=(Token)match(input,121,FOLLOW_121_in_id17740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 34 :
                    // GrammarShellForMancoosi.g:17003:5: TK_0= 'invoke-rc.d'
                    {
                    TK_0=(Token)match(input,122,FOLLOW_122_in_id17752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 35 :
                    // GrammarShellForMancoosi.g:17016:5: TK_0= 'stop'
                    {
                    TK_0=(Token)match(input,124,FOLLOW_124_in_id17764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 36 :
                    // GrammarShellForMancoosi.g:17029:5: TK_0= 'inst'
                    {
                    TK_0=(Token)match(input,126,FOLLOW_126_in_id17776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 37 :
                    // GrammarShellForMancoosi.g:17042:5: TK_0= 'a+x'
                    {
                    TK_0=(Token)match(input,129,FOLLOW_129_in_id17788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 38 :
                    // GrammarShellForMancoosi.g:17055:5: TK_0= 'a-x'
                    {
                    TK_0=(Token)match(input,131,FOLLOW_131_in_id17800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 39 :
                    // GrammarShellForMancoosi.g:17068:5: TK_0= 'catalog'
                    {
                    TK_0=(Token)match(input,205,FOLLOW_205_in_id17812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 40 :
                    // GrammarShellForMancoosi.g:17081:5: TK_0= 'super'
                    {
                    TK_0=(Token)match(input,155,FOLLOW_155_in_id17824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 41 :
                    // GrammarShellForMancoosi.g:17094:5: TK_0= 'update-catalog'
                    {
                    TK_0=(Token)match(input,153,FOLLOW_153_in_id17836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 42 :
                    // GrammarShellForMancoosi.g:17107:5: TK_0= 'old'
                    {
                    TK_0=(Token)match(input,206,FOLLOW_206_in_id17848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 43 :
                    // GrammarShellForMancoosi.g:17120:5: TK_0= 'suidunregister'
                    {
                    TK_0=(Token)match(input,162,FOLLOW_162_in_id17860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 44 :
                    // GrammarShellForMancoosi.g:17133:5: TK_0= 'update-alternatives'
                    {
                    TK_0=(Token)match(input,190,FOLLOW_190_in_id17872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 45 :
                    // GrammarShellForMancoosi.g:17146:5: TK_0= 'install'
                    {
                    TK_0=(Token)match(input,163,FOLLOW_163_in_id17884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 46 :
                    // GrammarShellForMancoosi.g:17159:5: TK_0= 'x-window-manager'
                    {
                    TK_0=(Token)match(input,191,FOLLOW_191_in_id17896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 47 :
                    // GrammarShellForMancoosi.g:17172:5: TK_0= 'depmod'
                    {
                    TK_0=(Token)match(input,133,FOLLOW_133_in_id17908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 48 :
                    // GrammarShellForMancoosi.g:17185:5: TK_0= 'add'
                    {
                    TK_0=(Token)match(input,154,FOLLOW_154_in_id17920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 49 :
                    // GrammarShellForMancoosi.g:17198:5: TK_0= 'update-fonts-dir'
                    {
                    TK_0=(Token)match(input,194,FOLLOW_194_in_id17932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 50 :
                    // GrammarShellForMancoosi.g:17211:5: TK_0= 'md5sum'
                    {
                    TK_0=(Token)match(input,164,FOLLOW_164_in_id17944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 51 :
                    // GrammarShellForMancoosi.g:17224:5: TK_0= 'sed'
                    {
                    TK_0=(Token)match(input,165,FOLLOW_165_in_id17956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 52 :
                    // GrammarShellForMancoosi.g:17237:5: TK_0= 's'
                    {
                    TK_0=(Token)match(input,159,FOLLOW_159_in_id17968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 53 :
                    // GrammarShellForMancoosi.g:17250:5: TK_0= 'p'
                    {
                    TK_0=(Token)match(input,111,FOLLOW_111_in_id17980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 54 :
                    // GrammarShellForMancoosi.g:17263:5: TK_0= 'ordcat'
                    {
                    TK_0=(Token)match(input,152,FOLLOW_152_in_id17992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 55 :
                    // GrammarShellForMancoosi.g:17276:5: TK_0= 'dpkg-query'
                    {
                    TK_0=(Token)match(input,167,FOLLOW_167_in_id18004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 56 :
                    // GrammarShellForMancoosi.g:17289:5: TK_0= 'Conffiles'
                    {
                    TK_0=(Token)match(input,169,FOLLOW_169_in_id18016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 57 :
                    // GrammarShellForMancoosi.g:17302:5: TK_0= 'db_purge'
                    {
                    TK_0=(Token)match(input,195,FOLLOW_195_in_id18028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 58 :
                    // GrammarShellForMancoosi.g:17315:5: TK_0= 'slave'
                    {
                    TK_0=(Token)match(input,192,FOLLOW_192_in_id18040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 59 :
                    // GrammarShellForMancoosi.g:17328:5: TK_0= 'x-window-manager.1.gz'
                    {
                    TK_0=(Token)match(input,193,FOLLOW_193_in_id18052); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 60 :
                    // GrammarShellForMancoosi.g:17341:5: TK_0= 'suidregister'
                    {
                    TK_0=(Token)match(input,158,FOLLOW_158_in_id18064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 61 :
                    // GrammarShellForMancoosi.g:17354:5: TK_0= 'chown'
                    {
                    TK_0=(Token)match(input,161,FOLLOW_161_in_id18076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 62 :
                    // GrammarShellForMancoosi.g:17367:5: TK_0= 'chmod'
                    {
                    TK_0=(Token)match(input,128,FOLLOW_128_in_id18088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 63 :
                    // GrammarShellForMancoosi.g:17380:5: TK_0= 'read'
                    {
                    TK_0=(Token)match(input,177,FOLLOW_177_in_id18100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 64 :
                    // GrammarShellForMancoosi.g:17393:5: TK_0= 'dir'
                    {
                    TK_0=(Token)match(input,181,FOLLOW_181_in_id18112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 65 :
                    // GrammarShellForMancoosi.g:17406:5: TK_0= 'true'
                    {
                    TK_0=(Token)match(input,136,FOLLOW_136_in_id18124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 66 :
                    // GrammarShellForMancoosi.g:17419:5: TK_0= 'echo'
                    {
                    TK_0=(Token)match(input,170,FOLLOW_170_in_id18136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 67 :
                    // GrammarShellForMancoosi.g:17432:5: TK_0= 'Preserving'
                    {
                    TK_0=(Token)match(input,171,FOLLOW_171_in_id18149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 68 :
                    // GrammarShellForMancoosi.g:17445:5: TK_0= 'user'
                    {
                    TK_0=(Token)match(input,172,FOLLOW_172_in_id18161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 69 :
                    // GrammarShellForMancoosi.g:17458:5: TK_0= 'changes'
                    {
                    TK_0=(Token)match(input,173,FOLLOW_173_in_id18173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 70 :
                    // GrammarShellForMancoosi.g:17471:5: TK_0= 'to'
                    {
                    TK_0=(Token)match(input,174,FOLLOW_174_in_id18185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 71 :
                    // GrammarShellForMancoosi.g:17484:5: TK_0= 'o'
                    {
                    TK_0=(Token)match(input,149,FOLLOW_149_in_id18197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 72 :
                    // GrammarShellForMancoosi.g:17497:5: TK_0= 'mv'
                    {
                    TK_0=(Token)match(input,175,FOLLOW_175_in_id18209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 73 :
                    // GrammarShellForMancoosi.g:17510:5: TK_0= 'line'
                    {
                    TK_0=(Token)match(input,178,FOLLOW_178_in_id18221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 74 :
                    // GrammarShellForMancoosi.g:17523:5: TK_0= 'mode'
                    {
                    TK_0=(Token)match(input,182,FOLLOW_182_in_id18233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 75 :
                    // GrammarShellForMancoosi.g:17536:5: TK_0= 'mkdir'
                    {
                    TK_0=(Token)match(input,185,FOLLOW_185_in_id18245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 76 :
                    // GrammarShellForMancoosi.g:17549:5: TK_0= 'group'
                    {
                    TK_0=(Token)match(input,183,FOLLOW_183_in_id18257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 77 :
                    // GrammarShellForMancoosi.g:17562:5: TK_0= 'dpkg'
                    {
                    TK_0=(Token)match(input,142,FOLLOW_142_in_id18269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 78 :
                    // GrammarShellForMancoosi.g:17575:5: TK_0= 'awk'
                    {
                    TK_0=(Token)match(input,144,FOLLOW_144_in_id18281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 79 :
                    // GrammarShellForMancoosi.g:17588:5: TK_0= 'py'
                    {
                    TK_0=(Token)match(input,207,FOLLOW_207_in_id18293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 80 :
                    // GrammarShellForMancoosi.g:17601:5: TK_0= 'print'
                    {
                    TK_0=(Token)match(input,147,FOLLOW_147_in_id18305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 81 :
                    // GrammarShellForMancoosi.g:17614:5: TK_0= 'c'
                    {
                    TK_0=(Token)match(input,148,FOLLOW_148_in_id18317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 82 :
                    // GrammarShellForMancoosi.g:17627:5: TK_0= 'xargs'
                    {
                    TK_0=(Token)match(input,150,FOLLOW_150_in_id18329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 83 :
                    // GrammarShellForMancoosi.g:17640:5: TK_0= 'n'
                    {
                    TK_0=(Token)match(input,117,FOLLOW_117_in_id18341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 84 :
                    // GrammarShellForMancoosi.g:17653:5: TK_0= 'set'
                    {
                    TK_0=(Token)match(input,179,FOLLOW_179_in_id18353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 85 :
                    // GrammarShellForMancoosi.g:17666:5: TK_0= '*'
                    {
                    TK_0=(Token)match(input,166,FOLLOW_166_in_id18365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 86 :
                    // GrammarShellForMancoosi.g:17679:5: TK_0= 'q'
                    {
                    TK_0=(Token)match(input,85,FOLLOW_85_in_id18377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 87 :
                    // GrammarShellForMancoosi.g:17692:5: TK_0= 'i'
                    {
                    TK_0=(Token)match(input,89,FOLLOW_89_in_id18389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 88 :
                    // GrammarShellForMancoosi.g:17705:5: TK_0= 'r'
                    {
                    TK_0=(Token)match(input,91,FOLLOW_91_in_id18401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 89 :
                    // GrammarShellForMancoosi.g:17718:5: TK_0= 'x'
                    {
                    TK_0=(Token)match(input,92,FOLLOW_92_in_id18413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 90 :
                    // GrammarShellForMancoosi.g:17731:5: TK_0= 'd'
                    {
                    TK_0=(Token)match(input,100,FOLLOW_100_in_id18425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 91 :
                    // GrammarShellForMancoosi.g:17744:5: TK_0= 'f'
                    {
                    TK_0=(Token)match(input,108,FOLLOW_108_in_id18437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 92 :
                    // GrammarShellForMancoosi.g:17757:5: TK_0= 'e'
                    {
                    TK_0=(Token)match(input,132,FOLLOW_132_in_id18449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 93 :
                    // GrammarShellForMancoosi.g:17770:5: TK_0= 'a'
                    {
                    TK_0=(Token)match(input,134,FOLLOW_134_in_id18461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 94 :
                    // GrammarShellForMancoosi.g:17783:5: TK_0= 'F'
                    {
                    TK_0=(Token)match(input,135,FOLLOW_135_in_id18473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 95 :
                    // GrammarShellForMancoosi.g:17796:5: TK_0= 'L'
                    {
                    TK_0=(Token)match(input,143,FOLLOW_143_in_id18485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 96 :
                    // GrammarShellForMancoosi.g:17809:5: TK_0= 'W'
                    {
                    TK_0=(Token)match(input,168,FOLLOW_168_in_id18497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		idReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;
                case 97 :
                    // GrammarShellForMancoosi.g:17822:5: IDGen= ID
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_id18509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		idReturnNode.setKind("id");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			idReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = idReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "id"

    // $ANTLR start synpred3_GrammarShellForMancoosi
    public final void synpred3_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateGen=null;
        RuleReturnScope templateGen = null;
        // GrammarShellForMancoosi.g:99:4: (templateGen+= template )
        // GrammarShellForMancoosi.g:99:4: templateGen+= template
        {
        pushFollow(FOLLOW_template_in_synpred3_GrammarShellForMancoosi129);
        templateGen=template();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateGen==null) list_templateGen=new ArrayList();
        list_templateGen.add(templateGen);


        }
    }
    // $ANTLR end synpred3_GrammarShellForMancoosi

    // $ANTLR start synpred4_GrammarShellForMancoosi
    public final void synpred4_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_command_statementGen=null;
        RuleReturnScope command_statementGen = null;
        // GrammarShellForMancoosi.g:117:5: (command_statementGen+= command_statement )
        // GrammarShellForMancoosi.g:117:5: command_statementGen+= command_statement
        {
        pushFollow(FOLLOW_command_statement_in_synpred4_GrammarShellForMancoosi141);
        command_statementGen=command_statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_command_statementGen==null) list_command_statementGen=new ArrayList();
        list_command_statementGen.add(command_statementGen);


        }
    }
    // $ANTLR end synpred4_GrammarShellForMancoosi

    // $ANTLR start synpred5_GrammarShellForMancoosi
    public final void synpred5_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_control_statementGen=null;
        RuleReturnScope control_statementGen = null;
        // GrammarShellForMancoosi.g:135:5: (control_statementGen+= control_statement )
        // GrammarShellForMancoosi.g:135:5: control_statementGen+= control_statement
        {
        pushFollow(FOLLOW_control_statement_in_synpred5_GrammarShellForMancoosi153);
        control_statementGen=control_statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_control_statementGen==null) list_control_statementGen=new ArrayList();
        list_control_statementGen.add(control_statementGen);


        }
    }
    // $ANTLR end synpred5_GrammarShellForMancoosi

    // $ANTLR start synpred7_GrammarShellForMancoosi
    public final void synpred7_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_function_statementGen=null;
        RuleReturnScope function_statementGen = null;
        // GrammarShellForMancoosi.g:171:5: (function_statementGen+= function_statement )
        // GrammarShellForMancoosi.g:171:5: function_statementGen+= function_statement
        {
        pushFollow(FOLLOW_function_statement_in_synpred7_GrammarShellForMancoosi177);
        function_statementGen=function_statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_function_statementGen==null) list_function_statementGen=new ArrayList();
        list_function_statementGen.add(function_statementGen);


        }
    }
    // $ANTLR end synpred7_GrammarShellForMancoosi

    // $ANTLR start synpred8_GrammarShellForMancoosi
    public final void synpred8_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA1Gen=null;
        RuleReturnScope templateA1Gen = null;
        // GrammarShellForMancoosi.g:210:4: (templateA1Gen+= templateA1 )
        // GrammarShellForMancoosi.g:210:4: templateA1Gen+= templateA1
        {
        pushFollow(FOLLOW_templateA1_in_synpred8_GrammarShellForMancoosi211);
        templateA1Gen=templateA1();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA1Gen==null) list_templateA1Gen=new ArrayList();
        list_templateA1Gen.add(templateA1Gen);


        }
    }
    // $ANTLR end synpred8_GrammarShellForMancoosi

    // $ANTLR start synpred9_GrammarShellForMancoosi
    public final void synpred9_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA2Gen=null;
        RuleReturnScope templateA2Gen = null;
        // GrammarShellForMancoosi.g:228:5: (templateA2Gen+= templateA2 )
        // GrammarShellForMancoosi.g:228:5: templateA2Gen+= templateA2
        {
        pushFollow(FOLLOW_templateA2_in_synpred9_GrammarShellForMancoosi223);
        templateA2Gen=templateA2();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA2Gen==null) list_templateA2Gen=new ArrayList();
        list_templateA2Gen.add(templateA2Gen);


        }
    }
    // $ANTLR end synpred9_GrammarShellForMancoosi

    // $ANTLR start synpred10_GrammarShellForMancoosi
    public final void synpred10_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA3Gen=null;
        RuleReturnScope templateA3Gen = null;
        // GrammarShellForMancoosi.g:246:5: (templateA3Gen+= templateA3 )
        // GrammarShellForMancoosi.g:246:5: templateA3Gen+= templateA3
        {
        pushFollow(FOLLOW_templateA3_in_synpred10_GrammarShellForMancoosi235);
        templateA3Gen=templateA3();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA3Gen==null) list_templateA3Gen=new ArrayList();
        list_templateA3Gen.add(templateA3Gen);


        }
    }
    // $ANTLR end synpred10_GrammarShellForMancoosi

    // $ANTLR start synpred11_GrammarShellForMancoosi
    public final void synpred11_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA4Gen=null;
        RuleReturnScope templateA4Gen = null;
        // GrammarShellForMancoosi.g:264:5: (templateA4Gen+= templateA4 )
        // GrammarShellForMancoosi.g:264:5: templateA4Gen+= templateA4
        {
        pushFollow(FOLLOW_templateA4_in_synpred11_GrammarShellForMancoosi247);
        templateA4Gen=templateA4();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA4Gen==null) list_templateA4Gen=new ArrayList();
        list_templateA4Gen.add(templateA4Gen);


        }
    }
    // $ANTLR end synpred11_GrammarShellForMancoosi

    // $ANTLR start synpred12_GrammarShellForMancoosi
    public final void synpred12_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA5Gen=null;
        RuleReturnScope templateA5Gen = null;
        // GrammarShellForMancoosi.g:282:5: (templateA5Gen+= templateA5 )
        // GrammarShellForMancoosi.g:282:5: templateA5Gen+= templateA5
        {
        pushFollow(FOLLOW_templateA5_in_synpred12_GrammarShellForMancoosi259);
        templateA5Gen=templateA5();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA5Gen==null) list_templateA5Gen=new ArrayList();
        list_templateA5Gen.add(templateA5Gen);


        }
    }
    // $ANTLR end synpred12_GrammarShellForMancoosi

    // $ANTLR start synpred13_GrammarShellForMancoosi
    public final void synpred13_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA6Gen=null;
        RuleReturnScope templateA6Gen = null;
        // GrammarShellForMancoosi.g:300:5: (templateA6Gen+= templateA6 )
        // GrammarShellForMancoosi.g:300:5: templateA6Gen+= templateA6
        {
        pushFollow(FOLLOW_templateA6_in_synpred13_GrammarShellForMancoosi271);
        templateA6Gen=templateA6();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA6Gen==null) list_templateA6Gen=new ArrayList();
        list_templateA6Gen.add(templateA6Gen);


        }
    }
    // $ANTLR end synpred13_GrammarShellForMancoosi

    // $ANTLR start synpred14_GrammarShellForMancoosi
    public final void synpred14_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA7Gen=null;
        RuleReturnScope templateA7Gen = null;
        // GrammarShellForMancoosi.g:318:5: (templateA7Gen+= templateA7 )
        // GrammarShellForMancoosi.g:318:5: templateA7Gen+= templateA7
        {
        pushFollow(FOLLOW_templateA7_in_synpred14_GrammarShellForMancoosi283);
        templateA7Gen=templateA7();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA7Gen==null) list_templateA7Gen=new ArrayList();
        list_templateA7Gen.add(templateA7Gen);


        }
    }
    // $ANTLR end synpred14_GrammarShellForMancoosi

    // $ANTLR start synpred15_GrammarShellForMancoosi
    public final void synpred15_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA8Gen=null;
        RuleReturnScope templateA8Gen = null;
        // GrammarShellForMancoosi.g:336:5: (templateA8Gen+= templateA8 )
        // GrammarShellForMancoosi.g:336:5: templateA8Gen+= templateA8
        {
        pushFollow(FOLLOW_templateA8_in_synpred15_GrammarShellForMancoosi295);
        templateA8Gen=templateA8();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA8Gen==null) list_templateA8Gen=new ArrayList();
        list_templateA8Gen.add(templateA8Gen);


        }
    }
    // $ANTLR end synpred15_GrammarShellForMancoosi

    // $ANTLR start synpred16_GrammarShellForMancoosi
    public final void synpred16_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA9Gen=null;
        RuleReturnScope templateA9Gen = null;
        // GrammarShellForMancoosi.g:354:5: (templateA9Gen+= templateA9 )
        // GrammarShellForMancoosi.g:354:5: templateA9Gen+= templateA9
        {
        pushFollow(FOLLOW_templateA9_in_synpred16_GrammarShellForMancoosi307);
        templateA9Gen=templateA9();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA9Gen==null) list_templateA9Gen=new ArrayList();
        list_templateA9Gen.add(templateA9Gen);


        }
    }
    // $ANTLR end synpred16_GrammarShellForMancoosi

    // $ANTLR start synpred17_GrammarShellForMancoosi
    public final void synpred17_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA10Gen=null;
        RuleReturnScope templateA10Gen = null;
        // GrammarShellForMancoosi.g:372:5: (templateA10Gen+= templateA10 )
        // GrammarShellForMancoosi.g:372:5: templateA10Gen+= templateA10
        {
        pushFollow(FOLLOW_templateA10_in_synpred17_GrammarShellForMancoosi319);
        templateA10Gen=templateA10();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA10Gen==null) list_templateA10Gen=new ArrayList();
        list_templateA10Gen.add(templateA10Gen);


        }
    }
    // $ANTLR end synpred17_GrammarShellForMancoosi

    // $ANTLR start synpred18_GrammarShellForMancoosi
    public final void synpred18_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA11Gen=null;
        RuleReturnScope templateA11Gen = null;
        // GrammarShellForMancoosi.g:390:5: (templateA11Gen+= templateA11 )
        // GrammarShellForMancoosi.g:390:5: templateA11Gen+= templateA11
        {
        pushFollow(FOLLOW_templateA11_in_synpred18_GrammarShellForMancoosi331);
        templateA11Gen=templateA11();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA11Gen==null) list_templateA11Gen=new ArrayList();
        list_templateA11Gen.add(templateA11Gen);


        }
    }
    // $ANTLR end synpred18_GrammarShellForMancoosi

    // $ANTLR start synpred19_GrammarShellForMancoosi
    public final void synpred19_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA12_13Gen=null;
        RuleReturnScope templateA12_13Gen = null;
        // GrammarShellForMancoosi.g:408:5: (templateA12_13Gen+= templateA12_13 )
        // GrammarShellForMancoosi.g:408:5: templateA12_13Gen+= templateA12_13
        {
        pushFollow(FOLLOW_templateA12_13_in_synpred19_GrammarShellForMancoosi343);
        templateA12_13Gen=templateA12_13();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA12_13Gen==null) list_templateA12_13Gen=new ArrayList();
        list_templateA12_13Gen.add(templateA12_13Gen);


        }
    }
    // $ANTLR end synpred19_GrammarShellForMancoosi

    // $ANTLR start synpred20_GrammarShellForMancoosi
    public final void synpred20_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA14Gen=null;
        RuleReturnScope templateA14Gen = null;
        // GrammarShellForMancoosi.g:426:5: (templateA14Gen+= templateA14 )
        // GrammarShellForMancoosi.g:426:5: templateA14Gen+= templateA14
        {
        pushFollow(FOLLOW_templateA14_in_synpred20_GrammarShellForMancoosi355);
        templateA14Gen=templateA14();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA14Gen==null) list_templateA14Gen=new ArrayList();
        list_templateA14Gen.add(templateA14Gen);


        }
    }
    // $ANTLR end synpred20_GrammarShellForMancoosi

    // $ANTLR start synpred21_GrammarShellForMancoosi
    public final void synpred21_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA15Gen=null;
        RuleReturnScope templateA15Gen = null;
        // GrammarShellForMancoosi.g:444:5: (templateA15Gen+= templateA15 )
        // GrammarShellForMancoosi.g:444:5: templateA15Gen+= templateA15
        {
        pushFollow(FOLLOW_templateA15_in_synpred21_GrammarShellForMancoosi367);
        templateA15Gen=templateA15();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA15Gen==null) list_templateA15Gen=new ArrayList();
        list_templateA15Gen.add(templateA15Gen);


        }
    }
    // $ANTLR end synpred21_GrammarShellForMancoosi

    // $ANTLR start synpred22_GrammarShellForMancoosi
    public final void synpred22_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA16Gen=null;
        RuleReturnScope templateA16Gen = null;
        // GrammarShellForMancoosi.g:462:5: (templateA16Gen+= templateA16 )
        // GrammarShellForMancoosi.g:462:5: templateA16Gen+= templateA16
        {
        pushFollow(FOLLOW_templateA16_in_synpred22_GrammarShellForMancoosi380);
        templateA16Gen=templateA16();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA16Gen==null) list_templateA16Gen=new ArrayList();
        list_templateA16Gen.add(templateA16Gen);


        }
    }
    // $ANTLR end synpred22_GrammarShellForMancoosi

    // $ANTLR start synpred23_GrammarShellForMancoosi
    public final void synpred23_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA17Gen=null;
        RuleReturnScope templateA17Gen = null;
        // GrammarShellForMancoosi.g:480:5: (templateA17Gen+= templateA17 )
        // GrammarShellForMancoosi.g:480:5: templateA17Gen+= templateA17
        {
        pushFollow(FOLLOW_templateA17_in_synpred23_GrammarShellForMancoosi392);
        templateA17Gen=templateA17();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA17Gen==null) list_templateA17Gen=new ArrayList();
        list_templateA17Gen.add(templateA17Gen);


        }
    }
    // $ANTLR end synpred23_GrammarShellForMancoosi

    // $ANTLR start synpred24_GrammarShellForMancoosi
    public final void synpred24_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA18Gen=null;
        RuleReturnScope templateA18Gen = null;
        // GrammarShellForMancoosi.g:498:5: (templateA18Gen+= templateA18 )
        // GrammarShellForMancoosi.g:498:5: templateA18Gen+= templateA18
        {
        pushFollow(FOLLOW_templateA18_in_synpred24_GrammarShellForMancoosi404);
        templateA18Gen=templateA18();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA18Gen==null) list_templateA18Gen=new ArrayList();
        list_templateA18Gen.add(templateA18Gen);


        }
    }
    // $ANTLR end synpred24_GrammarShellForMancoosi

    // $ANTLR start synpred25_GrammarShellForMancoosi
    public final void synpred25_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA19Gen=null;
        RuleReturnScope templateA19Gen = null;
        // GrammarShellForMancoosi.g:516:5: (templateA19Gen+= templateA19 )
        // GrammarShellForMancoosi.g:516:5: templateA19Gen+= templateA19
        {
        pushFollow(FOLLOW_templateA19_in_synpred25_GrammarShellForMancoosi416);
        templateA19Gen=templateA19();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA19Gen==null) list_templateA19Gen=new ArrayList();
        list_templateA19Gen.add(templateA19Gen);


        }
    }
    // $ANTLR end synpred25_GrammarShellForMancoosi

    // $ANTLR start synpred26_GrammarShellForMancoosi
    public final void synpred26_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA20Gen=null;
        RuleReturnScope templateA20Gen = null;
        // GrammarShellForMancoosi.g:534:5: (templateA20Gen+= templateA20 )
        // GrammarShellForMancoosi.g:534:5: templateA20Gen+= templateA20
        {
        pushFollow(FOLLOW_templateA20_in_synpred26_GrammarShellForMancoosi428);
        templateA20Gen=templateA20();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA20Gen==null) list_templateA20Gen=new ArrayList();
        list_templateA20Gen.add(templateA20Gen);


        }
    }
    // $ANTLR end synpred26_GrammarShellForMancoosi

    // $ANTLR start synpred27_GrammarShellForMancoosi
    public final void synpred27_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA21Gen=null;
        RuleReturnScope templateA21Gen = null;
        // GrammarShellForMancoosi.g:552:5: (templateA21Gen+= templateA21 )
        // GrammarShellForMancoosi.g:552:5: templateA21Gen+= templateA21
        {
        pushFollow(FOLLOW_templateA21_in_synpred27_GrammarShellForMancoosi440);
        templateA21Gen=templateA21();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA21Gen==null) list_templateA21Gen=new ArrayList();
        list_templateA21Gen.add(templateA21Gen);


        }
    }
    // $ANTLR end synpred27_GrammarShellForMancoosi

    // $ANTLR start synpred28_GrammarShellForMancoosi
    public final void synpred28_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA22Gen=null;
        RuleReturnScope templateA22Gen = null;
        // GrammarShellForMancoosi.g:570:5: (templateA22Gen+= templateA22 )
        // GrammarShellForMancoosi.g:570:5: templateA22Gen+= templateA22
        {
        pushFollow(FOLLOW_templateA22_in_synpred28_GrammarShellForMancoosi452);
        templateA22Gen=templateA22();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA22Gen==null) list_templateA22Gen=new ArrayList();
        list_templateA22Gen.add(templateA22Gen);


        }
    }
    // $ANTLR end synpred28_GrammarShellForMancoosi

    // $ANTLR start synpred29_GrammarShellForMancoosi
    public final void synpred29_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA23Gen=null;
        RuleReturnScope templateA23Gen = null;
        // GrammarShellForMancoosi.g:588:5: (templateA23Gen+= templateA23 )
        // GrammarShellForMancoosi.g:588:5: templateA23Gen+= templateA23
        {
        pushFollow(FOLLOW_templateA23_in_synpred29_GrammarShellForMancoosi464);
        templateA23Gen=templateA23();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA23Gen==null) list_templateA23Gen=new ArrayList();
        list_templateA23Gen.add(templateA23Gen);


        }
    }
    // $ANTLR end synpred29_GrammarShellForMancoosi

    // $ANTLR start synpred30_GrammarShellForMancoosi
    public final void synpred30_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA24Gen=null;
        RuleReturnScope templateA24Gen = null;
        // GrammarShellForMancoosi.g:606:5: (templateA24Gen+= templateA24 )
        // GrammarShellForMancoosi.g:606:5: templateA24Gen+= templateA24
        {
        pushFollow(FOLLOW_templateA24_in_synpred30_GrammarShellForMancoosi476);
        templateA24Gen=templateA24();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA24Gen==null) list_templateA24Gen=new ArrayList();
        list_templateA24Gen.add(templateA24Gen);


        }
    }
    // $ANTLR end synpred30_GrammarShellForMancoosi

    // $ANTLR start synpred31_GrammarShellForMancoosi
    public final void synpred31_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA25Gen=null;
        RuleReturnScope templateA25Gen = null;
        // GrammarShellForMancoosi.g:624:5: (templateA25Gen+= templateA25 )
        // GrammarShellForMancoosi.g:624:5: templateA25Gen+= templateA25
        {
        pushFollow(FOLLOW_templateA25_in_synpred31_GrammarShellForMancoosi488);
        templateA25Gen=templateA25();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA25Gen==null) list_templateA25Gen=new ArrayList();
        list_templateA25Gen.add(templateA25Gen);


        }
    }
    // $ANTLR end synpred31_GrammarShellForMancoosi

    // $ANTLR start synpred32_GrammarShellForMancoosi
    public final void synpred32_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA26Gen=null;
        RuleReturnScope templateA26Gen = null;
        // GrammarShellForMancoosi.g:642:5: (templateA26Gen+= templateA26 )
        // GrammarShellForMancoosi.g:642:5: templateA26Gen+= templateA26
        {
        pushFollow(FOLLOW_templateA26_in_synpred32_GrammarShellForMancoosi500);
        templateA26Gen=templateA26();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA26Gen==null) list_templateA26Gen=new ArrayList();
        list_templateA26Gen.add(templateA26Gen);


        }
    }
    // $ANTLR end synpred32_GrammarShellForMancoosi

    // $ANTLR start synpred33_GrammarShellForMancoosi
    public final void synpred33_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA27Gen=null;
        RuleReturnScope templateA27Gen = null;
        // GrammarShellForMancoosi.g:660:5: (templateA27Gen+= templateA27 )
        // GrammarShellForMancoosi.g:660:5: templateA27Gen+= templateA27
        {
        pushFollow(FOLLOW_templateA27_in_synpred33_GrammarShellForMancoosi512);
        templateA27Gen=templateA27();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA27Gen==null) list_templateA27Gen=new ArrayList();
        list_templateA27Gen.add(templateA27Gen);


        }
    }
    // $ANTLR end synpred33_GrammarShellForMancoosi

    // $ANTLR start synpred34_GrammarShellForMancoosi
    public final void synpred34_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA28Gen=null;
        RuleReturnScope templateA28Gen = null;
        // GrammarShellForMancoosi.g:678:5: (templateA28Gen+= templateA28 )
        // GrammarShellForMancoosi.g:678:5: templateA28Gen+= templateA28
        {
        pushFollow(FOLLOW_templateA28_in_synpred34_GrammarShellForMancoosi524);
        templateA28Gen=templateA28();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA28Gen==null) list_templateA28Gen=new ArrayList();
        list_templateA28Gen.add(templateA28Gen);


        }
    }
    // $ANTLR end synpred34_GrammarShellForMancoosi

    // $ANTLR start synpred35_GrammarShellForMancoosi
    public final void synpred35_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA29Gen=null;
        RuleReturnScope templateA29Gen = null;
        // GrammarShellForMancoosi.g:696:5: (templateA29Gen+= templateA29 )
        // GrammarShellForMancoosi.g:696:5: templateA29Gen+= templateA29
        {
        pushFollow(FOLLOW_templateA29_in_synpred35_GrammarShellForMancoosi536);
        templateA29Gen=templateA29();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA29Gen==null) list_templateA29Gen=new ArrayList();
        list_templateA29Gen.add(templateA29Gen);


        }
    }
    // $ANTLR end synpred35_GrammarShellForMancoosi

    // $ANTLR start synpred38_GrammarShellForMancoosi
    public final void synpred38_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA32Gen=null;
        RuleReturnScope templateA32Gen = null;
        // GrammarShellForMancoosi.g:750:5: (templateA32Gen+= templateA32 )
        // GrammarShellForMancoosi.g:750:5: templateA32Gen+= templateA32
        {
        pushFollow(FOLLOW_templateA32_in_synpred38_GrammarShellForMancoosi572);
        templateA32Gen=templateA32();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA32Gen==null) list_templateA32Gen=new ArrayList();
        list_templateA32Gen.add(templateA32Gen);


        }
    }
    // $ANTLR end synpred38_GrammarShellForMancoosi

    // $ANTLR start synpred39_GrammarShellForMancoosi
    public final void synpred39_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA33Gen=null;
        RuleReturnScope templateA33Gen = null;
        // GrammarShellForMancoosi.g:768:5: (templateA33Gen+= templateA33 )
        // GrammarShellForMancoosi.g:768:5: templateA33Gen+= templateA33
        {
        pushFollow(FOLLOW_templateA33_in_synpred39_GrammarShellForMancoosi584);
        templateA33Gen=templateA33();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA33Gen==null) list_templateA33Gen=new ArrayList();
        list_templateA33Gen.add(templateA33Gen);


        }
    }
    // $ANTLR end synpred39_GrammarShellForMancoosi

    // $ANTLR start synpred40_GrammarShellForMancoosi
    public final void synpred40_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA34Gen=null;
        RuleReturnScope templateA34Gen = null;
        // GrammarShellForMancoosi.g:786:5: (templateA34Gen+= templateA34 )
        // GrammarShellForMancoosi.g:786:5: templateA34Gen+= templateA34
        {
        pushFollow(FOLLOW_templateA34_in_synpred40_GrammarShellForMancoosi596);
        templateA34Gen=templateA34();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA34Gen==null) list_templateA34Gen=new ArrayList();
        list_templateA34Gen.add(templateA34Gen);


        }
    }
    // $ANTLR end synpred40_GrammarShellForMancoosi

    // $ANTLR start synpred41_GrammarShellForMancoosi
    public final void synpred41_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA35Gen=null;
        RuleReturnScope templateA35Gen = null;
        // GrammarShellForMancoosi.g:804:5: (templateA35Gen+= templateA35 )
        // GrammarShellForMancoosi.g:804:5: templateA35Gen+= templateA35
        {
        pushFollow(FOLLOW_templateA35_in_synpred41_GrammarShellForMancoosi608);
        templateA35Gen=templateA35();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA35Gen==null) list_templateA35Gen=new ArrayList();
        list_templateA35Gen.add(templateA35Gen);


        }
    }
    // $ANTLR end synpred41_GrammarShellForMancoosi

    // $ANTLR start synpred42_GrammarShellForMancoosi
    public final void synpred42_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA36Gen=null;
        RuleReturnScope templateA36Gen = null;
        // GrammarShellForMancoosi.g:822:5: (templateA36Gen+= templateA36 )
        // GrammarShellForMancoosi.g:822:5: templateA36Gen+= templateA36
        {
        pushFollow(FOLLOW_templateA36_in_synpred42_GrammarShellForMancoosi620);
        templateA36Gen=templateA36();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA36Gen==null) list_templateA36Gen=new ArrayList();
        list_templateA36Gen.add(templateA36Gen);


        }
    }
    // $ANTLR end synpred42_GrammarShellForMancoosi

    // $ANTLR start synpred43_GrammarShellForMancoosi
    public final void synpred43_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA37Gen=null;
        RuleReturnScope templateA37Gen = null;
        // GrammarShellForMancoosi.g:840:5: (templateA37Gen+= templateA37 )
        // GrammarShellForMancoosi.g:840:5: templateA37Gen+= templateA37
        {
        pushFollow(FOLLOW_templateA37_in_synpred43_GrammarShellForMancoosi632);
        templateA37Gen=templateA37();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA37Gen==null) list_templateA37Gen=new ArrayList();
        list_templateA37Gen.add(templateA37Gen);


        }
    }
    // $ANTLR end synpred43_GrammarShellForMancoosi

    // $ANTLR start synpred44_GrammarShellForMancoosi
    public final void synpred44_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA38Gen=null;
        RuleReturnScope templateA38Gen = null;
        // GrammarShellForMancoosi.g:858:5: (templateA38Gen+= templateA38 )
        // GrammarShellForMancoosi.g:858:5: templateA38Gen+= templateA38
        {
        pushFollow(FOLLOW_templateA38_in_synpred44_GrammarShellForMancoosi644);
        templateA38Gen=templateA38();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA38Gen==null) list_templateA38Gen=new ArrayList();
        list_templateA38Gen.add(templateA38Gen);


        }
    }
    // $ANTLR end synpred44_GrammarShellForMancoosi

    // $ANTLR start synpred45_GrammarShellForMancoosi
    public final void synpred45_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA39Gen=null;
        RuleReturnScope templateA39Gen = null;
        // GrammarShellForMancoosi.g:876:5: (templateA39Gen+= templateA39 )
        // GrammarShellForMancoosi.g:876:5: templateA39Gen+= templateA39
        {
        pushFollow(FOLLOW_templateA39_in_synpred45_GrammarShellForMancoosi656);
        templateA39Gen=templateA39();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA39Gen==null) list_templateA39Gen=new ArrayList();
        list_templateA39Gen.add(templateA39Gen);


        }
    }
    // $ANTLR end synpred45_GrammarShellForMancoosi

    // $ANTLR start synpred46_GrammarShellForMancoosi
    public final void synpred46_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA40Gen=null;
        RuleReturnScope templateA40Gen = null;
        // GrammarShellForMancoosi.g:894:5: (templateA40Gen+= templateA40 )
        // GrammarShellForMancoosi.g:894:5: templateA40Gen+= templateA40
        {
        pushFollow(FOLLOW_templateA40_in_synpred46_GrammarShellForMancoosi668);
        templateA40Gen=templateA40();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA40Gen==null) list_templateA40Gen=new ArrayList();
        list_templateA40Gen.add(templateA40Gen);


        }
    }
    // $ANTLR end synpred46_GrammarShellForMancoosi

    // $ANTLR start synpred47_GrammarShellForMancoosi
    public final void synpred47_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA41Gen=null;
        RuleReturnScope templateA41Gen = null;
        // GrammarShellForMancoosi.g:912:5: (templateA41Gen+= templateA41 )
        // GrammarShellForMancoosi.g:912:5: templateA41Gen+= templateA41
        {
        pushFollow(FOLLOW_templateA41_in_synpred47_GrammarShellForMancoosi680);
        templateA41Gen=templateA41();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA41Gen==null) list_templateA41Gen=new ArrayList();
        list_templateA41Gen.add(templateA41Gen);


        }
    }
    // $ANTLR end synpred47_GrammarShellForMancoosi

    // $ANTLR start synpred48_GrammarShellForMancoosi
    public final void synpred48_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA42Gen=null;
        RuleReturnScope templateA42Gen = null;
        // GrammarShellForMancoosi.g:930:5: (templateA42Gen+= templateA42 )
        // GrammarShellForMancoosi.g:930:5: templateA42Gen+= templateA42
        {
        pushFollow(FOLLOW_templateA42_in_synpred48_GrammarShellForMancoosi692);
        templateA42Gen=templateA42();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA42Gen==null) list_templateA42Gen=new ArrayList();
        list_templateA42Gen.add(templateA42Gen);


        }
    }
    // $ANTLR end synpred48_GrammarShellForMancoosi

    // $ANTLR start synpred49_GrammarShellForMancoosi
    public final void synpred49_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA43Gen=null;
        RuleReturnScope templateA43Gen = null;
        // GrammarShellForMancoosi.g:948:5: (templateA43Gen+= templateA43 )
        // GrammarShellForMancoosi.g:948:5: templateA43Gen+= templateA43
        {
        pushFollow(FOLLOW_templateA43_in_synpred49_GrammarShellForMancoosi704);
        templateA43Gen=templateA43();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA43Gen==null) list_templateA43Gen=new ArrayList();
        list_templateA43Gen.add(templateA43Gen);


        }
    }
    // $ANTLR end synpred49_GrammarShellForMancoosi

    // $ANTLR start synpred50_GrammarShellForMancoosi
    public final void synpred50_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA44Gen=null;
        RuleReturnScope templateA44Gen = null;
        // GrammarShellForMancoosi.g:966:5: (templateA44Gen+= templateA44 )
        // GrammarShellForMancoosi.g:966:5: templateA44Gen+= templateA44
        {
        pushFollow(FOLLOW_templateA44_in_synpred50_GrammarShellForMancoosi716);
        templateA44Gen=templateA44();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA44Gen==null) list_templateA44Gen=new ArrayList();
        list_templateA44Gen.add(templateA44Gen);


        }
    }
    // $ANTLR end synpred50_GrammarShellForMancoosi

    // $ANTLR start synpred51_GrammarShellForMancoosi
    public final void synpred51_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA45Gen=null;
        RuleReturnScope templateA45Gen = null;
        // GrammarShellForMancoosi.g:984:5: (templateA45Gen+= templateA45 )
        // GrammarShellForMancoosi.g:984:5: templateA45Gen+= templateA45
        {
        pushFollow(FOLLOW_templateA45_in_synpred51_GrammarShellForMancoosi728);
        templateA45Gen=templateA45();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA45Gen==null) list_templateA45Gen=new ArrayList();
        list_templateA45Gen.add(templateA45Gen);


        }
    }
    // $ANTLR end synpred51_GrammarShellForMancoosi

    // $ANTLR start synpred53_GrammarShellForMancoosi
    public final void synpred53_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA47Gen=null;
        RuleReturnScope templateA47Gen = null;
        // GrammarShellForMancoosi.g:1020:5: (templateA47Gen+= templateA47 )
        // GrammarShellForMancoosi.g:1020:5: templateA47Gen+= templateA47
        {
        pushFollow(FOLLOW_templateA47_in_synpred53_GrammarShellForMancoosi752);
        templateA47Gen=templateA47();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA47Gen==null) list_templateA47Gen=new ArrayList();
        list_templateA47Gen.add(templateA47Gen);


        }
    }
    // $ANTLR end synpred53_GrammarShellForMancoosi

    // $ANTLR start synpred54_GrammarShellForMancoosi
    public final void synpred54_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA48Gen=null;
        RuleReturnScope templateA48Gen = null;
        // GrammarShellForMancoosi.g:1038:5: (templateA48Gen+= templateA48 )
        // GrammarShellForMancoosi.g:1038:5: templateA48Gen+= templateA48
        {
        pushFollow(FOLLOW_templateA48_in_synpred54_GrammarShellForMancoosi764);
        templateA48Gen=templateA48();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA48Gen==null) list_templateA48Gen=new ArrayList();
        list_templateA48Gen.add(templateA48Gen);


        }
    }
    // $ANTLR end synpred54_GrammarShellForMancoosi

    // $ANTLR start synpred55_GrammarShellForMancoosi
    public final void synpred55_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA49Gen=null;
        RuleReturnScope templateA49Gen = null;
        // GrammarShellForMancoosi.g:1056:5: (templateA49Gen+= templateA49 )
        // GrammarShellForMancoosi.g:1056:5: templateA49Gen+= templateA49
        {
        pushFollow(FOLLOW_templateA49_in_synpred55_GrammarShellForMancoosi776);
        templateA49Gen=templateA49();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA49Gen==null) list_templateA49Gen=new ArrayList();
        list_templateA49Gen.add(templateA49Gen);


        }
    }
    // $ANTLR end synpred55_GrammarShellForMancoosi

    // $ANTLR start synpred56_GrammarShellForMancoosi
    public final void synpred56_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA50Gen=null;
        RuleReturnScope templateA50Gen = null;
        // GrammarShellForMancoosi.g:1074:5: (templateA50Gen+= templateA50 )
        // GrammarShellForMancoosi.g:1074:5: templateA50Gen+= templateA50
        {
        pushFollow(FOLLOW_templateA50_in_synpred56_GrammarShellForMancoosi788);
        templateA50Gen=templateA50();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA50Gen==null) list_templateA50Gen=new ArrayList();
        list_templateA50Gen.add(templateA50Gen);


        }
    }
    // $ANTLR end synpred56_GrammarShellForMancoosi

    // $ANTLR start synpred57_GrammarShellForMancoosi
    public final void synpred57_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_templateA51Gen=null;
        RuleReturnScope templateA51Gen = null;
        // GrammarShellForMancoosi.g:1092:5: (templateA51Gen+= templateA51 )
        // GrammarShellForMancoosi.g:1092:5: templateA51Gen+= templateA51
        {
        pushFollow(FOLLOW_templateA51_in_synpred57_GrammarShellForMancoosi800);
        templateA51Gen=templateA51();

        state._fsp--;
        if (state.failed) return ;
        if (list_templateA51Gen==null) list_templateA51Gen=new ArrayList();
        list_templateA51Gen.add(templateA51Gen);


        }
    }
    // $ANTLR end synpred57_GrammarShellForMancoosi

    // $ANTLR start synpred568_GrammarShellForMancoosi
    public final void synpred568_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token PATHDOCIDGen=null;

        // GrammarShellForMancoosi.g:12759:4: (PATHDOCIDGen= PATHDOCID )
        // GrammarShellForMancoosi.g:12759:4: PATHDOCIDGen= PATHDOCID
        {
        PATHDOCIDGen=(Token)match(input,PATHDOCID,FOLLOW_PATHDOCID_in_synpred568_GrammarShellForMancoosi13549); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred568_GrammarShellForMancoosi

    // $ANTLR start synpred569_GrammarShellForMancoosi
    public final void synpred569_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_pathGen=null;
        RuleReturnScope pathGen = null;
        // GrammarShellForMancoosi.g:12772:5: (pathGen+= path )
        // GrammarShellForMancoosi.g:12772:5: pathGen+= path
        {
        pushFollow(FOLLOW_path_in_synpred569_GrammarShellForMancoosi13561);
        pathGen=path();

        state._fsp--;
        if (state.failed) return ;
        if (list_pathGen==null) list_pathGen=new ArrayList();
        list_pathGen.add(pathGen);


        }
    }
    // $ANTLR end synpred569_GrammarShellForMancoosi

    // $ANTLR start synpred575_GrammarShellForMancoosi
    public final void synpred575_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        // GrammarShellForMancoosi.g:13157:5: (wordGen+= word )
        // GrammarShellForMancoosi.g:13157:5: wordGen+= word
        {
        pushFollow(FOLLOW_word_in_synpred575_GrammarShellForMancoosi13952);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);


        }
    }
    // $ANTLR end synpred575_GrammarShellForMancoosi

    // $ANTLR start synpred576_GrammarShellForMancoosi
    public final void synpred576_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_pathGen=null;
        RuleReturnScope pathGen = null;
        // GrammarShellForMancoosi.g:13175:5: (pathGen+= path )
        // GrammarShellForMancoosi.g:13175:5: pathGen+= path
        {
        pushFollow(FOLLOW_path_in_synpred576_GrammarShellForMancoosi13964);
        pathGen=path();

        state._fsp--;
        if (state.failed) return ;
        if (list_pathGen==null) list_pathGen=new ArrayList();
        list_pathGen.add(pathGen);


        }
    }
    // $ANTLR end synpred576_GrammarShellForMancoosi

    // $ANTLR start synpred577_GrammarShellForMancoosi
    public final void synpred577_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token COLONGen=null;

        // GrammarShellForMancoosi.g:13193:5: (COLONGen= COLON )
        // GrammarShellForMancoosi.g:13193:5: COLONGen= COLON
        {
        COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_synpred577_GrammarShellForMancoosi13976); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred577_GrammarShellForMancoosi

    // $ANTLR start synpred580_GrammarShellForMancoosi
    public final void synpred580_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_command_nameGen=null;
        RuleReturnScope command_nameGen = null;
        // GrammarShellForMancoosi.g:13247:5: (command_nameGen+= command_name )
        // GrammarShellForMancoosi.g:13247:5: command_nameGen+= command_name
        {
        pushFollow(FOLLOW_command_name_in_synpred580_GrammarShellForMancoosi14022);
        command_nameGen=command_name();

        state._fsp--;
        if (state.failed) return ;
        if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
        list_command_nameGen.add(command_nameGen);


        }
    }
    // $ANTLR end synpred580_GrammarShellForMancoosi

    // $ANTLR start synpred603_GrammarShellForMancoosi
    public final void synpred603_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        // GrammarShellForMancoosi.g:13663:95: (wordGen+= word )
        // GrammarShellForMancoosi.g:13663:95: wordGen+= word
        {
        pushFollow(FOLLOW_word_in_synpred603_GrammarShellForMancoosi14517);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);


        }
    }
    // $ANTLR end synpred603_GrammarShellForMancoosi

    // $ANTLR start synpred604_GrammarShellForMancoosi
    public final void synpred604_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token NUMBERGen=null;
        Token GREATGen=null;
        Token DLESSGen=null;
        Token LESSGen=null;
        Token DGREATGen=null;
        Token LESSANDGen=null;
        Token DLESSDASHGen=null;
        Token LESSGREATGen=null;
        Token GREATANDGen=null;
        Token ANDGREATGen=null;
        Token CLOBBERGen=null;
        List list_pathGen=null;
        List list_wordGen=null;
        List list_varGen=null;
        RuleReturnScope pathGen = null;
        RuleReturnScope wordGen = null;
        RuleReturnScope varGen = null;
        // GrammarShellForMancoosi.g:13662:4: ( (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var ) )
        // GrammarShellForMancoosi.g:13662:4: (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var )
        {
        // GrammarShellForMancoosi.g:13662:13: (NUMBERGen= NUMBER )?
        int alt659=2;
        int LA659_0 = input.LA(1);

        if ( (LA659_0==NUMBER) ) {
            alt659=1;
        }
        switch (alt659) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: NUMBERGen= NUMBER
                {
                NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred604_GrammarShellForMancoosi14429); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:13662:22: (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER )
        int alt660=10;
        alt660 = dfa660.predict(input);
        switch (alt660) {
            case 1 :
                // GrammarShellForMancoosi.g:13662:24: GREATGen= GREAT
                {
                GREATGen=(Token)match(input,GREAT,FOLLOW_GREAT_in_synpred604_GrammarShellForMancoosi14436); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:13662:42: DLESSGen= DLESS
                {
                DLESSGen=(Token)match(input,DLESS,FOLLOW_DLESS_in_synpred604_GrammarShellForMancoosi14443); if (state.failed) return ;

                }
                break;
            case 3 :
                // GrammarShellForMancoosi.g:13662:60: LESSGen= LESS
                {
                LESSGen=(Token)match(input,LESS,FOLLOW_LESS_in_synpred604_GrammarShellForMancoosi14450); if (state.failed) return ;

                }
                break;
            case 4 :
                // GrammarShellForMancoosi.g:13662:76: DGREATGen= DGREAT
                {
                DGREATGen=(Token)match(input,DGREAT,FOLLOW_DGREAT_in_synpred604_GrammarShellForMancoosi14457); if (state.failed) return ;

                }
                break;
            case 5 :
                // GrammarShellForMancoosi.g:13662:96: LESSANDGen= LESSAND
                {
                LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_synpred604_GrammarShellForMancoosi14464); if (state.failed) return ;

                }
                break;
            case 6 :
                // GrammarShellForMancoosi.g:13662:118: DLESSDASHGen= DLESSDASH
                {
                DLESSDASHGen=(Token)match(input,DLESSDASH,FOLLOW_DLESSDASH_in_synpred604_GrammarShellForMancoosi14471); if (state.failed) return ;

                }
                break;
            case 7 :
                // GrammarShellForMancoosi.g:13662:144: LESSGREATGen= LESSGREAT
                {
                LESSGREATGen=(Token)match(input,LESSGREAT,FOLLOW_LESSGREAT_in_synpred604_GrammarShellForMancoosi14478); if (state.failed) return ;

                }
                break;
            case 8 :
                // GrammarShellForMancoosi.g:13663:7: GREATANDGen= GREATAND
                {
                GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_synpred604_GrammarShellForMancoosi14488); if (state.failed) return ;

                }
                break;
            case 9 :
                // GrammarShellForMancoosi.g:13663:31: ANDGREATGen= ANDGREAT
                {
                ANDGREATGen=(Token)match(input,ANDGREAT,FOLLOW_ANDGREAT_in_synpred604_GrammarShellForMancoosi14495); if (state.failed) return ;

                }
                break;
            case 10 :
                // GrammarShellForMancoosi.g:13663:55: CLOBBERGen= CLOBBER
                {
                CLOBBERGen=(Token)match(input,CLOBBER,FOLLOW_CLOBBER_in_synpred604_GrammarShellForMancoosi14502); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:13663:75: (pathGen+= path | wordGen+= word | varGen+= var )
        int alt661=3;
        switch ( input.LA(1) ) {
        case VAR:
        case 101:
        case 105:
        case 123:
        case 127:
        case 138:
        case 140:
        case 141:
        case 180:
        case 184:
        case 186:
        case 187:
        case 188:
            {
            int LA661_1 = input.LA(2);

            if ( (synpred603_GrammarShellForMancoosi()) ) {
                alt661=2;
            }
            else if ( (true) ) {
                alt661=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 661, 1, input);

                throw nvae;
            }
            }
            break;
        case PATHNULL:
        case PATHEMACSINST:
        case PATHEMACSREM:
        case PATHGCONFSCH:
        case PATHOLDSCHEMA:
        case PATHCOMPYTH:
        case PATHMIME:
        case PATHSUID:
        case PATHSS:
        case PATHP:
        case PATHXWINDOW:
        case PATHXMANAGER:
        case PATHCONFMOD:
        case PATHDOCID:
        case PATHPACK:
        case PATHKVERS:
        case PATHSCRIPT:
        case PATHREL:
        case PATH:
            {
            alt661=1;
            }
            break;
        case UNDERSCORE:
        case VARINPUT:
        case VARQMARK:
        case VARDOLLAR:
        case VAREXCL:
        case VARSTAR:
        case VARAT:
        case VARHOME:
        case VARPATH:
        case VARPS:
        case ID:
        case 80:
        case 81:
        case 82:
        case 85:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 103:
        case 107:
        case 108:
        case 110:
        case 111:
        case 112:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 121:
        case 122:
        case 124:
        case 125:
        case 126:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 139:
        case 142:
        case 143:
        case 144:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 177:
        case 178:
        case 179:
        case 181:
        case 182:
        case 183:
        case 185:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 195:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
            {
            alt661=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 661, 0, input);

            throw nvae;
        }

        switch (alt661) {
            case 1 :
                // GrammarShellForMancoosi.g:13663:78: pathGen+= path
                {
                pushFollow(FOLLOW_path_in_synpred604_GrammarShellForMancoosi14510);
                pathGen=path();

                state._fsp--;
                if (state.failed) return ;
                if (list_pathGen==null) list_pathGen=new ArrayList();
                list_pathGen.add(pathGen);


                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:13663:95: wordGen+= word
                {
                pushFollow(FOLLOW_word_in_synpred604_GrammarShellForMancoosi14517);
                wordGen=word();

                state._fsp--;
                if (state.failed) return ;
                if (list_wordGen==null) list_wordGen=new ArrayList();
                list_wordGen.add(wordGen);


                }
                break;
            case 3 :
                // GrammarShellForMancoosi.g:13663:112: varGen+= var
                {
                pushFollow(FOLLOW_var_in_synpred604_GrammarShellForMancoosi14524);
                varGen=var();

                state._fsp--;
                if (state.failed) return ;
                if (list_varGen==null) list_varGen=new ArrayList();
                list_varGen.add(varGen);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred604_GrammarShellForMancoosi

    // $ANTLR start synpred606_GrammarShellForMancoosi
    public final void synpred606_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token LESSANDGen=null;
        Token NUMBERGen=null;
        Token MINUSGen=null;

        // GrammarShellForMancoosi.g:13756:5: (LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS ) )
        // GrammarShellForMancoosi.g:13756:5: LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS )
        {
        LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_synpred606_GrammarShellForMancoosi14537); if (state.failed) return ;
        // GrammarShellForMancoosi.g:13756:24: (NUMBERGen= NUMBER | MINUSGen= MINUS )
        int alt662=2;
        int LA662_0 = input.LA(1);

        if ( (LA662_0==NUMBER) ) {
            alt662=1;
        }
        else if ( (LA662_0==MINUS) ) {
            alt662=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 662, 0, input);

            throw nvae;
        }
        switch (alt662) {
            case 1 :
                // GrammarShellForMancoosi.g:13756:26: NUMBERGen= NUMBER
                {
                NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred606_GrammarShellForMancoosi14543); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:13756:46: MINUSGen= MINUS
                {
                MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_synpred606_GrammarShellForMancoosi14550); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred606_GrammarShellForMancoosi

    // $ANTLR start synpred608_GrammarShellForMancoosi
    public final void synpred608_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token NUMBERGen=null;
        Token LESSANDGen=null;
        Token NUMBERGen_1=null;
        Token MINUSGen=null;

        // GrammarShellForMancoosi.g:13779:5: (NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) )
        // GrammarShellForMancoosi.g:13779:5: NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
        {
        NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred608_GrammarShellForMancoosi14563); if (state.failed) return ;
        LESSANDGen=(Token)match(input,LESSAND,FOLLOW_LESSAND_in_synpred608_GrammarShellForMancoosi14568); if (state.failed) return ;
        // GrammarShellForMancoosi.g:13779:42: (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
        int alt663=2;
        int LA663_0 = input.LA(1);

        if ( (LA663_0==NUMBER) ) {
            alt663=1;
        }
        else if ( (LA663_0==MINUS) ) {
            alt663=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 663, 0, input);

            throw nvae;
        }
        switch (alt663) {
            case 1 :
                // GrammarShellForMancoosi.g:13779:44: NUMBERGen_1= NUMBER
                {
                NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred608_GrammarShellForMancoosi14574); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:13779:66: MINUSGen= MINUS
                {
                MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_synpred608_GrammarShellForMancoosi14581); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred608_GrammarShellForMancoosi

    // $ANTLR start synpred611_GrammarShellForMancoosi
    public final void synpred611_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token NUMBERGen=null;
        Token GREATANDGen=null;
        Token NUMBERGen_1=null;
        Token MINUSGen=null;

        // GrammarShellForMancoosi.g:13807:5: ( (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) )
        // GrammarShellForMancoosi.g:13807:5: (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
        {
        // GrammarShellForMancoosi.g:13807:14: (NUMBERGen= NUMBER )?
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==NUMBER) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: NUMBERGen= NUMBER
                {
                NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred611_GrammarShellForMancoosi14594); if (state.failed) return ;

                }
                break;

        }

        GREATANDGen=(Token)match(input,GREATAND,FOLLOW_GREATAND_in_synpred611_GrammarShellForMancoosi14600); if (state.failed) return ;
        // GrammarShellForMancoosi.g:13807:45: (NUMBERGen_1= NUMBER | MINUSGen= MINUS )
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( (LA665_0==NUMBER) ) {
            alt665=1;
        }
        else if ( (LA665_0==MINUS) ) {
            alt665=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 665, 0, input);

            throw nvae;
        }
        switch (alt665) {
            case 1 :
                // GrammarShellForMancoosi.g:13807:47: NUMBERGen_1= NUMBER
                {
                NUMBERGen_1=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred611_GrammarShellForMancoosi14606); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:13807:69: MINUSGen= MINUS
                {
                MINUSGen=(Token)match(input,MINUS,FOLLOW_MINUS_in_synpred611_GrammarShellForMancoosi14613); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred611_GrammarShellForMancoosi

    // $ANTLR start synpred624_GrammarShellForMancoosi
    public final void synpred624_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        // GrammarShellForMancoosi.g:14042:43: (paramGen+= param )
        // GrammarShellForMancoosi.g:14042:43: paramGen+= param
        {
        pushFollow(FOLLOW_param_in_synpred624_GrammarShellForMancoosi14861);
        paramGen=param();

        state._fsp--;
        if (state.failed) return ;
        if (list_paramGen==null) list_paramGen=new ArrayList();
        list_paramGen.add(paramGen);


        }
    }
    // $ANTLR end synpred624_GrammarShellForMancoosi

    // $ANTLR start synpred646_GrammarShellForMancoosi
    public final void synpred646_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token TK_0=null;

        // GrammarShellForMancoosi.g:14398:40: (TK_0= '\\n' )
        // GrammarShellForMancoosi.g:14398:40: TK_0= '\\n'
        {
        TK_0=(Token)match(input,78,FOLLOW_78_in_synpred646_GrammarShellForMancoosi15245); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred646_GrammarShellForMancoosi

    // $ANTLR start synpred647_GrammarShellForMancoosi
    public final void synpred647_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_statementGen=null;
        RuleReturnScope statementGen = null;
        // GrammarShellForMancoosi.g:14398:54: (statementGen+= statement )
        // GrammarShellForMancoosi.g:14398:54: statementGen+= statement
        {
        pushFollow(FOLLOW_statement_in_synpred647_GrammarShellForMancoosi15253);
        statementGen=statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_statementGen==null) list_statementGen=new ArrayList();
        list_statementGen.add(statementGen);


        }
    }
    // $ANTLR end synpred647_GrammarShellForMancoosi

    // $ANTLR start synpred648_GrammarShellForMancoosi
    public final void synpred648_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token TK_1=null;

        // GrammarShellForMancoosi.g:14398:82: (TK_1= '\\n' )
        // GrammarShellForMancoosi.g:14398:82: TK_1= '\\n'
        {
        TK_1=(Token)match(input,78,FOLLOW_78_in_synpred648_GrammarShellForMancoosi15261); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred648_GrammarShellForMancoosi

    // $ANTLR start synpred652_GrammarShellForMancoosi
    public final void synpred652_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token TK_0=null;

        // GrammarShellForMancoosi.g:14449:35: (TK_0= '\\n' )
        // GrammarShellForMancoosi.g:14449:35: TK_0= '\\n'
        {
        TK_0=(Token)match(input,78,FOLLOW_78_in_synpred652_GrammarShellForMancoosi15311); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred652_GrammarShellForMancoosi

    // $ANTLR start synpred673_GrammarShellForMancoosi
    public final void synpred673_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        List list_conditional_expr_listGen=null;
        List list_command_expr_listGen=null;
        RuleReturnScope conditional_expr_listGen = null;
        RuleReturnScope command_expr_listGen = null;
        // GrammarShellForMancoosi.g:14699:4: (conditional_expr_listGen+= conditional_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )* )
        // GrammarShellForMancoosi.g:14699:4: conditional_expr_listGen+= conditional_expr_list ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )*
        {
        pushFollow(FOLLOW_conditional_expr_list_in_synpred673_GrammarShellForMancoosi15568);
        conditional_expr_listGen=conditional_expr_list();

        state._fsp--;
        if (state.failed) return ;
        if (list_conditional_expr_listGen==null) list_conditional_expr_listGen=new ArrayList();
        list_conditional_expr_listGen.add(conditional_expr_listGen);

        // GrammarShellForMancoosi.g:14699:52: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list )*
        loop673:
        do {
            int alt673=2;
            int LA673_0 = input.LA(1);

            if ( (LA673_0==AND||LA673_0==OR) ) {
                alt673=1;
            }


            switch (alt673) {
        	case 1 :
        	    // GrammarShellForMancoosi.g:14699:53: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? command_expr_listGen+= command_expr_list
        	    {
        	    // GrammarShellForMancoosi.g:14699:53: (ANDGen= AND | ORGen= OR )
        	    int alt671=2;
        	    int LA671_0 = input.LA(1);

        	    if ( (LA671_0==AND) ) {
        	        alt671=1;
        	    }
        	    else if ( (LA671_0==OR) ) {
        	        alt671=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 671, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt671) {
        	        case 1 :
        	            // GrammarShellForMancoosi.g:14699:55: ANDGen= AND
        	            {
        	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_synpred673_GrammarShellForMancoosi15575); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // GrammarShellForMancoosi.g:14699:69: ORGen= OR
        	            {
        	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_synpred673_GrammarShellForMancoosi15582); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    // GrammarShellForMancoosi.g:14699:79: (TK_0= '\\n' )?
        	    int alt672=2;
        	    int LA672_0 = input.LA(1);

        	    if ( (LA672_0==78) ) {
        	        alt672=1;
        	    }
        	    switch (alt672) {
        	        case 1 :
        	            // GrammarShellForMancoosi.g:14699:81: TK_0= '\\n'
        	            {
        	            TK_0=(Token)match(input,78,FOLLOW_78_in_synpred673_GrammarShellForMancoosi15589); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_command_expr_list_in_synpred673_GrammarShellForMancoosi15596);
        	    command_expr_listGen=command_expr_list();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    if (list_command_expr_listGen==null) list_command_expr_listGen=new ArrayList();
        	    list_command_expr_listGen.add(command_expr_listGen);


        	    }
        	    break;

        	default :
        	    break loop673;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred673_GrammarShellForMancoosi

    // $ANTLR start synpred679_GrammarShellForMancoosi
    public final void synpred679_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        List list_conditional_expressionGen_1=null;
        RuleReturnScope conditional_expressionGen_1 = null;
        // GrammarShellForMancoosi.g:14798:55: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression )
        // GrammarShellForMancoosi.g:14798:55: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? conditional_expressionGen_1+= conditional_expression
        {
        // GrammarShellForMancoosi.g:14798:55: (ANDGen= AND | ORGen= OR )
        int alt676=2;
        int LA676_0 = input.LA(1);

        if ( (LA676_0==AND) ) {
            alt676=1;
        }
        else if ( (LA676_0==OR) ) {
            alt676=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 676, 0, input);

            throw nvae;
        }
        switch (alt676) {
            case 1 :
                // GrammarShellForMancoosi.g:14798:57: ANDGen= AND
                {
                ANDGen=(Token)match(input,AND,FOLLOW_AND_in_synpred679_GrammarShellForMancoosi15669); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:14798:71: ORGen= OR
                {
                ORGen=(Token)match(input,OR,FOLLOW_OR_in_synpred679_GrammarShellForMancoosi15676); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:14798:81: (TK_0= '\\n' )?
        int alt677=2;
        int LA677_0 = input.LA(1);

        if ( (LA677_0==78) ) {
            alt677=1;
        }
        switch (alt677) {
            case 1 :
                // GrammarShellForMancoosi.g:14798:83: TK_0= '\\n'
                {
                TK_0=(Token)match(input,78,FOLLOW_78_in_synpred679_GrammarShellForMancoosi15683); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_conditional_expression_in_synpred679_GrammarShellForMancoosi15690);
        conditional_expressionGen_1=conditional_expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_conditional_expressionGen_1==null) list_conditional_expressionGen_1=new ArrayList();
        list_conditional_expressionGen_1.add(conditional_expressionGen_1);


        }
    }
    // $ANTLR end synpred679_GrammarShellForMancoosi

    // $ANTLR start synpred688_GrammarShellForMancoosi
    public final void synpred688_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token ANDGen=null;
        Token ORGen=null;
        Token TK_0=null;
        Token LSBRACKGen_1=null;
        Token EXCLGen_1=null;
        Token RSBRACKGen_1=null;
        List list_pipelineGen_1=null;
        RuleReturnScope pipelineGen_1 = null;
        // GrammarShellForMancoosi.g:14849:84: ( (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )? )
        // GrammarShellForMancoosi.g:14849:84: (ANDGen= AND | ORGen= OR ) (TK_0= '\\n' )? (LSBRACKGen_1= LSBRACK )? (EXCLGen_1= EXCL )? pipelineGen_1+= pipeline (RSBRACKGen_1= RSBRACK )?
        {
        // GrammarShellForMancoosi.g:14849:84: (ANDGen= AND | ORGen= OR )
        int alt678=2;
        int LA678_0 = input.LA(1);

        if ( (LA678_0==AND) ) {
            alt678=1;
        }
        else if ( (LA678_0==OR) ) {
            alt678=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 678, 0, input);

            throw nvae;
        }
        switch (alt678) {
            case 1 :
                // GrammarShellForMancoosi.g:14849:86: ANDGen= AND
                {
                ANDGen=(Token)match(input,AND,FOLLOW_AND_in_synpred688_GrammarShellForMancoosi15740); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:14849:100: ORGen= OR
                {
                ORGen=(Token)match(input,OR,FOLLOW_OR_in_synpred688_GrammarShellForMancoosi15747); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:14849:110: (TK_0= '\\n' )?
        int alt679=2;
        int LA679_0 = input.LA(1);

        if ( (LA679_0==78) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                // GrammarShellForMancoosi.g:14849:112: TK_0= '\\n'
                {
                TK_0=(Token)match(input,78,FOLLOW_78_in_synpred688_GrammarShellForMancoosi15754); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:14849:137: (LSBRACKGen_1= LSBRACK )?
        int alt680=2;
        int LA680_0 = input.LA(1);

        if ( (LA680_0==LSBRACK) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: LSBRACKGen_1= LSBRACK
                {
                LSBRACKGen_1=(Token)match(input,LSBRACK,FOLLOW_LSBRACK_in_synpred688_GrammarShellForMancoosi15761); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:14849:157: (EXCLGen_1= EXCL )?
        int alt681=2;
        int LA681_0 = input.LA(1);

        if ( (LA681_0==EXCL) ) {
            alt681=1;
        }
        switch (alt681) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: EXCLGen_1= EXCL
                {
                EXCLGen_1=(Token)match(input,EXCL,FOLLOW_EXCL_in_synpred688_GrammarShellForMancoosi15767); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_pipeline_in_synpred688_GrammarShellForMancoosi15773);
        pipelineGen_1=pipeline();

        state._fsp--;
        if (state.failed) return ;
        if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
        list_pipelineGen_1.add(pipelineGen_1);

        // GrammarShellForMancoosi.g:14849:202: (RSBRACKGen_1= RSBRACK )?
        int alt682=2;
        int LA682_0 = input.LA(1);

        if ( (LA682_0==RSBRACK) ) {
            alt682=1;
        }
        switch (alt682) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: RSBRACKGen_1= RSBRACK
                {
                RSBRACKGen_1=(Token)match(input,RSBRACK,FOLLOW_RSBRACK_in_synpred688_GrammarShellForMancoosi15778); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred688_GrammarShellForMancoosi

    // $ANTLR start synpred699_GrammarShellForMancoosi
    public final void synpred699_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_boolean_expressionGen=null;
        RuleReturnScope boolean_expressionGen = null;
        // GrammarShellForMancoosi.g:15077:41: (boolean_expressionGen+= boolean_expression )
        // GrammarShellForMancoosi.g:15077:41: boolean_expressionGen+= boolean_expression
        {
        pushFollow(FOLLOW_boolean_expression_in_synpred699_GrammarShellForMancoosi15960);
        boolean_expressionGen=boolean_expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_boolean_expressionGen==null) list_boolean_expressionGen=new ArrayList();
        list_boolean_expressionGen.add(boolean_expressionGen);


        }
    }
    // $ANTLR end synpred699_GrammarShellForMancoosi

    // $ANTLR start synpred705_GrammarShellForMancoosi
    public final void synpred705_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token DQUOTEGen=null;
        Token DQUOTEGen_1=null;
        Token EQUGen=null;
        Token NOTEQUGen=null;
        Token DQUOTEGen_2=null;
        Token DQUOTEGen_3=null;
        List list_wordGen=null;
        List list_paramGen=null;
        RuleReturnScope wordGen = null;
        RuleReturnScope paramGen = null;
        // GrammarShellForMancoosi.g:15123:4: ( (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? (EQUGen= EQU | NOTEQUGen= NOTEQU ) (DQUOTEGen_2= DQUOTE )? paramGen+= param (DQUOTEGen_3= DQUOTE )? )
        // GrammarShellForMancoosi.g:15123:4: (DQUOTEGen= DQUOTE )? wordGen+= word (DQUOTEGen_1= DQUOTE )? (EQUGen= EQU | NOTEQUGen= NOTEQU ) (DQUOTEGen_2= DQUOTE )? paramGen+= param (DQUOTEGen_3= DQUOTE )?
        {
        // GrammarShellForMancoosi.g:15123:13: (DQUOTEGen= DQUOTE )?
        int alt683=2;
        int LA683_0 = input.LA(1);

        if ( (LA683_0==DQUOTE) ) {
            alt683=1;
        }
        switch (alt683) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: DQUOTEGen= DQUOTE
                {
                DQUOTEGen=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi15996); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_word_in_synpred705_GrammarShellForMancoosi16002);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);

        // GrammarShellForMancoosi.g:15123:49: (DQUOTEGen_1= DQUOTE )?
        int alt684=2;
        int LA684_0 = input.LA(1);

        if ( (LA684_0==DQUOTE) ) {
            alt684=1;
        }
        switch (alt684) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: DQUOTEGen_1= DQUOTE
                {
                DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16007); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:15123:58: (EQUGen= EQU | NOTEQUGen= NOTEQU )
        int alt685=2;
        int LA685_0 = input.LA(1);

        if ( (LA685_0==EQU) ) {
            alt685=1;
        }
        else if ( (LA685_0==NOTEQU) ) {
            alt685=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 685, 0, input);

            throw nvae;
        }
        switch (alt685) {
            case 1 :
                // GrammarShellForMancoosi.g:15123:60: EQUGen= EQU
                {
                EQUGen=(Token)match(input,EQU,FOLLOW_EQU_in_synpred705_GrammarShellForMancoosi16014); if (state.failed) return ;

                }
                break;
            case 2 :
                // GrammarShellForMancoosi.g:15123:74: NOTEQUGen= NOTEQU
                {
                NOTEQUGen=(Token)match(input,NOTEQU,FOLLOW_NOTEQU_in_synpred705_GrammarShellForMancoosi16021); if (state.failed) return ;

                }
                break;

        }

        // GrammarShellForMancoosi.g:15123:104: (DQUOTEGen_2= DQUOTE )?
        int alt686=2;
        int LA686_0 = input.LA(1);

        if ( (LA686_0==DQUOTE) ) {
            alt686=1;
        }
        switch (alt686) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: DQUOTEGen_2= DQUOTE
                {
                DQUOTEGen_2=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16027); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_param_in_synpred705_GrammarShellForMancoosi16033);
        paramGen=param();

        state._fsp--;
        if (state.failed) return ;
        if (list_paramGen==null) list_paramGen=new ArrayList();
        list_paramGen.add(paramGen);

        // GrammarShellForMancoosi.g:15123:142: (DQUOTEGen_3= DQUOTE )?
        int alt687=2;
        int LA687_0 = input.LA(1);

        if ( (LA687_0==DQUOTE) ) {
            alt687=1;
        }
        switch (alt687) {
            case 1 :
                // GrammarShellForMancoosi.g:0:0: DQUOTEGen_3= DQUOTE
                {
                DQUOTEGen_3=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16038); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred705_GrammarShellForMancoosi

    // $ANTLR start synpred709_GrammarShellForMancoosi
    public final void synpred709_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token DQUOTEGen_1=null;

        // GrammarShellForMancoosi.g:15212:71: (DQUOTEGen_1= DQUOTE )
        // GrammarShellForMancoosi.g:15212:71: DQUOTEGen_1= DQUOTE
        {
        DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred709_GrammarShellForMancoosi16102); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred709_GrammarShellForMancoosi

    // $ANTLR start synpred711_GrammarShellForMancoosi
    public final void synpred711_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_assignment_statementGen=null;
        RuleReturnScope assignment_statementGen = null;
        // GrammarShellForMancoosi.g:15258:4: (assignment_statementGen+= assignment_statement )
        // GrammarShellForMancoosi.g:15258:4: assignment_statementGen+= assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred711_GrammarShellForMancoosi16128);
        assignment_statementGen=assignment_statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_assignment_statementGen==null) list_assignment_statementGen=new ArrayList();
        list_assignment_statementGen.add(assignment_statementGen);


        }
    }
    // $ANTLR end synpred711_GrammarShellForMancoosi

    // $ANTLR start synpred714_GrammarShellForMancoosi
    public final void synpred714_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token PSINGLEGen=null;

        // GrammarShellForMancoosi.g:15307:33: (PSINGLEGen= PSINGLE )
        // GrammarShellForMancoosi.g:15307:33: PSINGLEGen= PSINGLE
        {
        PSINGLEGen=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_synpred714_GrammarShellForMancoosi16176); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred714_GrammarShellForMancoosi

    // $ANTLR start synpred715_GrammarShellForMancoosi
    public final void synpred715_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_paramGen=null;
        RuleReturnScope paramGen = null;
        // GrammarShellForMancoosi.g:15307:45: (paramGen+= param )
        // GrammarShellForMancoosi.g:15307:45: paramGen+= param
        {
        pushFollow(FOLLOW_param_in_synpred715_GrammarShellForMancoosi16183);
        paramGen=param();

        state._fsp--;
        if (state.failed) return ;
        if (list_paramGen==null) list_paramGen=new ArrayList();
        list_paramGen.add(paramGen);


        }
    }
    // $ANTLR end synpred715_GrammarShellForMancoosi

    // $ANTLR start synpred716_GrammarShellForMancoosi
    public final void synpred716_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token PSINGLEGen_1=null;

        // GrammarShellForMancoosi.g:15307:76: (PSINGLEGen_1= PSINGLE )
        // GrammarShellForMancoosi.g:15307:76: PSINGLEGen_1= PSINGLE
        {
        PSINGLEGen_1=(Token)match(input,PSINGLE,FOLLOW_PSINGLE_in_synpred716_GrammarShellForMancoosi16190); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred716_GrammarShellForMancoosi

    // $ANTLR start synpred717_GrammarShellForMancoosi
    public final void synpred717_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token DQUOTEGen_1=null;

        // GrammarShellForMancoosi.g:15307:98: (DQUOTEGen_1= DQUOTE )
        // GrammarShellForMancoosi.g:15307:98: DQUOTEGen_1= DQUOTE
        {
        DQUOTEGen_1=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred717_GrammarShellForMancoosi16196); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred717_GrammarShellForMancoosi

    // $ANTLR start synpred719_GrammarShellForMancoosi
    public final void synpred719_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        // GrammarShellForMancoosi.g:15366:5: (wordGen+= word )
        // GrammarShellForMancoosi.g:15366:5: wordGen+= word
        {
        pushFollow(FOLLOW_word_in_synpred719_GrammarShellForMancoosi16233);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);


        }
    }
    // $ANTLR end synpred719_GrammarShellForMancoosi

    // $ANTLR start synpred720_GrammarShellForMancoosi
    public final void synpred720_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_pathGen=null;
        RuleReturnScope pathGen = null;
        // GrammarShellForMancoosi.g:15384:5: (pathGen+= path )
        // GrammarShellForMancoosi.g:15384:5: pathGen+= path
        {
        pushFollow(FOLLOW_path_in_synpred720_GrammarShellForMancoosi16245);
        pathGen=path();

        state._fsp--;
        if (state.failed) return ;
        if (list_pathGen==null) list_pathGen=new ArrayList();
        list_pathGen.add(pathGen);


        }
    }
    // $ANTLR end synpred720_GrammarShellForMancoosi

    // $ANTLR start synpred721_GrammarShellForMancoosi
    public final void synpred721_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_redirectionGen=null;
        RuleReturnScope redirectionGen = null;
        // GrammarShellForMancoosi.g:15402:5: (redirectionGen+= redirection )
        // GrammarShellForMancoosi.g:15402:5: redirectionGen+= redirection
        {
        pushFollow(FOLLOW_redirection_in_synpred721_GrammarShellForMancoosi16257);
        redirectionGen=redirection();

        state._fsp--;
        if (state.failed) return ;
        if (list_redirectionGen==null) list_redirectionGen=new ArrayList();
        list_redirectionGen.add(redirectionGen);


        }
    }
    // $ANTLR end synpred721_GrammarShellForMancoosi

    // $ANTLR start synpred722_GrammarShellForMancoosi
    public final void synpred722_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token NUMBERGen=null;

        // GrammarShellForMancoosi.g:15420:5: (NUMBERGen= NUMBER )
        // GrammarShellForMancoosi.g:15420:5: NUMBERGen= NUMBER
        {
        NUMBERGen=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_synpred722_GrammarShellForMancoosi16269); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred722_GrammarShellForMancoosi

    // $ANTLR start synpred723_GrammarShellForMancoosi
    public final void synpred723_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token COLONGen=null;

        // GrammarShellForMancoosi.g:15433:5: (COLONGen= COLON )
        // GrammarShellForMancoosi.g:15433:5: COLONGen= COLON
        {
        COLONGen=(Token)match(input,COLON,FOLLOW_COLON_in_synpred723_GrammarShellForMancoosi16281); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred723_GrammarShellForMancoosi

    // $ANTLR start synpred724_GrammarShellForMancoosi
    public final void synpred724_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token APGen=null;
        Token APGen_1=null;
        List list_nestedCommandGen=null;
        RuleReturnScope nestedCommandGen = null;
        // GrammarShellForMancoosi.g:15446:5: (APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP )
        // GrammarShellForMancoosi.g:15446:5: APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP
        {
        APGen=(Token)match(input,AP,FOLLOW_AP_in_synpred724_GrammarShellForMancoosi16293); if (state.failed) return ;
        pushFollow(FOLLOW_nestedCommand_in_synpred724_GrammarShellForMancoosi16298);
        nestedCommandGen=nestedCommand();

        state._fsp--;
        if (state.failed) return ;
        if (list_nestedCommandGen==null) list_nestedCommandGen=new ArrayList();
        list_nestedCommandGen.add(nestedCommandGen);

        APGen_1=(Token)match(input,AP,FOLLOW_AP_in_synpred724_GrammarShellForMancoosi16303); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred724_GrammarShellForMancoosi

    // $ANTLR start synpred725_GrammarShellForMancoosi
    public final void synpred725_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_command_nameGen=null;
        RuleReturnScope command_nameGen = null;
        // GrammarShellForMancoosi.g:15474:5: (command_nameGen+= command_name )
        // GrammarShellForMancoosi.g:15474:5: command_nameGen+= command_name
        {
        pushFollow(FOLLOW_command_name_in_synpred725_GrammarShellForMancoosi16315);
        command_nameGen=command_name();

        state._fsp--;
        if (state.failed) return ;
        if (list_command_nameGen==null) list_command_nameGen=new ArrayList();
        list_command_nameGen.add(command_nameGen);


        }
    }
    // $ANTLR end synpred725_GrammarShellForMancoosi

    // $ANTLR start synpred730_GrammarShellForMancoosi
    public final void synpred730_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token TK_0=null;

        // GrammarShellForMancoosi.g:15544:5: (TK_0= '*' )
        // GrammarShellForMancoosi.g:15544:5: TK_0= '*'
        {
        TK_0=(Token)match(input,166,FOLLOW_166_in_synpred730_GrammarShellForMancoosi16375); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred730_GrammarShellForMancoosi

    // $ANTLR start synpred731_GrammarShellForMancoosi
    public final void synpred731_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        // GrammarShellForMancoosi.g:15573:27: (wordGen+= word )
        // GrammarShellForMancoosi.g:15573:27: wordGen+= word
        {
        pushFollow(FOLLOW_word_in_synpred731_GrammarShellForMancoosi16414);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);


        }
    }
    // $ANTLR end synpred731_GrammarShellForMancoosi

    // $ANTLR start synpred733_GrammarShellForMancoosi
    public final void synpred733_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_wordGen=null;
        RuleReturnScope wordGen = null;
        // GrammarShellForMancoosi.g:15596:30: (wordGen+= word )
        // GrammarShellForMancoosi.g:15596:30: wordGen+= word
        {
        pushFollow(FOLLOW_word_in_synpred733_GrammarShellForMancoosi16432);
        wordGen=word();

        state._fsp--;
        if (state.failed) return ;
        if (list_wordGen==null) list_wordGen=new ArrayList();
        list_wordGen.add(wordGen);


        }
    }
    // $ANTLR end synpred733_GrammarShellForMancoosi

    // $ANTLR start synpred738_GrammarShellForMancoosi
    public final void synpred738_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_external_variableGen=null;
        RuleReturnScope external_variableGen = null;
        // GrammarShellForMancoosi.g:15694:5: (external_variableGen+= external_variable )
        // GrammarShellForMancoosi.g:15694:5: external_variableGen+= external_variable
        {
        pushFollow(FOLLOW_external_variable_in_synpred738_GrammarShellForMancoosi16503);
        external_variableGen=external_variable();

        state._fsp--;
        if (state.failed) return ;
        if (list_external_variableGen==null) list_external_variableGen=new ArrayList();
        list_external_variableGen.add(external_variableGen);


        }
    }
    // $ANTLR end synpred738_GrammarShellForMancoosi

    // $ANTLR start synpred739_GrammarShellForMancoosi
    public final void synpred739_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        List list_substitution_variableGen=null;
        RuleReturnScope substitution_variableGen = null;
        // GrammarShellForMancoosi.g:15712:5: (substitution_variableGen+= substitution_variable )
        // GrammarShellForMancoosi.g:15712:5: substitution_variableGen+= substitution_variable
        {
        pushFollow(FOLLOW_substitution_variable_in_synpred739_GrammarShellForMancoosi16515);
        substitution_variableGen=substitution_variable();

        state._fsp--;
        if (state.failed) return ;
        if (list_substitution_variableGen==null) list_substitution_variableGen=new ArrayList();
        list_substitution_variableGen.add(substitution_variableGen);


        }
    }
    // $ANTLR end synpred739_GrammarShellForMancoosi

    // $ANTLR start synpred745_GrammarShellForMancoosi
    public final void synpred745_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token ANDGen=null;
        Token ORGen=null;
        List list_pipelineGen=null;
        List list_pipelineGen_1=null;
        RuleReturnScope pipelineGen = null;
        RuleReturnScope pipelineGen_1 = null;
        // GrammarShellForMancoosi.g:15803:4: (pipelineGen+= pipeline ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )* )
        // GrammarShellForMancoosi.g:15803:4: pipelineGen+= pipeline ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )*
        {
        pushFollow(FOLLOW_pipeline_in_synpred745_GrammarShellForMancoosi16601);
        pipelineGen=pipeline();

        state._fsp--;
        if (state.failed) return ;
        if (list_pipelineGen==null) list_pipelineGen=new ArrayList();
        list_pipelineGen.add(pipelineGen);

        // GrammarShellForMancoosi.g:15803:26: ( (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline )*
        loop694:
        do {
            int alt694=2;
            int LA694_0 = input.LA(1);

            if ( (LA694_0==AND||LA694_0==OR) ) {
                alt694=1;
            }


            switch (alt694) {
        	case 1 :
        	    // GrammarShellForMancoosi.g:15803:27: (ANDGen= AND | ORGen= OR ) pipelineGen_1+= pipeline
        	    {
        	    // GrammarShellForMancoosi.g:15803:27: (ANDGen= AND | ORGen= OR )
        	    int alt693=2;
        	    int LA693_0 = input.LA(1);

        	    if ( (LA693_0==AND) ) {
        	        alt693=1;
        	    }
        	    else if ( (LA693_0==OR) ) {
        	        alt693=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 693, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt693) {
        	        case 1 :
        	            // GrammarShellForMancoosi.g:15803:29: ANDGen= AND
        	            {
        	            ANDGen=(Token)match(input,AND,FOLLOW_AND_in_synpred745_GrammarShellForMancoosi16608); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // GrammarShellForMancoosi.g:15803:43: ORGen= OR
        	            {
        	            ORGen=(Token)match(input,OR,FOLLOW_OR_in_synpred745_GrammarShellForMancoosi16615); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_pipeline_in_synpred745_GrammarShellForMancoosi16621);
        	    pipelineGen_1=pipeline();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
        	    list_pipelineGen_1.add(pipelineGen_1);


        	    }
        	    break;

        	default :
        	    break loop694;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred745_GrammarShellForMancoosi

    // $ANTLR start synpred746_GrammarShellForMancoosi
    public final void synpred746_GrammarShellForMancoosi_fragment() throws RecognitionException {   
        Token AMPERSANDGen_List=null;
        List list_AMPERSANDGen_List=null;
        List list_pipelineGen_1=null;
        RuleReturnScope pipelineGen_1 = null;
        // GrammarShellForMancoosi.g:15867:28: (AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline )
        // GrammarShellForMancoosi.g:15867:28: AMPERSANDGen_List+= AMPERSAND pipelineGen_1+= pipeline
        {
        AMPERSANDGen_List=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_synpred746_GrammarShellForMancoosi16663); if (state.failed) return ;
        if (list_AMPERSANDGen_List==null) list_AMPERSANDGen_List=new ArrayList();
        list_AMPERSANDGen_List.add(AMPERSANDGen_List);

        pushFollow(FOLLOW_pipeline_in_synpred746_GrammarShellForMancoosi16668);
        pipelineGen_1=pipeline();

        state._fsp--;
        if (state.failed) return ;
        if (list_pipelineGen_1==null) list_pipelineGen_1=new ArrayList();
        list_pipelineGen_1.add(pipelineGen_1);


        }
    }
    // $ANTLR end synpred746_GrammarShellForMancoosi

    // Delegated rules

    public final boolean synpred57_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred568_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred568_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred699_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred699_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred722_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred722_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred730_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred730_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred646_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred646_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred604_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred604_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred738_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred738_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred608_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred608_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred606_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred606_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred719_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred719_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred679_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred679_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred723_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred723_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred716_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred716_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred720_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred720_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred647_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred647_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred739_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred739_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred725_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred725_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred580_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred580_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred717_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred717_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred709_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred709_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred652_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred652_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred705_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred705_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred714_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred714_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred688_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred688_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred624_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred624_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred724_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred724_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred673_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred673_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred603_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred603_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred611_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred611_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred746_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred746_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred745_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred745_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred648_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred648_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred575_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred575_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred576_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred576_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred721_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred721_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred569_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred569_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred715_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred715_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred731_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred731_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred733_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred733_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred577_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred577_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred711_GrammarShellForMancoosi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred711_GrammarShellForMancoosi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA519 dfa519 = new DFA519(this);
    protected DFA534 dfa534 = new DFA534(this);
    protected DFA528 dfa528 = new DFA528(this);
    protected DFA632 dfa632 = new DFA632(this);
    protected DFA645 dfa645 = new DFA645(this);
    protected DFA646 dfa646 = new DFA646(this);
    protected DFA650 dfa650 = new DFA650(this);
    protected DFA660 dfa660 = new DFA660(this);
    static final String DFA3_eotS =
        "\14\uffff";
    static final String DFA3_eofS =
        "\14\uffff";
    static final String DFA3_minS =
        "\1\14\1\uffff\1\0\5\uffff\1\0\1\uffff\2\0";
    static final String DFA3_maxS =
        "\1\u00cf\1\uffff\1\0\5\uffff\1\0\1\uffff\2\0";
    static final String DFA3_acceptS =
        "\1\uffff\1\5\1\uffff\1\1\1\3\1\6\1\2\1\3\1\uffff\1\4\2\uffff";
    static final String DFA3_specialS =
        "\2\uffff\1\0\5\uffff\1\1\1\uffff\1\2\1\3}>";
    static final String[] DFA3_transitionS = {
            "\1\6\4\uffff\2\6\1\uffff\3\6\1\uffff\1\6\5\uffff\1\5\1\uffff"+
            "\6\6\1\10\2\uffff\7\6\12\uffff\14\6\1\12\10\uffff\1\2\3\12\2"+
            "\uffff\1\12\1\uffff\7\12\1\uffff\6\12\1\6\1\11\1\12\1\uffff"+
            "\1\6\1\uffff\2\12\1\uffff\3\12\1\uffff\6\12\1\uffff\2\12\1\6"+
            "\2\12\1\13\1\6\11\12\1\13\1\6\1\12\2\6\1\13\2\12\1\uffff\1\6"+
            "\15\12\1\uffff\17\12\1\11\3\12\1\6\3\12\1\6\1\12\3\6\1\uffff"+
            "\6\12\1\1\1\11\1\7\1\uffff\1\6\7\12",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "98:1: statement returns [Node returnNode] : (templateGen+= template | command_statementGen+= command_statement | control_statementGen+= control_statement | loop_statementGen+= loop_statement | function_statementGen+= function_statement | redirection_statementGen+= redirection_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (synpred5_GrammarShellForMancoosi()) ) {s = 4;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_GrammarShellForMancoosi()) ) {s = 6;}

                        else if ( (synpred7_GrammarShellForMancoosi()) ) {s = 1;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (synpred4_GrammarShellForMancoosi()) ) {s = 6;}

                        else if ( (synpred7_GrammarShellForMancoosi()) ) {s = 1;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\66\uffff";
    static final String DFA4_eofS =
        "\66\uffff";
    static final String DFA4_minS =
        "\1\46\1\uffff\1\0\56\uffff\1\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u008e\1\uffff\1\0\56\uffff\1\0\4\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\36\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\31"+
        "\1\32\1\33\1\34\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\56\1\57\1\60\1\61\1\62\1\63\1\uffff\1\27"+
        "\1\30\1\35\1\55";
    static final String DFA4_specialS =
        "\2\uffff\1\0\56\uffff\1\1\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\65\50\uffff\1\2\56\uffff\1\61\12\uffff\1\64\4\uffff\1\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "209:1: template returns [Node returnNode] : (templateA1Gen+= templateA1 | templateA2Gen+= templateA2 | templateA3Gen+= templateA3 | templateA4Gen+= templateA4 | templateA5Gen+= templateA5 | templateA6Gen+= templateA6 | templateA7Gen+= templateA7 | templateA8Gen+= templateA8 | templateA9Gen+= templateA9 | templateA10Gen+= templateA10 | templateA11Gen+= templateA11 | templateA12_13Gen+= templateA12_13 | templateA14Gen+= templateA14 | templateA15Gen+= templateA15 | templateA16Gen+= templateA16 | templateA17Gen+= templateA17 | templateA18Gen+= templateA18 | templateA19Gen+= templateA19 | templateA20Gen+= templateA20 | templateA21Gen+= templateA21 | templateA22Gen+= templateA22 | templateA23Gen+= templateA23 | templateA24Gen+= templateA24 | templateA25Gen+= templateA25 | templateA26Gen+= templateA26 | templateA27Gen+= templateA27 | templateA28Gen+= templateA28 | templateA29Gen+= templateA29 | templateA30Gen+= templateA30 | templateA31Gen+= templateA31 | templateA32Gen+= templateA32 | templateA33Gen+= templateA33 | templateA34Gen+= templateA34 | templateA35Gen+= templateA35 | templateA36Gen+= templateA36 | templateA37Gen+= templateA37 | templateA38Gen+= templateA38 | templateA39Gen+= templateA39 | templateA40Gen+= templateA40 | templateA41Gen+= templateA41 | templateA42Gen+= templateA42 | templateA43Gen+= templateA43 | templateA44Gen+= templateA44 | templateA45Gen+= templateA45 | templateA46Gen+= templateA46 | templateA47Gen+= templateA47 | templateA48Gen+= templateA48 | templateA49Gen+= templateA49 | templateA50Gen+= templateA50 | templateA51Gen+= templateA51 | templateA52Gen+= templateA52 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (synpred9_GrammarShellForMancoosi()) ) {s = 4;}

                        else if ( (synpred10_GrammarShellForMancoosi()) ) {s = 5;}

                        else if ( (synpred11_GrammarShellForMancoosi()) ) {s = 6;}

                        else if ( (synpred12_GrammarShellForMancoosi()) ) {s = 7;}

                        else if ( (synpred13_GrammarShellForMancoosi()) ) {s = 8;}

                        else if ( (synpred14_GrammarShellForMancoosi()) ) {s = 9;}

                        else if ( (synpred15_GrammarShellForMancoosi()) ) {s = 10;}

                        else if ( (synpred16_GrammarShellForMancoosi()) ) {s = 11;}

                        else if ( (synpred17_GrammarShellForMancoosi()) ) {s = 12;}

                        else if ( (synpred18_GrammarShellForMancoosi()) ) {s = 13;}

                        else if ( (synpred19_GrammarShellForMancoosi()) ) {s = 14;}

                        else if ( (synpred20_GrammarShellForMancoosi()) ) {s = 15;}

                        else if ( (synpred21_GrammarShellForMancoosi()) ) {s = 16;}

                        else if ( (synpred22_GrammarShellForMancoosi()) ) {s = 17;}

                        else if ( (synpred23_GrammarShellForMancoosi()) ) {s = 18;}

                        else if ( (synpred24_GrammarShellForMancoosi()) ) {s = 19;}

                        else if ( (synpred25_GrammarShellForMancoosi()) ) {s = 20;}

                        else if ( (synpred26_GrammarShellForMancoosi()) ) {s = 21;}

                        else if ( (synpred27_GrammarShellForMancoosi()) ) {s = 22;}

                        else if ( (synpred28_GrammarShellForMancoosi()) ) {s = 23;}

                        else if ( (synpred29_GrammarShellForMancoosi()) ) {s = 24;}

                        else if ( (synpred32_GrammarShellForMancoosi()) ) {s = 25;}

                        else if ( (synpred33_GrammarShellForMancoosi()) ) {s = 26;}

                        else if ( (synpred34_GrammarShellForMancoosi()) ) {s = 27;}

                        else if ( (synpred35_GrammarShellForMancoosi()) ) {s = 28;}

                        else if ( (synpred38_GrammarShellForMancoosi()) ) {s = 29;}

                        else if ( (synpred39_GrammarShellForMancoosi()) ) {s = 30;}

                        else if ( (synpred40_GrammarShellForMancoosi()) ) {s = 31;}

                        else if ( (synpred41_GrammarShellForMancoosi()) ) {s = 32;}

                        else if ( (synpred42_GrammarShellForMancoosi()) ) {s = 33;}

                        else if ( (synpred43_GrammarShellForMancoosi()) ) {s = 34;}

                        else if ( (synpred44_GrammarShellForMancoosi()) ) {s = 35;}

                        else if ( (synpred45_GrammarShellForMancoosi()) ) {s = 36;}

                        else if ( (synpred46_GrammarShellForMancoosi()) ) {s = 37;}

                        else if ( (synpred47_GrammarShellForMancoosi()) ) {s = 38;}

                        else if ( (synpred48_GrammarShellForMancoosi()) ) {s = 39;}

                        else if ( (synpred49_GrammarShellForMancoosi()) ) {s = 40;}

                        else if ( (synpred50_GrammarShellForMancoosi()) ) {s = 41;}

                        else if ( (synpred51_GrammarShellForMancoosi()) ) {s = 42;}

                        else if ( (synpred53_GrammarShellForMancoosi()) ) {s = 43;}

                        else if ( (synpred54_GrammarShellForMancoosi()) ) {s = 44;}

                        else if ( (synpred55_GrammarShellForMancoosi()) ) {s = 45;}

                        else if ( (synpred56_GrammarShellForMancoosi()) ) {s = 46;}

                        else if ( (synpred57_GrammarShellForMancoosi()) ) {s = 47;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_GrammarShellForMancoosi()) ) {s = 50;}

                        else if ( (synpred31_GrammarShellForMancoosi()) ) {s = 51;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA519_eotS =
        "\21\uffff";
    static final String DFA519_eofS =
        "\21\uffff";
    static final String DFA519_minS =
        "\1\14\1\0\2\uffff\1\0\4\uffff\1\0\2\uffff\1\0\4\uffff";
    static final String DFA519_maxS =
        "\1\u00cf\1\0\2\uffff\1\0\4\uffff\1\0\2\uffff\1\0\4\uffff";
    static final String DFA519_acceptS =
        "\2\uffff\1\4\1\7\1\uffff\1\2\1\13\1\12\1\7\1\uffff\1\3\1\11\1\uffff"+
        "\1\6\1\10\1\5\1\1";
    static final String DFA519_specialS =
        "\1\uffff\1\0\2\uffff\1\1\4\uffff\1\2\2\uffff\1\3\4\uffff}>";
    static final String[] DFA519_transitionS = {
            "\1\11\1\15\1\uffff\1\20\1\uffff\2\11\1\20\2\11\1\14\1\17\1\11"+
            "\1\uffff\1\13\1\7\1\uffff\1\16\2\uffff\2\11\1\1\1\11\1\10\1"+
            "\11\3\uffff\7\11\12\uffff\2\11\13\14\11\uffff\3\14\2\uffff\1"+
            "\14\1\uffff\7\14\1\uffff\7\14\1\uffff\1\14\1\uffff\1\14\1\uffff"+
            "\2\14\1\uffff\3\14\1\uffff\6\14\1\uffff\30\14\1\uffff\16\14"+
            "\1\uffff\5\14\1\4\11\14\1\uffff\14\14\1\uffff\6\14\5\uffff\7"+
            "\14",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA519_eot = DFA.unpackEncodedString(DFA519_eotS);
    static final short[] DFA519_eof = DFA.unpackEncodedString(DFA519_eofS);
    static final char[] DFA519_min = DFA.unpackEncodedStringToUnsignedChars(DFA519_minS);
    static final char[] DFA519_max = DFA.unpackEncodedStringToUnsignedChars(DFA519_maxS);
    static final short[] DFA519_accept = DFA.unpackEncodedString(DFA519_acceptS);
    static final short[] DFA519_special = DFA.unpackEncodedString(DFA519_specialS);
    static final short[][] DFA519_transition;

    static {
        int numStates = DFA519_transitionS.length;
        DFA519_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA519_transition[i] = DFA.unpackEncodedString(DFA519_transitionS[i]);
        }
    }

    class DFA519 extends DFA {

        public DFA519(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 519;
            this.eot = DFA519_eot;
            this.eof = DFA519_eof;
            this.min = DFA519_min;
            this.max = DFA519_max;
            this.accept = DFA519_accept;
            this.special = DFA519_special;
            this.transition = DFA519_transition;
        }
        public String getDescription() {
            return "13138:1: initparms returns [Node returnNode] : (option_paramGen+= option_param | wordGen+= word | pathGen+= path | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | NUMBERGen= NUMBER | command_nameGen+= command_name | BSLASHGen= BSLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA519_1 = input.LA(1);

                         
                        int index519_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred577_GrammarShellForMancoosi()) ) {s = 2;}

                        else if ( (synpred580_GrammarShellForMancoosi()) ) {s = 3;}

                         
                        input.seek(index519_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA519_4 = input.LA(1);

                         
                        int index519_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred575_GrammarShellForMancoosi()) ) {s = 5;}

                        else if ( (synpred580_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index519_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA519_9 = input.LA(1);

                         
                        int index519_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred576_GrammarShellForMancoosi()) ) {s = 10;}

                        else if ( (synpred580_GrammarShellForMancoosi()) ) {s = 8;}

                         
                        input.seek(index519_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA519_12 = input.LA(1);

                         
                        int index519_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred575_GrammarShellForMancoosi()) ) {s = 5;}

                        else if ( (synpred580_GrammarShellForMancoosi()) ) {s = 8;}

                         
                        input.seek(index519_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 519, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA534_eotS =
        "\12\uffff";
    static final String DFA534_eofS =
        "\12\uffff";
    static final String DFA534_minS =
        "\1\13\1\0\3\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA534_maxS =
        "\1\66\1\0\3\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA534_acceptS =
        "\2\uffff\1\1\1\3\1\4\1\uffff\1\5\1\1\1\uffff\1\2";
    static final String DFA534_specialS =
        "\1\uffff\1\0\3\uffff\1\1\2\uffff\1\2\1\uffff}>";
    static final String[] DFA534_transitionS = {
            "\1\7\1\uffff\1\1\1\5\31\uffff\1\7\7\uffff\2\7\1\10\4\7",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA534_eot = DFA.unpackEncodedString(DFA534_eotS);
    static final short[] DFA534_eof = DFA.unpackEncodedString(DFA534_eofS);
    static final char[] DFA534_min = DFA.unpackEncodedStringToUnsignedChars(DFA534_minS);
    static final char[] DFA534_max = DFA.unpackEncodedStringToUnsignedChars(DFA534_maxS);
    static final short[] DFA534_accept = DFA.unpackEncodedString(DFA534_acceptS);
    static final short[] DFA534_special = DFA.unpackEncodedString(DFA534_specialS);
    static final short[][] DFA534_transition;

    static {
        int numStates = DFA534_transitionS.length;
        DFA534_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA534_transition[i] = DFA.unpackEncodedString(DFA534_transitionS[i]);
        }
    }

    class DFA534 extends DFA {

        public DFA534(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 534;
            this.eot = DFA534_eot;
            this.eof = DFA534_eof;
            this.min = DFA534_min;
            this.max = DFA534_max;
            this.accept = DFA534_accept;
            this.special = DFA534_special;
            this.transition = DFA534_transition;
        }
        public String getDescription() {
            return "13661:1: redirection returns [Node returnNode] : ( (NUMBERGen= NUMBER )? (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER ) (pathGen+= path | wordGen+= word | varGen+= var ) | LESSANDGen= LESSAND (NUMBERGen= NUMBER | MINUSGen= MINUS ) | NUMBERGen= NUMBER LESSANDGen= LESSAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | (NUMBERGen= NUMBER )? GREATANDGen= GREATAND (NUMBERGen_1= NUMBER | MINUSGen= MINUS ) | GREATANDGen= GREATAND );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA534_1 = input.LA(1);

                         
                        int index534_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred604_GrammarShellForMancoosi()) ) {s = 2;}

                        else if ( (synpred608_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (synpred611_GrammarShellForMancoosi()) ) {s = 4;}

                         
                        input.seek(index534_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA534_5 = input.LA(1);

                         
                        int index534_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred604_GrammarShellForMancoosi()) ) {s = 2;}

                        else if ( (synpred611_GrammarShellForMancoosi()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index534_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA534_8 = input.LA(1);

                         
                        int index534_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred604_GrammarShellForMancoosi()) ) {s = 7;}

                        else if ( (synpred606_GrammarShellForMancoosi()) ) {s = 9;}

                         
                        input.seek(index534_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 534, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA528_eotS =
        "\13\uffff";
    static final String DFA528_eofS =
        "\13\uffff";
    static final String DFA528_minS =
        "\1\13\12\uffff";
    static final String DFA528_maxS =
        "\1\66\12\uffff";
    static final String DFA528_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA528_specialS =
        "\13\uffff}>";
    static final String[] DFA528_transitionS = {
            "\1\1\2\uffff\1\10\31\uffff\1\2\7\uffff\1\3\1\4\1\5\1\6\1\7\1"+
            "\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA528_eot = DFA.unpackEncodedString(DFA528_eotS);
    static final short[] DFA528_eof = DFA.unpackEncodedString(DFA528_eofS);
    static final char[] DFA528_min = DFA.unpackEncodedStringToUnsignedChars(DFA528_minS);
    static final char[] DFA528_max = DFA.unpackEncodedStringToUnsignedChars(DFA528_maxS);
    static final short[] DFA528_accept = DFA.unpackEncodedString(DFA528_acceptS);
    static final short[] DFA528_special = DFA.unpackEncodedString(DFA528_specialS);
    static final short[][] DFA528_transition;

    static {
        int numStates = DFA528_transitionS.length;
        DFA528_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA528_transition[i] = DFA.unpackEncodedString(DFA528_transitionS[i]);
        }
    }

    class DFA528 extends DFA {

        public DFA528(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 528;
            this.eot = DFA528_eot;
            this.eof = DFA528_eof;
            this.min = DFA528_min;
            this.max = DFA528_max;
            this.accept = DFA528_accept;
            this.special = DFA528_special;
            this.transition = DFA528_transition;
        }
        public String getDescription() {
            return "13662:22: (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER )";
        }
    }
    static final String DFA632_eotS =
        "\27\uffff";
    static final String DFA632_eofS =
        "\27\uffff";
    static final String DFA632_minS =
        "\1\13\1\0\3\uffff\1\0\6\uffff\1\0\3\uffff\1\0\3\uffff\2\0\1\uffff";
    static final String DFA632_maxS =
        "\1\u00cf\1\0\3\uffff\1\0\6\uffff\1\0\3\uffff\1\0\3\uffff\2\0\1\uffff";
    static final String DFA632_acceptS =
        "\2\uffff\1\2\1\10\1\15\1\uffff\1\3\1\11\1\10\1\12\1\13\1\14\1\uffff"+
        "\1\4\1\5\1\1\1\uffff\1\7\1\16\1\4\2\uffff\1\6";
    static final String DFA632_specialS =
        "\1\uffff\1\0\3\uffff\1\1\6\uffff\1\2\3\uffff\1\3\3\uffff\1\4\1\5"+
        "\1\uffff}>";
    static final String[] DFA632_transitionS = {
            "\1\23\1\5\1\14\1\23\1\17\1\uffff\2\5\1\17\2\5\1\24\1\20\1\5"+
            "\1\uffff\1\12\1\13\1\11\1\7\2\uffff\2\5\1\25\1\5\1\10\1\5\2"+
            "\uffff\1\23\7\5\7\23\3\uffff\2\5\13\24\11\uffff\3\24\2\uffff"+
            "\1\24\1\uffff\7\24\1\uffff\7\24\1\uffff\1\24\1\uffff\1\24\1"+
            "\uffff\2\24\1\uffff\3\24\1\uffff\6\24\1\uffff\30\24\1\uffff"+
            "\16\24\1\uffff\5\24\1\1\11\24\1\uffff\14\24\1\uffff\6\24\5\uffff"+
            "\7\24",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA632_eot = DFA.unpackEncodedString(DFA632_eotS);
    static final short[] DFA632_eof = DFA.unpackEncodedString(DFA632_eofS);
    static final char[] DFA632_min = DFA.unpackEncodedStringToUnsignedChars(DFA632_minS);
    static final char[] DFA632_max = DFA.unpackEncodedStringToUnsignedChars(DFA632_maxS);
    static final short[] DFA632_accept = DFA.unpackEncodedString(DFA632_acceptS);
    static final short[] DFA632_special = DFA.unpackEncodedString(DFA632_specialS);
    static final short[][] DFA632_transition;

    static {
        int numStates = DFA632_transitionS.length;
        DFA632_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA632_transition[i] = DFA.unpackEncodedString(DFA632_transitionS[i]);
        }
    }

    class DFA632 extends DFA {

        public DFA632(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 632;
            this.eot = DFA632_eot;
            this.eof = DFA632_eof;
            this.min = DFA632_min;
            this.max = DFA632_max;
            this.accept = DFA632_accept;
            this.special = DFA632_special;
            this.transition = DFA632_transition;
        }
        public String getDescription() {
            return "15347:1: param returns [Node returnNode] : (option_paramGen+= option_param | wordGen+= word | pathGen+= path | redirectionGen+= redirection | NUMBERGen= NUMBER | COLONGen= COLON | APGen= AP nestedCommandGen+= nestedCommand APGen_1= AP | command_nameGen+= command_name | BSLASHGen= BSLASH | SLASHGen= SLASH | PSINGLEGen= PSINGLE | TILDEGen= TILDE | TK_0= '*' | APGen= AP );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA632_1 = input.LA(1);

                         
                        int index632_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred719_GrammarShellForMancoosi()) ) {s = 2;}

                        else if ( (synpred725_GrammarShellForMancoosi()) ) {s = 3;}

                        else if ( (synpred730_GrammarShellForMancoosi()) ) {s = 4;}

                         
                        input.seek(index632_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA632_5 = input.LA(1);

                         
                        int index632_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred720_GrammarShellForMancoosi()) ) {s = 6;}

                        else if ( (synpred725_GrammarShellForMancoosi()) ) {s = 3;}

                         
                        input.seek(index632_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA632_12 = input.LA(1);

                         
                        int index632_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred721_GrammarShellForMancoosi()) ) {s = 13;}

                        else if ( (synpred722_GrammarShellForMancoosi()) ) {s = 14;}

                         
                        input.seek(index632_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA632_16 = input.LA(1);

                         
                        int index632_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred724_GrammarShellForMancoosi()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index632_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA632_20 = input.LA(1);

                         
                        int index632_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred719_GrammarShellForMancoosi()) ) {s = 2;}

                        else if ( (synpred725_GrammarShellForMancoosi()) ) {s = 8;}

                         
                        input.seek(index632_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA632_21 = input.LA(1);

                         
                        int index632_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred723_GrammarShellForMancoosi()) ) {s = 22;}

                        else if ( (synpred725_GrammarShellForMancoosi()) ) {s = 8;}

                         
                        input.seek(index632_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 632, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA645_eotS =
        "\24\uffff";
    static final String DFA645_eofS =
        "\24\uffff";
    static final String DFA645_minS =
        "\1\14\23\uffff";
    static final String DFA645_maxS =
        "\1\73\23\uffff";
    static final String DFA645_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23";
    static final String DFA645_specialS =
        "\24\uffff}>";
    static final String[] DFA645_transitionS = {
            "\1\21\4\uffff\1\12\1\13\1\uffff\1\7\1\5\2\uffff\1\20\7\uffff"+
            "\1\16\1\10\1\uffff\1\2\1\uffff\1\1\3\uffff\1\11\1\14\1\15\1"+
            "\17\1\6\1\3\1\4\12\uffff\1\22\1\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA645_eot = DFA.unpackEncodedString(DFA645_eotS);
    static final short[] DFA645_eof = DFA.unpackEncodedString(DFA645_eofS);
    static final char[] DFA645_min = DFA.unpackEncodedStringToUnsignedChars(DFA645_minS);
    static final char[] DFA645_max = DFA.unpackEncodedStringToUnsignedChars(DFA645_maxS);
    static final short[] DFA645_accept = DFA.unpackEncodedString(DFA645_acceptS);
    static final short[] DFA645_special = DFA.unpackEncodedString(DFA645_specialS);
    static final short[][] DFA645_transition;

    static {
        int numStates = DFA645_transitionS.length;
        DFA645_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA645_transition[i] = DFA.unpackEncodedString(DFA645_transitionS[i]);
        }
    }

    class DFA645 extends DFA {

        public DFA645(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 645;
            this.eot = DFA645_eot;
            this.eof = DFA645_eof;
            this.min = DFA645_min;
            this.max = DFA645_max;
            this.accept = DFA645_accept;
            this.special = DFA645_special;
            this.transition = DFA645_transition;
        }
        public String getDescription() {
            return "15913:1: path returns [Node returnNode] : (PATHPGen= PATHP | PATHSSGen= PATHSS | PATHKVERSGen= PATHKVERS | PATHSCRIPTGen= PATHSCRIPT | PATHOLDSCHEMAGen= PATHOLDSCHEMA | PATHPACKGen= PATHPACK | PATHGCONFSCHGen= PATHGCONFSCH | PATHSUIDGen= PATHSUID | PATHXWINDOWGen= PATHXWINDOW | PATHEMACSINSTGen= PATHEMACSINST | PATHEMACSREMGen= PATHEMACSREM | PATHXMANAGERGen= PATHXMANAGER | PATHCONFMODGen= PATHCONFMOD | PATHMIMEGen= PATHMIME | PATHDOCIDGen= PATHDOCID | PATHCOMPYTHGen= PATHCOMPYTH | PATHNULLGen= PATHNULL | PATHRELGen= PATHREL | PATHGen= PATH );";
        }
    }
    static final String DFA646_eotS =
        "\16\uffff";
    static final String DFA646_eofS =
        "\16\uffff";
    static final String DFA646_minS =
        "\1\74\15\uffff";
    static final String DFA646_maxS =
        "\1\u00bc\15\uffff";
    static final String DFA646_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA646_specialS =
        "\16\uffff}>";
    static final String[] DFA646_transitionS = {
            "\1\15\50\uffff\1\14\3\uffff\1\2\21\uffff\1\5\3\uffff\1\7\12"+
            "\uffff\1\3\1\uffff\1\4\1\1\46\uffff\1\12\3\uffff\1\6\1\uffff"+
            "\1\10\1\11\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA646_eot = DFA.unpackEncodedString(DFA646_eotS);
    static final short[] DFA646_eof = DFA.unpackEncodedString(DFA646_eofS);
    static final char[] DFA646_min = DFA.unpackEncodedStringToUnsignedChars(DFA646_minS);
    static final char[] DFA646_max = DFA.unpackEncodedStringToUnsignedChars(DFA646_maxS);
    static final short[] DFA646_accept = DFA.unpackEncodedString(DFA646_acceptS);
    static final short[] DFA646_special = DFA.unpackEncodedString(DFA646_specialS);
    static final short[][] DFA646_transition;

    static {
        int numStates = DFA646_transitionS.length;
        DFA646_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA646_transition[i] = DFA.unpackEncodedString(DFA646_transitionS[i]);
        }
    }

    class DFA646 extends DFA {

        public DFA646(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 646;
            this.eot = DFA646_eot;
            this.eof = DFA646_eof;
            this.min = DFA646_min;
            this.max = DFA646_max;
            this.accept = DFA646_accept;
            this.special = DFA646_special;
            this.transition = DFA646_transition;
        }
        public String getDescription() {
            return "16164:1: var returns [Node returnNode] : (TK_0= '$i' | TK_0= '$SCHEMA_FILES' | TK_0= '$PYTHON' | TK_0= '$DIRLIST' | TK_0= '$_dh_action' | TK_0= '$dir' | TK_0= '$inst' | TK_0= '$user' | TK_0= '$group' | TK_0= '$line' | TK_0= '$mode' | TK_0= '$OLD_DIR' | VARGen= VAR );";
        }
    }
    static final String DFA650_eotS =
        "\142\uffff";
    static final String DFA650_eofS =
        "\142\uffff";
    static final String DFA650_minS =
        "\1\106\141\uffff";
    static final String DFA650_maxS =
        "\1\u00cf\141\uffff";
    static final String DFA650_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
        "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
        "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141";
    static final String DFA650_specialS =
        "\142\uffff}>";
    static final String[] DFA650_transitionS = {
            "\1\141\11\uffff\1\6\1\5\1\4\2\uffff\1\126\1\uffff\1\7\1\10\1"+
            "\127\1\11\1\130\1\131\1\12\1\uffff\1\13\1\14\1\20\1\15\1\16"+
            "\1\132\2\uffff\1\17\3\uffff\1\21\1\133\1\uffff\1\22\1\65\1\23"+
            "\1\uffff\1\26\1\25\1\27\1\123\1\37\1\40\1\uffff\1\41\1\42\1"+
            "\uffff\1\43\1\30\1\44\1\uffff\1\76\1\45\1\31\1\46\1\134\1\57"+
            "\1\135\1\136\1\101\1\32\1\uffff\1\33\2\uffff\1\115\1\137\1\116"+
            "\2\uffff\1\120\1\121\1\107\1\122\1\34\1\66\1\51\1\60\1\50\1"+
            "\35\1\36\1\74\1\64\1\uffff\1\75\1\53\1\55\1\62\1\63\1\125\1"+
            "\67\1\140\1\70\1\102\1\103\1\104\1\105\1\106\1\110\1\uffff\1"+
            "\77\1\111\1\124\1\uffff\1\100\1\112\1\114\1\uffff\1\113\4\uffff"+
            "\1\54\1\56\1\72\1\73\1\61\1\71\5\uffff\1\1\1\2\1\3\1\24\1\47"+
            "\1\52\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA650_eot = DFA.unpackEncodedString(DFA650_eotS);
    static final short[] DFA650_eof = DFA.unpackEncodedString(DFA650_eofS);
    static final char[] DFA650_min = DFA.unpackEncodedStringToUnsignedChars(DFA650_minS);
    static final char[] DFA650_max = DFA.unpackEncodedStringToUnsignedChars(DFA650_maxS);
    static final short[] DFA650_accept = DFA.unpackEncodedString(DFA650_acceptS);
    static final short[] DFA650_special = DFA.unpackEncodedString(DFA650_specialS);
    static final short[][] DFA650_transition;

    static {
        int numStates = DFA650_transitionS.length;
        DFA650_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA650_transition[i] = DFA.unpackEncodedString(DFA650_transitionS[i]);
        }
    }

    class DFA650 extends DFA {

        public DFA650(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 650;
            this.eot = DFA650_eot;
            this.eof = DFA650_eof;
            this.min = DFA650_min;
            this.max = DFA650_max;
            this.accept = DFA650_accept;
            this.special = DFA650_special;
            this.transition = DFA650_transition;
        }
        public String getDescription() {
            return "16573:1: id returns [Node returnNode] : (TK_0= 'HOME' | TK_0= 'PATH' | TK_0= 'PS' | TK_0= 'update-desktop-database' | TK_0= 'which' | TK_0= 'configure' | TK_0= 'remove' | TK_0= 'install-docs' | TK_0= 'upgrade' | TK_0= 'update-gconf-defaults' | TK_0= 'register' | TK_0= 'unregister' | TK_0= 'OLD_DIR' | TK_0= 'SCHEMA_FILES' | TK_0= 'SCHEMA' | TK_0= 'purge' | TK_0= 'rm' | TK_0= 'rmdir' | TK_0= 'ignore-fail-on-non-empty' | TK_0= 'update-icon-cache' | TK_0= 'quiet' | TK_0= 'install-info' | TK_0= 'update-rc.d' | TK_0= 'ldconfig' | TK_0= 'update-menus' | TK_0= 'PYTHON' | TK_0= 'DIRLIST' | TK_0= 'scrollkeeper-update' | TK_0= 'update-mime-database' | TK_0= 'update-mime' | TK_0= 'dh_action' | TK_0= 'restart' | TK_0= 'start' | TK_0= 'invoke-rc.d' | TK_0= 'stop' | TK_0= 'inst' | TK_0= 'a+x' | TK_0= 'a-x' | TK_0= 'catalog' | TK_0= 'super' | TK_0= 'update-catalog' | TK_0= 'old' | TK_0= 'suidunregister' | TK_0= 'update-alternatives' | TK_0= 'install' | TK_0= 'x-window-manager' | TK_0= 'depmod' | TK_0= 'add' | TK_0= 'update-fonts-dir' | TK_0= 'md5sum' | TK_0= 'sed' | TK_0= 's' | TK_0= 'p' | TK_0= 'ordcat' | TK_0= 'dpkg-query' | TK_0= 'Conffiles' | TK_0= 'db_purge' | TK_0= 'slave' | TK_0= 'x-window-manager.1.gz' | TK_0= 'suidregister' | TK_0= 'chown' | TK_0= 'chmod' | TK_0= 'read' | TK_0= 'dir' | TK_0= 'true' | TK_0= 'echo' | TK_0= 'Preserving' | TK_0= 'user' | TK_0= 'changes' | TK_0= 'to' | TK_0= 'o' | TK_0= 'mv' | TK_0= 'line' | TK_0= 'mode' | TK_0= 'mkdir' | TK_0= 'group' | TK_0= 'dpkg' | TK_0= 'awk' | TK_0= 'py' | TK_0= 'print' | TK_0= 'c' | TK_0= 'xargs' | TK_0= 'n' | TK_0= 'set' | TK_0= '*' | TK_0= 'q' | TK_0= 'i' | TK_0= 'r' | TK_0= 'x' | TK_0= 'd' | TK_0= 'f' | TK_0= 'e' | TK_0= 'a' | TK_0= 'F' | TK_0= 'L' | TK_0= 'W' | IDGen= ID );";
        }
    }
    static final String DFA660_eotS =
        "\13\uffff";
    static final String DFA660_eofS =
        "\13\uffff";
    static final String DFA660_minS =
        "\1\13\12\uffff";
    static final String DFA660_maxS =
        "\1\66\12\uffff";
    static final String DFA660_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA660_specialS =
        "\13\uffff}>";
    static final String[] DFA660_transitionS = {
            "\1\1\2\uffff\1\10\31\uffff\1\2\7\uffff\1\3\1\4\1\5\1\6\1\7\1"+
            "\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA660_eot = DFA.unpackEncodedString(DFA660_eotS);
    static final short[] DFA660_eof = DFA.unpackEncodedString(DFA660_eofS);
    static final char[] DFA660_min = DFA.unpackEncodedStringToUnsignedChars(DFA660_minS);
    static final char[] DFA660_max = DFA.unpackEncodedStringToUnsignedChars(DFA660_maxS);
    static final short[] DFA660_accept = DFA.unpackEncodedString(DFA660_acceptS);
    static final short[] DFA660_special = DFA.unpackEncodedString(DFA660_specialS);
    static final short[][] DFA660_transition;

    static {
        int numStates = DFA660_transitionS.length;
        DFA660_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA660_transition[i] = DFA.unpackEncodedString(DFA660_transitionS[i]);
        }
    }

    class DFA660 extends DFA {

        public DFA660(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 660;
            this.eot = DFA660_eot;
            this.eof = DFA660_eof;
            this.min = DFA660_min;
            this.max = DFA660_max;
            this.accept = DFA660_accept;
            this.special = DFA660_special;
            this.transition = DFA660_transition;
        }
        public String getDescription() {
            return "13662:22: (GREATGen= GREAT | DLESSGen= DLESS | LESSGen= LESS | DGREATGen= DGREAT | LESSANDGen= LESSAND | DLESSDASHGen= DLESSDASH | LESSGREATGen= LESSGREAT | GREATANDGen= GREATAND | ANDGREATGen= ANDGREAT | CLOBBERGen= CLOBBER )";
        }
    }
 

    public static final BitSet FOLLOW_header_in_mainRule52 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_mainRule58 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_SHARP_in_header82 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_EXCL_in_header87 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_path_in_header92 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_header99 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_header106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_in_statement129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_statement_in_statement141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_statement_in_statement153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_statement_in_statement177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redirection_statement_in_statement189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA1_in_template211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA2_in_template223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA3_in_template235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA4_in_template247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA5_in_template259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA6_in_template271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA7_in_template283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA8_in_template295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA9_in_template307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA10_in_template319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA11_in_template331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA12_13_in_template343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA14_in_template355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA15_in_template367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA16_in_template380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA17_in_template392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA18_in_template404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA19_in_template416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA20_in_template428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA21_in_template440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA22_in_template452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA23_in_template464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA24_in_template476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA25_in_template488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA26_in_template500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA27_in_template512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA28_in_template524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA29_in_template536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA30_in_template548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA31_in_template560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA32_in_template572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA33_in_template584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA34_in_template596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA35_in_template608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA36_in_template620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA37_in_template632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA38_in_template644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA39_in_template656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA40_in_template668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA41_in_template680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA42_in_template692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA43_in_template704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA44_in_template716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA45_in_template728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA46_in_template740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA47_in_template752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA48_in_template764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA49_in_template776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA50_in_template788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA51_in_template800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA52_in_template812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA1834 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA1840 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA1847 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA1852 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA1858 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA1863 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA1869 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA1874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA1880 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA1885 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA1891 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA1897 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA1904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA1910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA1917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_templateA1922 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA1927 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA1932 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA1937 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA1942 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA1952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_78_in_templateA1963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_templateA1970 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA1975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_templateA1980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA1986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA1993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA11005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA11012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA21035 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA21041 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA21048 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA21053 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA21059 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA21064 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA21070 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA21075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA21081 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA21086 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA21092 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA21098 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA21105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA21111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA21118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_templateA21123 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA21128 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA21133 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA21138 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA21143 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA21148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA21153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA21158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_78_in_templateA21164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_templateA21171 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA21176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_templateA21181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA21187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA21194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA21200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA21206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA21213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA31236 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA31242 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA31249 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA31254 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA31260 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA31265 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA31271 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA31276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA31282 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA31287 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA31293 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA31299 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA31306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA31312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA31319 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_templateA31324 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA31329 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA31334 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA31339 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA31344 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA31349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA31354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA31359 = new BitSet(new long[]{0x0000000000000000L,0x0000000001004000L});
    public static final BitSet FOLLOW_78_in_templateA31365 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_templateA31372 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA31377 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_templateA31382 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_doc_id_in_templateA31387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA31393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA31400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA31406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA31412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA31419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA41442 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA41448 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA41455 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41460 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA41466 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41471 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA41477 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA41488 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41493 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA41499 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA41504 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA41510 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA41517 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41522 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA41528 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41533 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA41539 = new BitSet(new long[]{0x0000000000000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41544 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_templateA41550 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA41555 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA41561 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA41567 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA41574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA41580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA41587 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_templateA41592 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA41597 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA41602 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA41608 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA41613 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA41618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA41623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA41628 = new BitSet(new long[]{0x0000000000000000L,0x0000000001004000L});
    public static final BitSet FOLLOW_78_in_templateA41634 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_templateA41641 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA41646 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_templateA41651 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_doc_id_in_templateA41656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA41662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA41669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA41675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA41681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA41688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA51712 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA51718 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA51725 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA51730 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA51736 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA51741 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA51747 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA51752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA51758 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA51763 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA51769 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA51775 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA51782 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA51788 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA51795 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA51800 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA51805 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_PATHEMACSINST_in_templateA51810 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA51815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA51820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA51825 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA51831 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_PATHEMACSINST_in_templateA51840 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_pack_in_templateA51845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA51851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA51858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA51864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA51870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA51877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA61901 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA61907 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA61914 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA61919 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA61924 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_PATHEMACSREM_in_templateA61929 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA61934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA61939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA61944 = new BitSet(new long[]{0x0000000000040000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA61950 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_PATHEMACSREM_in_templateA61958 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_pack_in_templateA61963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA61969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA61976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA61982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA61988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA61995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA72018 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA72024 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA72031 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA72036 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA72042 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA72047 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA72053 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA72058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA72064 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA72069 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA72075 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA72081 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA72088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA72094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA72101 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_templateA72106 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA72111 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA72116 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA72121 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA72126 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA72131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA72136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA72141 = new BitSet(new long[]{0x0000000000000000L,0x0000000020004000L});
    public static final BitSet FOLLOW_78_in_templateA72147 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_templateA72154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA72160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA72167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA72173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA72179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA72186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA82210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA82216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA82224 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_templateA82229 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA82234 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA82239 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA82244 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA82249 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA82254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA82259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA82264 = new BitSet(new long[]{0x0000000000000000L,0x0000000020004000L});
    public static final BitSet FOLLOW_78_in_templateA82270 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_templateA82277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA82283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA82290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA82296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA82302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA82309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA92332 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA92338 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA92345 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA92350 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA92356 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA92361 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA92367 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA92372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA92378 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA92383 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA92389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA92395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA92400 = new BitSet(new long[]{0x0000000000000000L,0x0000000040004000L});
    public static final BitSet FOLLOW_78_in_templateA92406 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_templateA92414 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA92419 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_templateA92424 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_schemas_in_templateA92429 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_templateA92436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA92443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA92449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA92455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA92462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA102486 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA102492 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA102499 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102504 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA102510 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102515 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA102521 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA102532 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102537 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA102543 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA102548 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA102554 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA102561 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102566 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA102572 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102577 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA102583 = new BitSet(new long[]{0x0000000000000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102588 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_templateA102594 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA102599 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA102605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA102610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA102615 = new BitSet(new long[]{0x0000000000000000L,0x0000000040004000L});
    public static final BitSet FOLLOW_78_in_templateA102621 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_94_in_templateA102629 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA102634 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_templateA102639 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_schemas_in_templateA102644 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_templateA102651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA102658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA102664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA102670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA102677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA112701 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112707 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA112714 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112719 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA112725 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112730 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA112736 = new BitSet(new long[]{0x0000000000000080L,0x0000000200000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112741 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_templateA112747 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112752 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA112758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA112764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA112769 = new BitSet(new long[]{0x0000000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_78_in_templateA112775 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_templateA112782 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA112787 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_PATHGCONFSCH_in_templateA112793 = new BitSet(new long[]{0x0000000000000000L,0x0000000800004000L});
    public static final BitSet FOLLOW_78_in_templateA112799 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_templateA112806 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA112811 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112816 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_schemas_in_templateA112821 = new BitSet(new long[]{0xFC00FE2B01761080L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DQUOTE_in_templateA112827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA112837 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112843 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA112852 = new BitSet(new long[]{0x0000000000008000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112858 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA112865 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_templateA112870 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_templateA112875 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA112880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA112885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA112890 = new BitSet(new long[]{0x0000000000000000L,0x0000004000004000L});
    public static final BitSet FOLLOW_78_in_templateA112896 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_102_in_templateA112903 = new BitSet(new long[]{0x0000000000000000L,0x0000008000004000L});
    public static final BitSet FOLLOW_78_in_templateA112909 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_103_in_templateA112916 = new BitSet(new long[]{0x0000000000000000L,0x0000010000004000L});
    public static final BitSet FOLLOW_78_in_templateA112922 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_templateA112929 = new BitSet(new long[]{0x0000000000000000L,0x0000020000004000L});
    public static final BitSet FOLLOW_78_in_templateA112935 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_templateA112942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA112947 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_templateA112952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112957 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA112963 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA112968 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA112973 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_PATHOLDSCHEMA_in_templateA112978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA112983 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_templateA112988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA112994 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_83_in_templateA113001 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_110_in_templateA113008 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA113013 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_templateA113018 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA113025 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_templateA113030 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_templateA113035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA113041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA113048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA113054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA113060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA113067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA113073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA113079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA113086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA12_133110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA12_133116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA12_133124 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_templateA12_133129 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA12_133134 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA12_133139 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA12_133144 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA12_133149 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA12_133154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA12_133159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA12_133164 = new BitSet(new long[]{0x0000000000000000L,0x0002000000004000L});
    public static final BitSet FOLLOW_78_in_templateA12_133170 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_templateA12_133177 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_dirlist_in_templateA12_133183 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000484000L});
    public static final BitSet FOLLOW_78_in_templateA12_133189 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA12_133196 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA12_133205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA12_133211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA12_133218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA143242 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA143248 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA143255 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA143260 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA143266 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA143271 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA143277 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA143282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA143288 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA143293 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA143299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA143305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA143310 = new BitSet(new long[]{0x0000000000000000L,0x0004000000004000L});
    public static final BitSet FOLLOW_78_in_templateA143316 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_templateA143323 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA143328 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_templateA143333 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA143338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA143344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA143351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA143357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA143363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA143370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA153394 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA153400 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA153407 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153412 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA153418 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153423 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA153429 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA153440 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153445 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA153451 = new BitSet(new long[]{0x0000000000010000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA153457 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA153464 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA153470 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA153477 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153482 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA153488 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153493 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA153499 = new BitSet(new long[]{0x0000000000000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153504 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_templateA153510 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA153515 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA153521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA153526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA153533 = new BitSet(new long[]{0x0000000000000000L,0x0004000000004000L});
    public static final BitSet FOLLOW_78_in_templateA153539 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_templateA153546 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA153551 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_templateA153556 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA153561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA153566 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA153571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA153577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA153584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA153590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA153596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA153603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA163627 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA163633 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA163640 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA163645 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA163650 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA163655 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA163660 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA163665 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA163670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA163675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA163680 = new BitSet(new long[]{0x0000000000000000L,0x0010000000004000L});
    public static final BitSet FOLLOW_78_in_templateA163686 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_templateA163693 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA163698 = new BitSet(new long[]{0xFC00FE3F2DFEB000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_initparms_in_templateA163703 = new BitSet(new long[]{0xFC00FE3F2DFEB800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_GREAT_in_templateA163709 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA163714 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA163719 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA163724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA163730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA163737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA163744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA163750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA163757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA173781 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173787 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA173794 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA173799 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA173804 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA173809 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA173814 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA173819 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA173824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA173829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA173834 = new BitSet(new long[]{0x0000000000000000L,0x0010000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173840 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_templateA173847 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA173852 = new BitSet(new long[]{0xFC00FE3F2DFEB000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_initparms_in_templateA173857 = new BitSet(new long[]{0xFC00FE3F2DFEB800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_GREAT_in_templateA173863 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA173868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA173874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA173881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA173889 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173895 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA173902 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA173907 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_templateA173912 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA173917 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA173922 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA173927 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA173932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA173937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA173942 = new BitSet(new long[]{0x0000000000400000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173948 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_templateA173955 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_templateA173960 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA173965 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_templateA173970 = new BitSet(new long[]{0x0000000000000000L,0x0100000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173977 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_templateA173984 = new BitSet(new long[]{0x0000000000400000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA173991 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_templateA173999 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_templateA174004 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA174009 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_templateA174014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA174021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA174028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA174034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA174040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA174047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA174055 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA174061 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA174068 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA174073 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA174078 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA174083 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA174088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA174094 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA174099 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA174104 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA174109 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA174114 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA174119 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA174124 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA174129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA174134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA174139 = new BitSet(new long[]{0x0000000000000000L,0x0400000000004000L});
    public static final BitSet FOLLOW_78_in_templateA174145 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA174153 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA174158 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_templateA174163 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA174168 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA174173 = new BitSet(new long[]{0x0000000000000000L,0x0100000000004000L});
    public static final BitSet FOLLOW_78_in_templateA174179 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_templateA174188 = new BitSet(new long[]{0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA174194 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA174201 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_templateA174206 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA174211 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA174216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA174223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA174230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA174237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA174244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA174251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA174257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA174263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA174270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA184294 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA184300 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA184307 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA184312 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA184317 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184322 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA184327 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184332 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA184337 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA184342 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA184348 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184353 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA184358 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184363 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA184368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA184373 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA184378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA184383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA184390 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA184396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA184404 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA184410 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA184417 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA184422 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA184427 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184432 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA184437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA184443 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA184448 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA184453 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA184458 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA184463 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA184468 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA184473 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA184478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA184483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA184488 = new BitSet(new long[]{0x0000000000000000L,0x0400000000004000L});
    public static final BitSet FOLLOW_78_in_templateA184494 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA184502 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA184507 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_templateA184512 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA184517 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA184522 = new BitSet(new long[]{0x0000000000000000L,0x0100000000004000L});
    public static final BitSet FOLLOW_78_in_templateA184528 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_templateA184537 = new BitSet(new long[]{0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA184543 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA184550 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_templateA184555 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA184560 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA184565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA184571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA184577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA184584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA184590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA184596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA184603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA194628 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194634 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA194641 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA194646 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA194651 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA194656 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA194661 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA194666 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA194671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA194676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA194681 = new BitSet(new long[]{0x0000000000000000L,0x0010000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194687 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_templateA194694 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA194699 = new BitSet(new long[]{0xFC00FE3F2DFEB000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_initparms_in_templateA194704 = new BitSet(new long[]{0xFC00FE3F2DFEB800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_GREAT_in_templateA194710 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA194715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA194721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA194728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA194737 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194743 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA194750 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA194755 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA194760 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA194765 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA194770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA194776 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA194781 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA194786 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA194791 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA194796 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA194801 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA194806 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA194811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA194816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA194821 = new BitSet(new long[]{0x0000000000000000L,0x0400000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194827 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA194835 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA194840 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_templateA194845 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA194850 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA194855 = new BitSet(new long[]{0x0000000000000000L,0x0100000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194861 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_templateA194870 = new BitSet(new long[]{0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA194876 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA194883 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_templateA194888 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA194893 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA194898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA194905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA194912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA194918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA194924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA194931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA194937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA194943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA194950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA204975 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA204981 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA204988 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA204993 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA204998 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA205003 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA205008 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA205013 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA205018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA205023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA205028 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA205034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA205041 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA205047 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA205054 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA205059 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA205064 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA205069 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA205074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA205080 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA205085 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA205090 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA205095 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA205100 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA205105 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA205110 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA205115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA205120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA205127 = new BitSet(new long[]{0x0000000000000000L,0x0400000000004000L});
    public static final BitSet FOLLOW_78_in_templateA205133 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_templateA205141 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA205146 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_templateA205151 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA205156 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA205161 = new BitSet(new long[]{0x0000000000000000L,0x0100000000004000L});
    public static final BitSet FOLLOW_78_in_templateA205167 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_templateA205174 = new BitSet(new long[]{0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA205180 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_script_path_in_templateA205187 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_templateA205192 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA205197 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA205202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA205209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA205216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA205223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA205229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA205236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA205242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA205248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA205255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA215279 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA215285 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA215292 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA215297 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA215303 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA215308 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA215314 = new BitSet(new long[]{0x0000000000000080L,0x0000000200000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA215319 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_templateA215325 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA215330 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA215336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA215341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA215346 = new BitSet(new long[]{0x0000000000000000L,0x0010000000004000L});
    public static final BitSet FOLLOW_78_in_templateA215352 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_templateA215359 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_script_in_templateA215364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA215369 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA215374 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA215379 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA215384 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_error_handler_in_templateA215389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA215396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA215403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA215409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA215415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA215422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA225446 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA225452 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA225459 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA225464 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA225470 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA225475 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA225481 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA225486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA225492 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA225497 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA225503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA225508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA225513 = new BitSet(new long[]{0x0000000000000000L,0x2000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA225519 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_templateA225526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA225532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA225539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA225545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA225551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA225558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA235582 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA235588 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA235595 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA235600 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA235606 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA235611 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA235617 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA235622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA235628 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA235633 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA235639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA235644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA235649 = new BitSet(new long[]{0x0000000000000000L,0x2000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA235655 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_templateA235662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA235668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA235675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA235681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA235687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA235694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_templateA245718 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA245723 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_pack_path_in_templateA245728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA245734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_78_in_templateA245741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA245747 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA245753 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA245758 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA245763 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_templateA245768 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA245773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA245778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA245783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_78_in_templateA245789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_templateA245796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_templateA245801 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_templateA245806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA245812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA245819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA245827 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA245833 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA245838 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA245843 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA245848 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA245853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA245859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA245864 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA245869 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA245874 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA245879 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA245884 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA245889 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA245894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA245899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA245904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_78_in_templateA245910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA245917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA245924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA245931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA245937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA245943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA245950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA245956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA245962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA245969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_templateA255994 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA255999 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_pack_path_in_templateA256004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA256010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_78_in_templateA256017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA256023 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA256029 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256034 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA256039 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256044 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA256049 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA256059 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256064 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA256069 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA256074 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA256079 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA256084 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA256089 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256094 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_templateA256099 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256104 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA256109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA256114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA256121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_78_in_templateA256127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_templateA256135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_templateA256140 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_templateA256145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA256151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA256158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA256164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA256170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA256177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA256184 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA256190 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA256195 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA256200 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256205 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA256210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA256216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA256221 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA256226 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA256231 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA256236 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA256241 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA256246 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA256251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA256256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA256261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_78_in_templateA256267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA256274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA256281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA256288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA256294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA256300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA256307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA266330 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA266336 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA266343 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266348 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA266354 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266359 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA266365 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA266376 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266381 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA266387 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA266393 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA266400 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA266406 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA266413 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA266418 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA266423 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266428 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA266433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA266438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA266443 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA266448 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA266453 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA266458 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA266463 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA266468 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA266473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA266478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA266485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_78_in_templateA266491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA266498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA266504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA266511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA266517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA266523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA266530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA276558 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA276564 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA276571 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA276576 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA276581 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA276586 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA276591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA276596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA276601 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA276606 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA276611 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA276616 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA276621 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA276626 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA276631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA276636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA276641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_78_in_templateA276647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_templateA276654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA276660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA276667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA276673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA276679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA276686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA286711 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA286717 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA286724 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA286729 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA286735 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA286740 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA286746 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA286751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA286757 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA286762 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA286768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA286773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA286778 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA286784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA286792 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA286798 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA286805 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA286810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA286815 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_kvers_path_in_templateA286820 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA286825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA286830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA286837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000020L});
    public static final BitSet FOLLOW_78_in_templateA286843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_templateA286850 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA286855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_templateA286860 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA286865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_templateA286870 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_kvers_path_in_templateA286875 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_kvers_in_templateA286880 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA286885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_templateA286891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA286897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA286904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA286910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA286916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA286923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA286929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA286935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA286942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA296966 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA296972 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA296979 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA296984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA296989 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_kvers_path_in_templateA296994 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA296999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA297004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA297009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000020L});
    public static final BitSet FOLLOW_78_in_templateA297015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_templateA297023 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA297028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_templateA297033 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA297038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_templateA297043 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_kvers_path_in_templateA297048 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_kvers_in_templateA297053 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA297058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_templateA297063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA297069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA297076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA297082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA297088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA297095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_templateA307118 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA307123 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_pyver_in_templateA307128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA307134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA307141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA307147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA307153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA307160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_templateA307165 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA307170 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA307175 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA307180 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA307185 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA307190 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA307196 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA307203 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA307209 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA307217 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA307222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA307227 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_PATHCOMPYTH_in_templateA307232 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA307237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA307242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA307249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000800L});
    public static final BitSet FOLLOW_78_in_templateA307255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_templateA307262 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA307267 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA307272 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_dirlist_in_templateA307278 = new BitSet(new long[]{0x0C00FE2B01361080L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA307283 = new BitSet(new long[]{0x0C00FE2B01361080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA307291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA307298 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_83_in_templateA307305 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_102_in_templateA307312 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L});
    public static final BitSet FOLLOW_78_in_templateA307318 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_templateA307325 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_templateA307330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_templateA307335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA307340 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_templateA307345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA307350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_templateA307355 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_PATHCOMPYTH_in_templateA307360 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA307365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_templateA307370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_templateA307375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA307381 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_83_in_templateA307388 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_templateA307394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA307400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA307407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA307413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA307419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA307426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_templateA317449 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA317454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_templateA317459 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_pack_in_templateA317464 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_VBAR_in_templateA317469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_78_in_templateA317475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_templateA317482 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA317487 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA317492 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_TILDE_in_templateA317497 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SLASH_in_templateA317503 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA317508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_templateA317513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_templateA317518 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SLASH_in_templateA317523 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LGRAF_in_templateA317528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_templateA317533 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA317538 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA317543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_148_in_templateA317548 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA317553 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_templateA317558 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA317563 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA317568 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA317573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_149_in_templateA317578 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA317583 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_RGRAF_in_templateA317588 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA317593 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_VBAR_in_templateA317598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000400000L});
    public static final BitSet FOLLOW_78_in_templateA317604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_150_in_templateA317611 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA317616 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA317621 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA317626 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA317631 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA317636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA317642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA317649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA327672 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA327678 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA327685 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA327690 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA327696 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA327701 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA327707 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA327712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA327718 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA327723 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA327729 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA327735 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA327742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA327748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA327755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_151_in_templateA327760 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA327765 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA327770 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA327775 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA327780 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA327785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA327790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA327795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000800000L});
    public static final BitSet FOLLOW_78_in_templateA327801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_151_in_templateA327808 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA327813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_templateA327818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA327824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA327831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA327837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA327843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA327850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA337875 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA337881 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA337888 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA337893 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA337899 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA337904 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA337910 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA337915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA337921 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA337926 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA337932 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA337938 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA337945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA337951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA337958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_151_in_templateA337963 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA337968 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA337973 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA337978 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA337983 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA337988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA337993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA337998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000800000L});
    public static final BitSet FOLLOW_78_in_templateA338004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_151_in_templateA338011 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA338016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_templateA338021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA338027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA338034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA338040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA338046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA338053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA348080 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA348086 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA348093 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA348098 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA348104 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA348109 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA348115 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA348120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA348126 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA348131 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA348137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA348142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA348147 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_78_in_templateA348153 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA348160 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA348165 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA348170 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA348175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA348181 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_83_in_templateA348188 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_102_in_templateA348194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_templateA348199 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_templateA348204 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_ordcats_in_templateA348209 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFAF007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_83_in_templateA348215 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_templateA348223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000002000000L});
    public static final BitSet FOLLOW_78_in_templateA348229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_templateA348236 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA348241 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_templateA348246 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA348252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_templateA348257 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA348262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_templateA348267 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LGRAF_in_templateA348272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_152_in_templateA348277 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_RGRAF_in_templateA348282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA348288 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_83_in_templateA348295 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_templateA348301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA348307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_83_in_templateA348314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_templateA348320 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA348325 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_templateA348330 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA348335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_templateA348340 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA348345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_templateA348350 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA348355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA348361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA348368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA348374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA348380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA348387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA358412 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA358418 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA358425 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358430 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA358436 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358441 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA358447 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA358458 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358463 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA358469 = new BitSet(new long[]{0x0000000000010000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA358475 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA358482 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA358488 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA358495 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358500 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA358506 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358511 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA358517 = new BitSet(new long[]{0x0000000000000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358522 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_templateA358528 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA358533 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA358539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA358544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA358552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000002000000L});
    public static final BitSet FOLLOW_78_in_templateA358558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_templateA358565 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA358570 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_templateA358575 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA358580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA358585 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA358590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_155_in_templateA358595 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA358600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA358606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA358613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA358619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA358625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA358632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA368659 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA368665 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA368672 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA368677 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA368683 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA368688 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA368694 = new BitSet(new long[]{0x0000000000000080L,0x0000000200000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA368699 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_templateA368705 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA368710 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA368716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA368722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA368729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA368734 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_78_in_templateA368740 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA368747 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA368752 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA368757 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA368762 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_centralcat_in_templateA368767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA368773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA368780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA368786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA368792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA368799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA378822 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA378828 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA378835 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378840 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA378846 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378851 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA378857 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA378868 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378873 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA378879 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA378885 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA378892 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA378898 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA378905 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA378910 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA378915 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378920 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA378925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA378930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_templateA378935 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA378940 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA378945 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA378950 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA378955 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA378960 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA378965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA378970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA378977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000010000000L});
    public static final BitSet FOLLOW_78_in_templateA378983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_templateA378990 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_PATHMIME_in_templateA378995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA379001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA379008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA379014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA379020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA379027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA389051 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA389057 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA389064 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA389069 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA389074 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA389079 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA389084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA389089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_templateA389094 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA389099 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA389104 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA389109 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA389114 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA389119 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA389124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA389129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA389134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000010000000L});
    public static final BitSet FOLLOW_78_in_templateA389140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_templateA389147 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_PATHMIME_in_templateA389152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA389158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA389165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA389171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA389177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA389184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA399209 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA399215 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA399222 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399227 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA399233 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399238 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA399244 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA399255 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399260 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA399266 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA399272 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA399279 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA399285 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA399292 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA399297 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_templateA399302 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399307 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA399312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA399317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_templateA399322 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA399327 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA399332 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA399337 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA399342 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA399347 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA399352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA399357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA399364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000020000000L});
    public static final BitSet FOLLOW_78_in_templateA399371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_templateA399378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA399384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA399391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA399397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA399403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA399410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA409434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA409440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA409448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_templateA409453 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA409458 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA409463 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA409468 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA409473 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA409478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA409483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA409488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000020000000L});
    public static final BitSet FOLLOW_78_in_templateA409494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_templateA409501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA409507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA409514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA409520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA409526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA409533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA419556 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA419562 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA419569 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA419574 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA419580 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA419585 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA419591 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA419596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA419602 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA419607 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA419613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_83_in_templateA419626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA419632 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA419638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA419645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA419651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA419658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_templateA419663 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA419668 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA419673 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA419678 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA419683 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA419688 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA419694 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA419701 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA419707 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA419714 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA419719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA419724 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_PATHSUID_in_templateA419729 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA419734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_83_in_templateA419747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA419755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000040000000L});
    public static final BitSet FOLLOW_78_in_templateA419761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_templateA419768 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA419773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_templateA419778 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_pack_in_templateA419783 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA419788 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_owner_in_templateA419793 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_group_in_templateA419798 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_perms_in_templateA419803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_83_in_templateA419816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_templateA419824 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA419830 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA419837 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA419842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA419847 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA419852 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA419857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA419863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA419869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA419875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_78_in_templateA419881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_templateA419888 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_owner_in_templateA419893 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_COLON_in_templateA419898 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_group_in_templateA419903 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA419908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_83_in_templateA419921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_templateA419927 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_perms_in_templateA419932 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA419937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA419950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA419956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA419969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA419975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA419981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA419988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4210011 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4210017 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4210024 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4210029 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4210035 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4210040 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4210046 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4210051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA4210057 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4210062 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4210068 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4210074 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA4210081 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4210087 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4210094 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4210099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4210104 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_PATHSUID_in_templateA4210109 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4210114 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4210120 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA4210127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA4210133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA4210140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_templateA4210145 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA4210150 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA4210155 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA4210160 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA4210165 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA4210170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4210175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4210180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000400000000L});
    public static final BitSet FOLLOW_78_in_templateA4210186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_templateA4210193 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4210198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_templateA4210203 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_pack_in_templateA4210208 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_file_in_templateA4210213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4210219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4210226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4210232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4210238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4210245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4310267 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310273 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4310280 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310285 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4310291 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310296 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4310302 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_templateA4310313 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310318 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4310324 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA4310329 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310335 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4310342 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310347 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4310353 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310358 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4310364 = new BitSet(new long[]{0x0000000000000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310369 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_templateA4310375 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310380 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4310386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4310391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4310396 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA4310402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4310409 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310415 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4310422 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4310432 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310437 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4310442 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310447 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4310452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4310457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4310462 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA4310468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4310475 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310481 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4310488 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310495 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA4310500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_templateA4310505 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310511 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310516 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4310521 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310526 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310531 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_VBAR_in_templateA4310536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_templateA4310541 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4310551 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310556 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310561 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_PATHSS_in_templateA4310566 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA4310571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_templateA4310576 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SLASH_in_templateA4310581 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SLASH_in_templateA4310586 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310591 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310596 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA4310601 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310606 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4310611 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310616 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA4310621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_templateA4310626 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_templateA4310636 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310641 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA4310646 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4310651 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA4310656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_templateA4310661 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LGRAF_in_templateA4310666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_169_in_templateA4310671 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_RGRAF_in_templateA4310676 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA4310681 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4310686 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_VBAR_in_templateA4310691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_templateA4310696 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310701 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_templateA4310706 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4310716 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310721 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310726 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310733 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310738 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310743 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310748 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA4310753 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4310758 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_PSINGLE_in_templateA4310763 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_PATHSS_in_templateA4310768 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA4310773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_templateA4310778 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_SLASH_in_templateA4310783 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_PATHP_in_templateA4310788 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_BSLASH_in_templateA4310793 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310798 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA4310803 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310808 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4310813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000104000L});
    public static final BitSet FOLLOW_78_in_templateA4310819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4310826 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310832 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA4310839 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310844 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA4310849 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310854 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4310859 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4310870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4310877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4310883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4310889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4310896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4310902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4310908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_83_in_templateA4310915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4310921 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310926 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4310933 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_templateA4310943 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310948 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4310953 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4310958 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4310963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4310968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4310976 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L});
    public static final BitSet FOLLOW_78_in_templateA4310982 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_templateA4310989 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4310994 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA4310999 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4311004 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4311009 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4311014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4311020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4311027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4311033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4311039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4311046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4311052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4311058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4311065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4411089 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4411095 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4411102 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411107 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4411113 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411118 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4411124 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA4411135 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411140 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4411146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4411152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4411159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4411165 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA4411171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4411178 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4411183 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4411188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4411193 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411198 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4411203 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411208 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4411214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4411220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4411227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4411233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000040000000000L});
    public static final BitSet FOLLOW_78_in_templateA4411239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_templateA4411246 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_templateA4411257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_templateA4411262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_templateA4411267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_templateA4411272 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4411277 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA4411284 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA4411289 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA4411294 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4411305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_78_in_templateA4411312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4411319 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4411324 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4411329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4411334 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411339 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4411344 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411349 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4411355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4411361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4411368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4411374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000800000000000L});
    public static final BitSet FOLLOW_78_in_templateA4411380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_templateA4411387 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4411392 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA4411397 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411402 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4411407 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411412 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411418 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_templateA4411423 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4411435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4411442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4411448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4411454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_83_in_templateA4411461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_templateA4411468 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4411473 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_templateA4411478 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411483 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_old_in_templateA4411488 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411493 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411499 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_rule_placeholder_in_templateA4411504 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4411509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4411516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4411523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4411529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4411536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4411543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4411549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4411555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4411562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4511585 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4511591 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4511598 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511603 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4511609 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511614 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4511620 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA4511631 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511636 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4511642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4511648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4511655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4511661 = new BitSet(new long[]{0x0000004000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4511667 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_LPAR_in_templateA4511674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0001000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4511681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_templateA4511688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_templateA4511693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_templateA4511698 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_83_in_templateA4511704 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_templateA4511711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0008000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4511718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_templateA4511725 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA4511730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_180_in_templateA4511735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4511742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4511749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_181_in_templateA4511755 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4511760 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511765 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4511770 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4511780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_templateA4511785 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4511790 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511795 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4511800 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4511810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_templateA4511815 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4511820 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511825 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4511830 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA4511840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_183_in_templateA4511845 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4511850 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511855 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4511862 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4511874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_78_in_templateA4511881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4511889 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4511894 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_EXCL_in_templateA4511899 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA4511904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA4511909 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_templateA4511919 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511924 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4511929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4511938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4511945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4511951 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_78_in_templateA4511958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_templateA4511965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_templateA4511970 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_templateA4511980 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4511985 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA4511990 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA4511995 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA4512000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4512007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_templateA4512014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4512020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_78_in_templateA4512026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_templateA4512033 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_186_in_templateA4512043 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512048 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_COLON_in_templateA4512053 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_templateA4512063 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512068 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_templateA4512078 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4512090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_78_in_templateA4512097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_128_in_templateA4512103 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_188_in_templateA4512113 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512118 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_templateA4512128 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4512133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4512139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4512146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4512152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4512157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4512164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4512170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4512177 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_78_in_templateA4512184 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_templateA4512190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4512196 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_78_in_templateA4512203 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_RPAR_in_templateA4512209 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DLESS_in_templateA4512214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_templateA4512221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4512227 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_83_in_templateA4512234 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_dirlist_in_templateA4512242 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_perms_in_templateA4512248 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_owner_in_templateA4512253 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_group_in_templateA4512258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4512266 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4512273 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_templateA4512281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4512287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4512294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4512300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4512306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4512313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAR_in_templateA4612337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0001000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4612343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_templateA4612350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_templateA4612355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_181_in_templateA4612360 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_83_in_templateA4612366 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_templateA4612373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4612379 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_110_in_templateA4612385 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4612390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_templateA4612395 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4612400 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA4612405 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA4612410 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA4612415 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_OR_in_templateA4612420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_templateA4612425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4612432 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_83_in_templateA4612439 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_templateA4612445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4612451 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_83_in_templateA4612458 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_RPAR_in_templateA4612465 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DLESS_in_templateA4612470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_templateA4612475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4612481 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_83_in_templateA4612488 = new BitSet(new long[]{0x0C00FE2B01361000L});
    public static final BitSet FOLLOW_dirlist_in_templateA4612496 = new BitSet(new long[]{0xF000000000402000L,0xFEFDDABFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_perms_in_templateA4612502 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_owner_in_templateA4612507 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_group_in_templateA4612512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_83_in_templateA4612520 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4612527 = new BitSet(new long[]{0x0C00FE2B01361000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_templateA4612535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4612541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4612548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4712571 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4712577 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4712584 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4712589 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4712595 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4712600 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4712606 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4712611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA4712617 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4712622 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4712628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4712634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_83_in_templateA4712641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4712647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x4000000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4712653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_templateA4712660 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA4712665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_templateA4712670 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_PATHXWINDOW_in_templateA4712675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_templateA4712681 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_wm_in_templateA4712686 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_priority_in_templateA4712691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4712697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4712704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4712710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4712716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4712723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4812747 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4812753 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4812760 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4812765 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4812771 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4812776 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4812782 = new BitSet(new long[]{0x0000000000000080L,0x0000000000010000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4812787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_templateA4812793 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4812798 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4812804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4812810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_83_in_templateA4812817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4812823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x4000000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4812829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_templateA4812836 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA4812841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_templateA4812846 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_PATHXWINDOW_in_templateA4812851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_templateA4812856 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_wm_in_templateA4812861 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_priority_in_templateA4812866 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA4812871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_templateA4812876 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_PATHXMANAGER_in_templateA4812881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_templateA4812886 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_wmman_in_templateA4812891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4812897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4812904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4812910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4812916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4812923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA4912946 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA4912952 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA4912959 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4912964 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA4912970 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4912975 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA4912981 = new BitSet(new long[]{0x0000000000000080L,0x0000000000800000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4912986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA4912992 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA4912997 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA4913003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4913009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_83_in_templateA4913016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA4913022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x4000000000000000L});
    public static final BitSet FOLLOW_78_in_templateA4913028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_templateA4913035 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_DMINUS_in_templateA4913040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_templateA4913045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_templateA4913050 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_wm_in_templateA4913055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4913061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA4913068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA4913074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA4913080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA4913087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA5013110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000024000L});
    public static final BitSet FOLLOW_78_in_templateA5013116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA5013123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_templateA5013128 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA5013133 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA5013138 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA5013143 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_templateA5013148 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA5013153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA5013158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA5013163 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_templateA5013169 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_cmds_in_templateA5013176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA5013181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA5013187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA5013194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA5113218 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA5113223 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_templateA5113228 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5113233 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA5113238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_templateA5113243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_templateA5113248 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NUMBER_in_templateA5113253 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_GREAT_in_templateA5113258 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_PATHNULL_in_templateA5113263 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_templateA5113268 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5113273 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA5113278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA5113283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA5113288 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_templateA5113294 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_cmds_in_templateA5113301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA5113306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA5113312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA5113319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_templateA5213343 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA5213349 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA5213356 = new BitSet(new long[]{0x2000000000000080L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5213361 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_input_variable_in_templateA5213367 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5213372 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_templateA5213378 = new BitSet(new long[]{0x0000000000000080L,0x0000000200000000L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5213383 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_templateA5213389 = new BitSet(new long[]{0x0000000000000280L});
    public static final BitSet FOLLOW_DQUOTE_in_templateA5213394 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA5213400 = new BitSet(new long[]{0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA5213406 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AND_in_templateA5213413 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA5213419 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_LSBRACK_in_templateA5213426 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_MINUS_in_templateA5213431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_templateA5213436 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_PATHCONFMOD_in_templateA5213441 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_templateA5213446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_templateA5213452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_templateA5213457 = new BitSet(new long[]{0x0000001000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_templateA5213463 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_DOT_in_templateA5213470 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_PATHCONFMOD_in_templateA5213475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA5213481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_83_in_templateA5213488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_templateA5213494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA5213500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_83_in_templateA5213507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_templateA5213513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_templateA5213519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_templateA5213526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHDOCID_in_doc_id13549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_doc_id13561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_doc_id13573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHPACK_in_pack_path13595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_pack13617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_schemas13639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_schemas13651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_dirlist13673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_file13695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_file13707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_old13729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_rule_placeholder13751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_kvers13773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_kvers13785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHKVERS_in_kvers_path13807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_pyver13829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_wm13851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_priority13873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_wmman13895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_cmds13917 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_option_param_in_initparms13940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_initparms13952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_initparms13964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_initparms13976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AP_in_initparms13988 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_nestedCommand_in_initparms13993 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_initparms13998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_initparms14010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_initparms14022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BSLASH_in_initparms14034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PSINGLE_in_initparms14046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_initparms14058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_initparms14070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_centralcat14092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_centralcat14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_centralcat14116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_ordcats14138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHSCRIPT_in_script_path14160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_script14182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_command_in_error_handler14205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_owner14227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_perms14249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_perms14261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_group14283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_function_statement14305 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_function_statement14311 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_id_in_function_statement14318 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_function_statement14324 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_group_in_function_statement14331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_function_statement14343 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_LPAR_in_function_statement14348 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_RPAR_in_function_statement14353 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_function_statement14359 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_group_in_function_statement14366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_group_in_redirection_statement14388 = new BitSet(new long[]{0x007F010000006800L});
    public static final BitSet FOLLOW_redirection_in_redirection_statement14393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_redirection_statement14399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_redirection_statement14406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14429 = new BitSet(new long[]{0x007F010000004800L});
    public static final BitSet FOLLOW_GREAT_in_redirection14436 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DLESS_in_redirection14443 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESS_in_redirection14450 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DGREAT_in_redirection14457 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESSAND_in_redirection14464 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DLESSDASH_in_redirection14471 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESSGREAT_in_redirection14478 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_GREATAND_in_redirection14488 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_ANDGREAT_in_redirection14495 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_CLOBBER_in_redirection14502 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_path_in_redirection14510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_redirection14517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_redirection14524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSAND_in_redirection14537 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_redirection14550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14563 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_LESSAND_in_redirection14568 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_redirection14581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14594 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_redirection14600 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_redirection14606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_redirection14613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATAND_in_redirection14627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAR_in_statement_group14650 = new BitSet(new long[]{0xFC00FEFF41761000L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_statement_group14656 = new BitSet(new long[]{0xFC00FEFF41761000L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_statement_group14663 = new BitSet(new long[]{0xFC00FEFF41761000L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_RPAR_in_statement_group14669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_statement_group14675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement_group14682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LGRAF_in_statement_group14695 = new BitSet(new long[]{0xFC00FE7FC1761000L,0xFEFDDAFFBFAFC07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_statement_group14701 = new BitSet(new long[]{0xFC00FE7FC1761000L,0xFEFDDAFFBFAF807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_statement_group14708 = new BitSet(new long[]{0xFC00FE7FC1761000L,0xFEFDDAFFBFAF807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_83_in_statement_group14715 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_RGRAF_in_statement_group14722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_statement_group14728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement_group14735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_of_commands_in_command_statement14760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_command_statement14766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_command_statement14773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_command_name14798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_command_name14810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_command_name14822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_command_name14834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_nestedCommand14856 = new BitSet(new long[]{0xFC7FFF3F3DFEF802L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_nestedCommand14861 = new BitSet(new long[]{0xFC7FFF3F3DFEF802L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_if_statement_in_control_statement14885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_control_statement14897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_loop_statement14922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_until_statement_in_loop_statement14934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_loop_statement14946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_until_statement14972 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_until_statement14978 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_condition_in_until_statement14985 = new BitSet(new long[]{0x0000000000000000L,0x0000040000084000L});
    public static final BitSet FOLLOW_83_in_until_statement14991 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_78_in_until_statement14998 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_until_statement15005 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_until_statement15011 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_until_statement15018 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_109_in_until_statement15024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_until_statement15030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_until_statement15037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_while_statement15061 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_while_statement15067 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_condition_in_while_statement15074 = new BitSet(new long[]{0x0000000000000000L,0x0000040000084000L});
    public static final BitSet FOLLOW_83_in_while_statement15080 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_78_in_while_statement15087 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_while_statement15094 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_while_statement15100 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_while_statement15107 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_109_in_while_statement15113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_while_statement15119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_while_statement15126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_case_statement15149 = new BitSet(new long[]{0xF000000000400080L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_case_statement15155 = new BitSet(new long[]{0xF000000000400080L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DQUOTE_in_case_statement15163 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_case_statement15170 = new BitSet(new long[]{0x0000000000000080L,0x0000010000000000L});
    public static final BitSet FOLLOW_DQUOTE_in_case_statement15176 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_case_statement15183 = new BitSet(new long[]{0xF000004000400000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_case_statement15189 = new BitSet(new long[]{0xF000004000400000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_body_case_in_case_statement15196 = new BitSet(new long[]{0xF000004000400000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE8FL});
    public static final BitSet FOLLOW_199_in_case_statement15202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_case_statement15208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_case_statement15215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_condition_in_body_case15239 = new BitSet(new long[]{0xFC80FE7F41761002L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_body_case15245 = new BitSet(new long[]{0xFC80FE7F41761002L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_body_case15253 = new BitSet(new long[]{0xFC80FE7F41761002L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_body_case15261 = new BitSet(new long[]{0x0080000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_DSEMI_in_body_case15268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_body_case15275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAR_in_case_condition15299 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_case_condition15305 = new BitSet(new long[]{0x0000008002000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_case_condition15311 = new BitSet(new long[]{0x0000008002000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_VBAR_in_case_condition15319 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_case_condition15324 = new BitSet(new long[]{0x0000008002000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_case_condition15332 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_RPAR_in_case_condition15339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_if_statement15361 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_if_statement15367 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_condition_in_if_statement15374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000184000L});
    public static final BitSet FOLLOW_83_in_if_statement15380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_if_statement15387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_if_statement15394 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFFFDDAFFBFE7C07FL,0xDFFFFFFFFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_if_statement15400 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFFFDDAFFBFE7807FL,0xDFFFFFFFFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_if_statement15407 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFFFDDAFFBFE7807FL,0xDFFFFFFFFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_ifelse_branch_in_if_statement15413 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L,0x0000000100000000L});
    public static final BitSet FOLLOW_else_branch_in_if_statement15419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_if_statement15426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_if_statement15432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_if_statement15439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ifelse_branch15462 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_ifelse_branch15468 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_condition_in_ifelse_branch15475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000184000L});
    public static final BitSet FOLLOW_83_in_ifelse_branch15481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_78_in_ifelse_branch15488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_ifelse_branch15495 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_ifelse_branch15501 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_ifelse_branch15508 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_120_in_else_branch15532 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_else_branch15538 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_else_branch15545 = new BitSet(new long[]{0xFC00FE7F41761002L,0xFEFDDAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_conditional_expr_list_in_condition15568 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_condition15575 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_condition15582 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_condition15589 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_command_expr_list_in_condition15596 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_command_expr_list_in_condition15610 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_condition15617 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_OR_in_condition15624 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_condition15631 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_conditional_expr_list_in_condition15638 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_conditional_expression_in_conditional_expr_list15662 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_conditional_expr_list15669 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_OR_in_conditional_expr_list15676 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_conditional_expr_list15683 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_conditional_expression_in_conditional_expr_list15690 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_LSBRACK_in_command_expr_list15715 = new BitSet(new long[]{0xFC00FE3F01761020L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_EXCL_in_command_expr_list15721 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_command_expr_list15727 = new BitSet(new long[]{0x0000000000010602L});
    public static final BitSet FOLLOW_RSBRACK_in_command_expr_list15732 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_command_expr_list15740 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_command_expr_list15747 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_command_expr_list15754 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_LSBRACK_in_command_expr_list15761 = new BitSet(new long[]{0xFC00FE3F01761020L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_EXCL_in_command_expr_list15767 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_command_expr_list15773 = new BitSet(new long[]{0x0000000000010602L});
    public static final BitSet FOLLOW_RSBRACK_in_command_expr_list15778 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_102_in_for_statement15803 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_78_in_for_statement15809 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_for_statement15816 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_for_statement15821 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_for_statement15827 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDEBFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_path_in_for_statement15834 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDEBFBFAF407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_83_in_for_statement15842 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_78_in_for_statement15849 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_for_statement15856 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7C07FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_78_in_for_statement15862 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_statement_in_for_statement15869 = new BitSet(new long[]{0xFC00FE7F41761000L,0xFEFDFAFFBFA7807FL,0xDFFFFFFEFFFDFFFFL,0x000000000000FF7FL});
    public static final BitSet FOLLOW_109_in_for_statement15875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_78_in_for_statement15881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_for_statement15888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_assignment_statement15911 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_EQU_in_assignment_statement15916 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_params_in_assignment_statement15922 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_LSBRACK_in_conditional_expression15948 = new BitSet(new long[]{0xFC7FFF3F3DFEF8A0L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_EXCL_in_conditional_expression15953 = new BitSet(new long[]{0xFC7FFF3F3DFEF8A0L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_boolean_expression_in_conditional_expression15960 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_command_expression_in_conditional_expression15967 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_RSBRACK_in_conditional_expression15974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression15996 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_boolean_expression16002 = new BitSet(new long[]{0x0100000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression16007 = new BitSet(new long[]{0x0100000000000100L});
    public static final BitSet FOLLOW_EQU_in_boolean_expression16014 = new BitSet(new long[]{0xFC7FFF3F3DFEF880L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_NOTEQU_in_boolean_expression16021 = new BitSet(new long[]{0xFC7FFF3F3DFEF880L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression16027 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_boolean_expression16033 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression16038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression16051 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_boolean_expression16057 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_DQUOTE_in_boolean_expression16062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_command_expression16085 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_DQUOTE_in_command_expression16091 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_command_expression16097 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_DQUOTE_in_command_expression16102 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_assignment_statement_in_simple_command16128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_simple_command16140 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_params_in_simple_command16146 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_DQUOTE_in_params16170 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_PSINGLE_in_params16176 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_params16183 = new BitSet(new long[]{0xFC7FFF3F3DFEF882L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_PSINGLE_in_params16190 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_DQUOTE_in_params16196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_option_param_in_param16221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_param16233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_param16245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redirection_in_param16257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_param16269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_param16281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AP_in_param16293 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_nestedCommand_in_param16298 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_param16303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_param16315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BSLASH_in_param16327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_param16339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PSINGLE_in_param16351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_param16363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_param16375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AP_in_param16387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_option_param16409 = new BitSet(new long[]{0xF000000000400002L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_option_param16414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DMINUS_in_option_param16427 = new BitSet(new long[]{0xF000000000400002L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_option_param16432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_input_variable_in_word16455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_command_variable_in_word16467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shell_variable_in_word16479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_variable_in_word16491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_variable_in_word16503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_variable_in_word16515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_word16527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_pipeline16551 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_simple_command_in_pipeline16558 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_VBAR_in_pipeline16564 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_pipeline16570 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_simple_command_in_pipeline16577 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_pipeline_in_list_of_commands16601 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_list_of_commands16608 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_list_of_commands16615 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_list_of_commands16621 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_asynchronous_in_list_of_commands16635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pipeline_in_asynchronous16657 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_asynchronous16663 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_asynchronous16668 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_asynchronous16676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHP_in_path16700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHSS_in_path16712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHKVERS_in_path16724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHSCRIPT_in_path16736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHOLDSCHEMA_in_path16748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHPACK_in_path16760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHGCONFSCH_in_path16772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHSUID_in_path16784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHXWINDOW_in_path16796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHEMACSINST_in_path16808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHEMACSREM_in_path16820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHXMANAGER_in_path16832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHCONFMOD_in_path16844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHMIME_in_path16856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHDOCID_in_path16868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHCOMPYTH_in_path16880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHNULL_in_path16892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHREL_in_path16904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATH_in_path16916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_var16939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_var16951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_var16963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_var16975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_var16987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_var16999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_var17011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_var17023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_var17035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_var17047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_var17059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_var17071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_var17083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_substitution_variable17105 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LGRAF_in_substitution_variable17110 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_id_in_substitution_variable17115 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_RGRAF_in_substitution_variable17120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARINPUT_in_input_variable17142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_in_command_variable17165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_external_variable17188 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_id_in_external_variable17193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_external_variable17205 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_external_variable17210 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_id_in_external_variable17215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARQMARK_in_special_variable17238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARDOLLAR_in_special_variable17250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAREXCL_in_special_variable17262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARSTAR_in_special_variable17274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARAT_in_special_variable17286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARHOME_in_shell_variable17309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARPATH_in_shell_variable17321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARPS_in_shell_variable17333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_id17355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_id17367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_id17379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_id17392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_id17404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_id17416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_id17428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_id17440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_id17452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_id17464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_id17476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_id17488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_id17500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_id17512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_id17524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_id17536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_id17548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_id17560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_id17572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_id17584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_id17596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_id17608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_id17620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_id17632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_id17644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_id17656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_id17668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_id17680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_id17692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_id17704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_id17716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_id17728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_id17740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_id17752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_id17764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_id17776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_id17788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_id17800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_id17812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_id17824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_id17836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_id17848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_id17860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_id17872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_id17884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_id17896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_id17908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_id17920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_id17932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_id17944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_id17956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_id17968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_id17980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_id17992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_id18004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_id18016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_id18028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_id18040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_id18052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_id18064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_id18076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_id18088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_id18100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_id18112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_id18124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_id18136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_id18149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_id18161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_id18173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_id18185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_id18197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_id18209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_id18221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_id18233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_id18245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_id18257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_id18269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_id18281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_id18293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_id18305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_id18317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_id18329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_id18341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_id18353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_id18365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_id18377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_id18389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_id18401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_id18413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_id18425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_id18437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_id18449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_id18461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_id18473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_id18485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_id18497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_id18509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_in_synpred3_GrammarShellForMancoosi129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_statement_in_synpred4_GrammarShellForMancoosi141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_statement_in_synpred5_GrammarShellForMancoosi153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_statement_in_synpred7_GrammarShellForMancoosi177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA1_in_synpred8_GrammarShellForMancoosi211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA2_in_synpred9_GrammarShellForMancoosi223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA3_in_synpred10_GrammarShellForMancoosi235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA4_in_synpred11_GrammarShellForMancoosi247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA5_in_synpred12_GrammarShellForMancoosi259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA6_in_synpred13_GrammarShellForMancoosi271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA7_in_synpred14_GrammarShellForMancoosi283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA8_in_synpred15_GrammarShellForMancoosi295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA9_in_synpred16_GrammarShellForMancoosi307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA10_in_synpred17_GrammarShellForMancoosi319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA11_in_synpred18_GrammarShellForMancoosi331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA12_13_in_synpred19_GrammarShellForMancoosi343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA14_in_synpred20_GrammarShellForMancoosi355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA15_in_synpred21_GrammarShellForMancoosi367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA16_in_synpred22_GrammarShellForMancoosi380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA17_in_synpred23_GrammarShellForMancoosi392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA18_in_synpred24_GrammarShellForMancoosi404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA19_in_synpred25_GrammarShellForMancoosi416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA20_in_synpred26_GrammarShellForMancoosi428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA21_in_synpred27_GrammarShellForMancoosi440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA22_in_synpred28_GrammarShellForMancoosi452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA23_in_synpred29_GrammarShellForMancoosi464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA24_in_synpred30_GrammarShellForMancoosi476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA25_in_synpred31_GrammarShellForMancoosi488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA26_in_synpred32_GrammarShellForMancoosi500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA27_in_synpred33_GrammarShellForMancoosi512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA28_in_synpred34_GrammarShellForMancoosi524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA29_in_synpred35_GrammarShellForMancoosi536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA32_in_synpred38_GrammarShellForMancoosi572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA33_in_synpred39_GrammarShellForMancoosi584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA34_in_synpred40_GrammarShellForMancoosi596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA35_in_synpred41_GrammarShellForMancoosi608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA36_in_synpred42_GrammarShellForMancoosi620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA37_in_synpred43_GrammarShellForMancoosi632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA38_in_synpred44_GrammarShellForMancoosi644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA39_in_synpred45_GrammarShellForMancoosi656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA40_in_synpred46_GrammarShellForMancoosi668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA41_in_synpred47_GrammarShellForMancoosi680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA42_in_synpred48_GrammarShellForMancoosi692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA43_in_synpred49_GrammarShellForMancoosi704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA44_in_synpred50_GrammarShellForMancoosi716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA45_in_synpred51_GrammarShellForMancoosi728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA47_in_synpred53_GrammarShellForMancoosi752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA48_in_synpred54_GrammarShellForMancoosi764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA49_in_synpred55_GrammarShellForMancoosi776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA50_in_synpred56_GrammarShellForMancoosi788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_templateA51_in_synpred57_GrammarShellForMancoosi800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATHDOCID_in_synpred568_GrammarShellForMancoosi13549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_synpred569_GrammarShellForMancoosi13561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred575_GrammarShellForMancoosi13952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_synpred576_GrammarShellForMancoosi13964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_synpred577_GrammarShellForMancoosi13976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_synpred580_GrammarShellForMancoosi14022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred603_GrammarShellForMancoosi14517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred604_GrammarShellForMancoosi14429 = new BitSet(new long[]{0x007F010000004800L});
    public static final BitSet FOLLOW_GREAT_in_synpred604_GrammarShellForMancoosi14436 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DLESS_in_synpred604_GrammarShellForMancoosi14443 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESS_in_synpred604_GrammarShellForMancoosi14450 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DGREAT_in_synpred604_GrammarShellForMancoosi14457 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESSAND_in_synpred604_GrammarShellForMancoosi14464 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_DLESSDASH_in_synpred604_GrammarShellForMancoosi14471 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_LESSGREAT_in_synpred604_GrammarShellForMancoosi14478 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_GREATAND_in_synpred604_GrammarShellForMancoosi14488 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_ANDGREAT_in_synpred604_GrammarShellForMancoosi14495 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_CLOBBER_in_synpred604_GrammarShellForMancoosi14502 = new BitSet(new long[]{0xFC00FE2B01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_path_in_synpred604_GrammarShellForMancoosi14510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred604_GrammarShellForMancoosi14517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_synpred604_GrammarShellForMancoosi14524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSAND_in_synpred606_GrammarShellForMancoosi14537 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred606_GrammarShellForMancoosi14543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred606_GrammarShellForMancoosi14550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred608_GrammarShellForMancoosi14563 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_LESSAND_in_synpred608_GrammarShellForMancoosi14568 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred608_GrammarShellForMancoosi14574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred608_GrammarShellForMancoosi14581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred611_GrammarShellForMancoosi14594 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_GREATAND_in_synpred611_GrammarShellForMancoosi14600 = new BitSet(new long[]{0x000000000000A000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred611_GrammarShellForMancoosi14606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred611_GrammarShellForMancoosi14613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_synpred624_GrammarShellForMancoosi14861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_synpred646_GrammarShellForMancoosi15245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred647_GrammarShellForMancoosi15253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_synpred648_GrammarShellForMancoosi15261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_synpred652_GrammarShellForMancoosi15311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expr_list_in_synpred673_GrammarShellForMancoosi15568 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_synpred673_GrammarShellForMancoosi15575 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_synpred673_GrammarShellForMancoosi15582 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_synpred673_GrammarShellForMancoosi15589 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_command_expr_list_in_synpred673_GrammarShellForMancoosi15596 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_synpred679_GrammarShellForMancoosi15669 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_OR_in_synpred679_GrammarShellForMancoosi15676 = new BitSet(new long[]{0x0000000000000040L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_synpred679_GrammarShellForMancoosi15683 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_conditional_expression_in_synpred679_GrammarShellForMancoosi15690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred688_GrammarShellForMancoosi15740 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_synpred688_GrammarShellForMancoosi15747 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7407FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_78_in_synpred688_GrammarShellForMancoosi15754 = new BitSet(new long[]{0xFC00FE3F01761060L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_LSBRACK_in_synpred688_GrammarShellForMancoosi15761 = new BitSet(new long[]{0xFC00FE3F01761020L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_EXCL_in_synpred688_GrammarShellForMancoosi15767 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_synpred688_GrammarShellForMancoosi15773 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_RSBRACK_in_synpred688_GrammarShellForMancoosi15778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_expression_in_synpred699_GrammarShellForMancoosi15960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi15996 = new BitSet(new long[]{0xF000000000400000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FE0FL});
    public static final BitSet FOLLOW_word_in_synpred705_GrammarShellForMancoosi16002 = new BitSet(new long[]{0x0100000000000180L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16007 = new BitSet(new long[]{0x0100000000000100L});
    public static final BitSet FOLLOW_EQU_in_synpred705_GrammarShellForMancoosi16014 = new BitSet(new long[]{0xFC7FFF3F3DFEF880L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_NOTEQU_in_synpred705_GrammarShellForMancoosi16021 = new BitSet(new long[]{0xFC7FFF3F3DFEF880L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16027 = new BitSet(new long[]{0xFC7FFF3F3DFEF800L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_param_in_synpred705_GrammarShellForMancoosi16033 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred705_GrammarShellForMancoosi16038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred709_GrammarShellForMancoosi16102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred711_GrammarShellForMancoosi16128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PSINGLE_in_synpred714_GrammarShellForMancoosi16176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_synpred715_GrammarShellForMancoosi16183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PSINGLE_in_synpred716_GrammarShellForMancoosi16190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred717_GrammarShellForMancoosi16196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred719_GrammarShellForMancoosi16233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_synpred720_GrammarShellForMancoosi16245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redirection_in_synpred721_GrammarShellForMancoosi16257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred722_GrammarShellForMancoosi16269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_synpred723_GrammarShellForMancoosi16281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AP_in_synpred724_GrammarShellForMancoosi16293 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_nestedCommand_in_synpred724_GrammarShellForMancoosi16298 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_AP_in_synpred724_GrammarShellForMancoosi16303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_synpred725_GrammarShellForMancoosi16315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_synpred730_GrammarShellForMancoosi16375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred731_GrammarShellForMancoosi16414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_word_in_synpred733_GrammarShellForMancoosi16432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_variable_in_synpred738_GrammarShellForMancoosi16503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_variable_in_synpred739_GrammarShellForMancoosi16515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pipeline_in_synpred745_GrammarShellForMancoosi16601 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AND_in_synpred745_GrammarShellForMancoosi16608 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_OR_in_synpred745_GrammarShellForMancoosi16615 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_synpred745_GrammarShellForMancoosi16621 = new BitSet(new long[]{0x0000000000010402L});
    public static final BitSet FOLLOW_AMPERSAND_in_synpred746_GrammarShellForMancoosi16663 = new BitSet(new long[]{0xFC00FE3F01761000L,0xFEFDDABFBFA7007FL,0xDFFEFFFEFFFDFFFFL,0x000000000000FF0FL});
    public static final BitSet FOLLOW_pipeline_in_synpred746_GrammarShellForMancoosi16668 = new BitSet(new long[]{0x0000000000000002L});

}