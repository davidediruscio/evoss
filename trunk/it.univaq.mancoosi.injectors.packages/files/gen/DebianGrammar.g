grammar DebianGrammar;

options {
	backtrack=true;
	k=1;

	output=template;
}



// Autogenerated import
@header {
	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;
}

// Rules
mainRule returns [Node returnNode] 
:  headerGen+=header ( statementGen+=statement)* 
	{
		// Create return CST Node
		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		mainRuleReturnNode.setKind("mainRule");
	    // Create a CST Node
		if($headerGen != null) {
	        for(Iterator it = $headerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.header_return r = (DebianGrammarParser.header_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("header");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	mainRuleReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$mainRule.returnNode = mainRuleReturnNode;
	}
	;

header returns [Node returnNode] 
:  SHARPGen=SHARP  EXCLGen=EXCL  pathGen+=path  ( paramGen+=param)?  TK_0='\n' 
	{
		// Create return CST Node
		Node headerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		headerReturnNode.setKind("header");
	    // Create a CST Leaf
		if($SHARPGen != null) {
			Leaf SHARPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SHARP", $SHARPGen.text, SHARPGen.getCharPositionInLine(), SHARPGen.getLine());
			headerReturnNode.getChildren().add(SHARPGenLeaf);
		}
	    // Create a CST Leaf
		if($EXCLGen != null) {
			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", $EXCLGen.text, EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
			headerReturnNode.getChildren().add(EXCLGenLeaf);
		}
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	headerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		headerReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$header.returnNode = headerReturnNode;
	}
	;


statement returns [Node returnNode] 
:  templateGen+=template 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($templateGen != null) {
	        for(Iterator it = $templateGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.template_return r = (DebianGrammarParser.template_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("template");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|  command_statementGen+=command_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($command_statementGen != null) {
	        for(Iterator it = $command_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_statement_return r = (DebianGrammarParser.command_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|  control_statementGen+=control_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($control_statementGen != null) {
	        for(Iterator it = $control_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.control_statement_return r = (DebianGrammarParser.control_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("control_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|  loop_statementGen+=loop_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($loop_statementGen != null) {
	        for(Iterator it = $loop_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.loop_statement_return r = (DebianGrammarParser.loop_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("loop_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|  function_statementGen+=function_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($function_statementGen != null) {
	        for(Iterator it = $function_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.function_statement_return r = (DebianGrammarParser.function_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("function_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	|  redirection_statementGen+=redirection_statement 
	{
		// Create return CST Node
		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statementReturnNode.setKind("statement");
	    // Create a CST Node
		if($redirection_statementGen != null) {
	        for(Iterator it = $redirection_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.redirection_statement_return r = (DebianGrammarParser.redirection_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("redirection_statement");
	            	statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$statement.returnNode = statementReturnNode;
	}
	;

template returns [Node returnNode] 
:  templateA1Gen+=templateA1 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA1Gen != null) {
	        for(Iterator it = $templateA1Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA1_return r = (DebianGrammarParser.templateA1_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA1");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA2Gen+=templateA2 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA2Gen != null) {
	        for(Iterator it = $templateA2Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA2_return r = (DebianGrammarParser.templateA2_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA2");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA3Gen+=templateA3 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA3Gen != null) {
	        for(Iterator it = $templateA3Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA3_return r = (DebianGrammarParser.templateA3_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA3");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA4Gen+=templateA4 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA4Gen != null) {
	        for(Iterator it = $templateA4Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA4_return r = (DebianGrammarParser.templateA4_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA4");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA5Gen+=templateA5 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA5Gen != null) {
	        for(Iterator it = $templateA5Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA5_return r = (DebianGrammarParser.templateA5_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA5");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA6Gen+=templateA6 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA6Gen != null) {
	        for(Iterator it = $templateA6Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA6_return r = (DebianGrammarParser.templateA6_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA6");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA7Gen+=templateA7 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA7Gen != null) {
	        for(Iterator it = $templateA7Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA7_return r = (DebianGrammarParser.templateA7_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA7");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA8Gen+=templateA8 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA8Gen != null) {
	        for(Iterator it = $templateA8Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA8_return r = (DebianGrammarParser.templateA8_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA8");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA9Gen+=templateA9 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA9Gen != null) {
	        for(Iterator it = $templateA9Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA9_return r = (DebianGrammarParser.templateA9_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA9");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA10Gen+=templateA10 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA10Gen != null) {
	        for(Iterator it = $templateA10Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA10_return r = (DebianGrammarParser.templateA10_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA10");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA11Gen+=templateA11 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA11Gen != null) {
	        for(Iterator it = $templateA11Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA11_return r = (DebianGrammarParser.templateA11_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA11");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA12_13Gen+=templateA12_13 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA12_13Gen != null) {
	        for(Iterator it = $templateA12_13Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA12_13_return r = (DebianGrammarParser.templateA12_13_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA12_13");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA14Gen+=templateA14 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA14Gen != null) {
	        for(Iterator it = $templateA14Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA14_return r = (DebianGrammarParser.templateA14_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA14");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA15Gen+=templateA15 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA15Gen != null) {
	        for(Iterator it = $templateA15Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA15_return r = (DebianGrammarParser.templateA15_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA15");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}	
	|  templateA16Gen+=templateA16 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA16Gen != null) {
	        for(Iterator it = $templateA16Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA16_return r = (DebianGrammarParser.templateA16_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA16");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA17Gen+=templateA17 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA17Gen != null) {
	        for(Iterator it = $templateA17Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA17_return r = (DebianGrammarParser.templateA17_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA17");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA18Gen+=templateA18 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA18Gen != null) {
	        for(Iterator it = $templateA18Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA18_return r = (DebianGrammarParser.templateA18_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA18");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA19Gen+=templateA19 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA19Gen != null) {
	        for(Iterator it = $templateA19Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA19_return r = (DebianGrammarParser.templateA19_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA19");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA20Gen+=templateA20 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA20Gen != null) {
	        for(Iterator it = $templateA20Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA20_return r = (DebianGrammarParser.templateA20_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA20");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA21Gen+=templateA21 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA21Gen != null) {
	        for(Iterator it = $templateA21Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA21_return r = (DebianGrammarParser.templateA21_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA21");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA22Gen+=templateA22 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA22Gen != null) {
	        for(Iterator it = $templateA22Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA22_return r = (DebianGrammarParser.templateA22_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA22");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA23Gen+=templateA23 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA23Gen != null) {
	        for(Iterator it = $templateA23Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA23_return r = (DebianGrammarParser.templateA23_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA23");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA24Gen+=templateA24 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA24Gen != null) {
	        for(Iterator it = $templateA24Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA24_return r = (DebianGrammarParser.templateA24_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA24");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA25Gen+=templateA25 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA25Gen != null) {
	        for(Iterator it = $templateA25Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA25_return r = (DebianGrammarParser.templateA25_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA25");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA26Gen+=templateA26 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA26Gen != null) {
	        for(Iterator it = $templateA26Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA26_return r = (DebianGrammarParser.templateA26_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA26");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA27Gen+=templateA27 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA27Gen != null) {
	        for(Iterator it = $templateA27Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA27_return r = (DebianGrammarParser.templateA27_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA27");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA28Gen+=templateA28 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA28Gen != null) {
	        for(Iterator it = $templateA28Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA28_return r = (DebianGrammarParser.templateA28_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA28");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA29Gen+=templateA29 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA29Gen != null) {
	        for(Iterator it = $templateA29Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA29_return r = (DebianGrammarParser.templateA29_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA29");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA30Gen+=templateA30 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA30Gen != null) {
	        for(Iterator it = $templateA30Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA30_return r = (DebianGrammarParser.templateA30_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA30");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA31Gen+=templateA31 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA31Gen != null) {
	        for(Iterator it = $templateA31Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA31_return r = (DebianGrammarParser.templateA31_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA31");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA32Gen+=templateA32 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA32Gen != null) {
	        for(Iterator it = $templateA32Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA32_return r = (DebianGrammarParser.templateA32_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA32");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA33Gen+=templateA33 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA33Gen != null) {
	        for(Iterator it = $templateA33Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA33_return r = (DebianGrammarParser.templateA33_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA33");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA34Gen+=templateA34 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA34Gen != null) {
	        for(Iterator it = $templateA34Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA34_return r = (DebianGrammarParser.templateA34_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA34");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA35Gen+=templateA35 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA35Gen != null) {
	        for(Iterator it = $templateA35Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA35_return r = (DebianGrammarParser.templateA35_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA35");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA36Gen+=templateA36 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA36Gen != null) {
	        for(Iterator it = $templateA36Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA36_return r = (DebianGrammarParser.templateA36_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA36");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA37Gen+=templateA37 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA37Gen != null) {
	        for(Iterator it = $templateA37Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA37_return r = (DebianGrammarParser.templateA37_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA37");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA38Gen+=templateA38 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA38Gen != null) {
	        for(Iterator it = $templateA38Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA38_return r = (DebianGrammarParser.templateA38_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA38");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA39Gen+=templateA39 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA39Gen != null) {
	        for(Iterator it = $templateA39Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA39_return r = (DebianGrammarParser.templateA39_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA39");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA40Gen+=templateA40 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA40Gen != null) {
	        for(Iterator it = $templateA40Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA40_return r = (DebianGrammarParser.templateA40_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA40");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA41Gen+=templateA41 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA41Gen != null) {
	        for(Iterator it = $templateA41Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA41_return r = (DebianGrammarParser.templateA41_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA41");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA42Gen+=templateA42 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA42Gen != null) {
	        for(Iterator it = $templateA42Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA42_return r = (DebianGrammarParser.templateA42_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA42");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA43Gen+=templateA43 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA43Gen != null) {
	        for(Iterator it = $templateA43Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA43_return r = (DebianGrammarParser.templateA43_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA43");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA44Gen+=templateA44 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA44Gen != null) {
	        for(Iterator it = $templateA44Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA44_return r = (DebianGrammarParser.templateA44_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA44");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA45Gen+=templateA45 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA45Gen != null) {
	        for(Iterator it = $templateA45Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA45_return r = (DebianGrammarParser.templateA45_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA45");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA46Gen+=templateA46 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA46Gen != null) {
	        for(Iterator it = $templateA46Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA46_return r = (DebianGrammarParser.templateA46_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA46");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA47Gen+=templateA47 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA47Gen != null) {
	        for(Iterator it = $templateA47Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA47_return r = (DebianGrammarParser.templateA47_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA47");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA48Gen+=templateA48 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA48Gen != null) {
	        for(Iterator it = $templateA48Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA48_return r = (DebianGrammarParser.templateA48_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA48");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA49Gen+=templateA49 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA49Gen != null) {
	        for(Iterator it = $templateA49Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA49_return r = (DebianGrammarParser.templateA49_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA49");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA50Gen+=templateA50 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA50Gen != null) {
	        for(Iterator it = $templateA50Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA50_return r = (DebianGrammarParser.templateA50_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA50");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA51Gen+=templateA51 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA51Gen != null) {
	        for(Iterator it = $templateA51Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA51_return r = (DebianGrammarParser.templateA51_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA51");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	|  templateA52Gen+=templateA52 
	{
		// Create return CST Node
		Node templateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateReturnNode.setKind("template");
	    // Create a CST Node
		if($templateA52Gen != null) {
	        for(Iterator it = $templateA52Gen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.templateA52_return r = (DebianGrammarParser.templateA52_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("templateA52");
	            	templateReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$template.returnNode = templateReturnNode;
	}
	;

templateA1 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='update-desktop-database'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='update-desktop-database'  MINUSGen=MINUS  TK_11='q' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA1ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA1ReturnNode.setKind("templateA1");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA1ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA1ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA1ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA1ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA1ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA1ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA1ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA1ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA1ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA1ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA1ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA1ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA1ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA1ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA1ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA1ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA1.returnNode = templateA1ReturnNode;
	}
	;

templateA2 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='update-desktop-database'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='update-desktop-database'  MINUSGen=MINUS  TK_11='q' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA2ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA2ReturnNode.setKind("templateA2");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA2ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA2ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA2ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA2ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA2ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA2ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA2ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA2ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA2ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA2ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA2ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA2ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA2ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA2ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA2ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA2ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA2.returnNode = templateA2ReturnNode;
	}
	;

templateA3 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='install-docs'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='install-docs'  MINUSGen=MINUS  TK_11='i'  doc_idGen+=doc_id ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA3ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA3ReturnNode.setKind("templateA3");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA3ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA3ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA3ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA3ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA3ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA3ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA3ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA3ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA3ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA3ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA3ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA3ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA3ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA3ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA3ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Node
		if($doc_idGen != null) {
	        for(Iterator it = $doc_idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.doc_id_return r = (DebianGrammarParser.doc_id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("doc_id");
	            	templateA3ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA3ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA3.returnNode = templateA3ReturnNode;
	}
	;

templateA4 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  ORGen=OR ( TK_3='\n')?  LSBRACKGen_1=LSBRACK  DQUOTEGen_4=DQUOTE?  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE?  EQUGen_1=EQU  DQUOTEGen_6=DQUOTE?  TK_4='upgrade'  DQUOTEGen_7=DQUOTE?  RSBRACKGen_1=RSBRACK ( TK_5='\n')?  ANDGen=AND ( TK_6='\n')?  TK_7='which'  TK_8='install-docs'  GREATGen=GREAT  PATHNULLGen=PATHNULL
	 NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_9=';'  TK_10='then' ( TK_11='\n')?  TK_12='install-docs'  MINUSGen=MINUS  TK_13='r'  doc_idGen+=doc_id ( TK_14='\n' |  TK_15=';')  TK_16='fi' ( TK_17='\n' |  TK_18=';') 
	{
		// Create return CST Node
		Node templateA4ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA4ReturnNode.setKind("templateA4");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA4ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA4ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA4ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA4ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA4ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA4ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA4ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA4ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA4ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA4ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA4ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA4ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA4ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA4ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA4ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA4ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA4ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Node
		if($doc_idGen != null) {
	        for(Iterator it = $doc_idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.doc_id_return r = (DebianGrammarParser.doc_id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("doc_id");
	            	templateA4ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA4ReturnNode.getChildren().add(TK_18Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA4.returnNode = templateA4ReturnNode;
	}
	;
	
templateA5 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='x'  PATHEMACSINSTGen=PATHEMACSINST  RSBRACKGen_1=RSBRACK  TK_6=';'  TK_7='then' ( TK_8='\n')? 
	 PATHEMACSINSTGen_1=PATHEMACSINST  packGen+=pack ( TK_9='\n' |  TK_10=';')  TK_11='fi' ( TK_12='\n' |  TK_13=';') 
	{
		// Create return CST Node
		Node templateA5ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA5ReturnNode.setKind("templateA5");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA5ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA5ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA5ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA5ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA5ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA5ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA5ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA5ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA5ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA5ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA5ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHEMACSINSTGen != null) {
			Leaf PATHEMACSINSTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", $PATHEMACSINSTGen.text, PATHEMACSINSTGen.getCharPositionInLine(), PATHEMACSINSTGen.getLine());
			templateA5ReturnNode.getChildren().add(PATHEMACSINSTGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA5ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHEMACSINSTGen_1 != null) {
			Leaf PATHEMACSINSTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", $PATHEMACSINSTGen_1.text, PATHEMACSINSTGen_1.getCharPositionInLine(), PATHEMACSINSTGen_1.getLine());
			templateA5ReturnNode.getChildren().add(PATHEMACSINSTGen_1Leaf);
		}
	    // Create a CST Node
		if($packGen != null) {
	        for(Iterator it = $packGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_return r = (DebianGrammarParser.pack_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack");
	            	templateA5ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA5ReturnNode.getChildren().add(TK_13Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA5.returnNode = templateA5ReturnNode;
	}
	;

templateA6 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  PATHEMACSREMGen=PATHEMACSREM  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?   PATHEMACSREMGen_1=PATHEMACSREM  packGen+=pack ( TK_6='\n' |  TK_7=';')  TK_8='fi' ( TK_9='\n' |  TK_10=';') 
	{
		// Create return CST Node
		Node templateA6ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA6ReturnNode.setKind("templateA6");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA6ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA6ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHEMACSREMGen != null) {
			Leaf PATHEMACSREMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", $PATHEMACSREMGen.text, PATHEMACSREMGen.getCharPositionInLine(), PATHEMACSREMGen.getLine());
			templateA6ReturnNode.getChildren().add(PATHEMACSREMGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA6ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHEMACSREMGen_1 != null) {
			Leaf PATHEMACSREMGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", $PATHEMACSREMGen_1.text, PATHEMACSREMGen_1.getCharPositionInLine(), PATHEMACSREMGen_1.getLine());
			templateA6ReturnNode.getChildren().add(PATHEMACSREMGen_1Leaf);
		}
	    // Create a CST Node
		if($packGen != null) {
	        for(Iterator it = $packGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_return r = (DebianGrammarParser.pack_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack");
	            	templateA6ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA6ReturnNode.getChildren().add(TK_10Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA6.returnNode = templateA6ReturnNode;
	}
	;

templateA7 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='update-gconf-defaults'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='update-gconf-defaults' ( TK_11='\n' |  TK_12=';')  TK_13='fi' ( TK_14='\n' |  TK_15=';') 
	{
		// Create return CST Node
		Node templateA7ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA7ReturnNode.setKind("templateA7");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA7ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA7ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA7ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA7ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA7ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA7ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA7ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA7ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA7ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA7ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA7ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA7ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA7ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA7ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA7ReturnNode.getChildren().add(TK_15Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA7.returnNode = templateA7ReturnNode;
	}
	;
	
templateA8 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?   TK_2='which'  TK_3='update-gconf-defaults'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_4=';'  TK_5='then' ( TK_6='\n')?  TK_7='update-gconf-defaults' ( TK_8='\n' |  TK_9=';')  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA8ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA8ReturnNode.setKind("templateA8");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA8ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA8ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA8ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA8ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA8ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA8ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA8.returnNode = templateA8ReturnNode;
	}
	;

templateA9 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK   TK_3=';'  TK_4='then' ( TK_5='\n')?   TK_6='gconf-schemas'  DMINUSGen=DMINUS  TK_7='register'  schemasGen+=schemas+ ( TK_8='\n' |  TK_9=';')  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA9ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA9ReturnNode.setKind("templateA9");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA9ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA9ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA9ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA9ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA9ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA9ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA9ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA9ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA9ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Node
		if($schemasGen != null) {
	        for(Iterator it = $schemasGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.schemas_return r = (DebianGrammarParser.schemas_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schemas");
	            	templateA9ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA9ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA9.returnNode = templateA9ReturnNode;
	}
	;

templateA10 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  ORGen=OR ( TK_3='\n')?  LSBRACKGen_1=LSBRACK  DQUOTEGen_4=DQUOTE?  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE?  EQUGen_1=EQU  DQUOTEGen_6=DQUOTE?  TK_4='upgrade'  DQUOTEGen_7=DQUOTE?  RSBRACKGen_1=RSBRACK  TK_5=';'  TK_6='then' ( TK_7='\n')?   TK_8='gconf-schemas'  DMINUSGen=DMINUS  TK_9='unregister'  schemasGen+=schemas+ ( TK_10='\n' |  TK_11=';')  TK_12='fi' ( TK_13='\n' |  TK_14=';') 
	{
		// Create return CST Node
		Node templateA10ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA10ReturnNode.setKind("templateA10");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA10ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA10ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA10ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA10ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA10ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA10ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA10ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA10ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA10ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA10ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA10ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Node
		if($schemasGen != null) {
	        for(Iterator it = $schemasGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.schemas_return r = (DebianGrammarParser.schemas_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schemas");
	            	templateA10ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA10ReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA10.returnNode = templateA10ReturnNode;
	}
	;

templateA11 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='purge'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK   TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='OLD_DIR'  EQUGen_1=EQU   PATHGCONFSCHGen=PATHGCONFSCH ( TK_7='\n')?  TK_8='SCHEMA_FILES'  EQUGen_2=EQU  DQUOTEGen_4=DQUOTE  schemasGen+=schemas+  DQUOTEGen_5=DQUOTE  TK_9='\n'  TK_10='if' ( TK_11='\n')? 
	 LSBRACKGen_1=LSBRACK ( TK_12='\n')?  MINUSGen=MINUS  TK_13='d'  TK_14='$OLD_DIR'  RSBRACKGen_1=RSBRACK  TK_15=';'  TK_16='then' ( TK_17='\n')?  TK_18='for' ( TK_19='\n')?  TK_20='SCHEMA' ( TK_21='\n')?  TK_22='in' ( TK_23='\n')?  TK_24='$SCHEMA_FILES'  TK_25=';'  TK_26='do'  TK_27='\n'   TK_28='rm'  MINUSGen_1=MINUS  TK_29='f'  PATHOLDSCHEMAGen=PATHOLDSCHEMA  TK_30='\n'  TK_31='done' ( TK_32='\n' |  TK_33=';')   TK_34='rmdir'  MINUSGen_2=MINUS  TK_35='p' 
	 DMINUSGen=DMINUS  TK_36='ignore-fail-on-non-empty'  TK_37='$OLD_DIR' ( TK_38='\n' |  TK_39=';')  TK_40='fi' ( TK_41='\n' |  TK_42=';')  TK_43='fi' ( TK_44='\n' |  TK_45=';') 
	{
		// Create return CST Node
		Node templateA11ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA11ReturnNode.setKind("templateA11");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA11ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA11ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA11ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA11ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA11ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($PATHGCONFSCHGen != null) {
			Leaf PATHGCONFSCHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHGCONFSCH", $PATHGCONFSCHGen.text, PATHGCONFSCHGen.getCharPositionInLine(), PATHGCONFSCHGen.getLine());
			templateA11ReturnNode.getChildren().add(PATHGCONFSCHGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_2 != null) {
			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_2.text, EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
			templateA11ReturnNode.getChildren().add(EQUGen_2Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($schemasGen != null) {
	        for(Iterator it = $schemasGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.schemas_return r = (DebianGrammarParser.schemas_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("schemas");
	            	templateA11ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA11ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA11ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA11ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA11ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA11ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHOLDSCHEMAGen != null) {
			Leaf PATHOLDSCHEMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHOLDSCHEMA", $PATHOLDSCHEMAGen.text, PATHOLDSCHEMAGen.getCharPositionInLine(), PATHOLDSCHEMAGen.getLine());
			templateA11ReturnNode.getChildren().add(PATHOLDSCHEMAGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA11ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA11ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_40Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_41 != null) {
			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_41.text, TK_41.getCharPositionInLine(), TK_41.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_41Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_42 != null) {
			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_42.text, TK_42.getCharPositionInLine(), TK_42.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_42Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_43 != null) {
			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_43.text, TK_43.getCharPositionInLine(), TK_43.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_43Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_44 != null) {
			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_44.text, TK_44.getCharPositionInLine(), TK_44.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_44Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_45 != null) {
			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_45.text, TK_45.getCharPositionInLine(), TK_45.getLine());
	 		templateA11ReturnNode.getChildren().add(TK_45Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA11.returnNode = templateA11ReturnNode;
	}
	; 

templateA12_13 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?   TK_2='which'  TK_3='update-icon-caches'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_4=';'  TK_5='then' ( TK_6='\n')?  TK_7='update-icon-caches' ( dirlistGen+=dirlist ( TK_8='\n' |  TK_9=';')?)+  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA12_13ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA12_13ReturnNode.setKind("templateA12_13");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA12_13ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA12_13ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA12_13ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA12_13ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA12_13ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_7Leaf);
	 	}

		// Create a special CST Node for terminal dirlistGen aggregation
		if($dirlistGen != null) {
	    for(int pos = 0; pos < $dirlistGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($dirlistGen != null) {		
	    	DebianGrammarParser.dirlist_return r = (DebianGrammarParser.dirlist_return) $dirlistGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("dirlist");
	    		templateA12_13ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_9Leaf);
	 	}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA12_13ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA12_13.returnNode = templateA12_13ReturnNode;
	}
	;
	
templateA14 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK   TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='install-info'  DMINUSGen=DMINUS  TK_7='quiet'  fileGen+=file ( TK_8='\n' |  TK_9=';')  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA14ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA14ReturnNode.setKind("templateA14");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA14ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA14ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA14ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA14ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA14ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA14ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA14ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA14ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA14ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Node
		if($fileGen != null) {
	        for(Iterator it = $fileGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA14ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA14ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA14.returnNode = templateA14ReturnNode;
	}
	;
	
templateA15 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ORGen=OR ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  DQUOTEGen_4=DQUOTE?  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE?  EQUGen_1=EQU  DQUOTEGen_6=DQUOTE?  TK_5='upgrade'  DQUOTEGen_7=DQUOTE?  RSBRACKGen_1=RSBRACK  TK_6=';' 
	 TK_7='then' ( TK_8='\n')?  TK_9='install-info'  DMINUSGen=DMINUS  TK_10='quiet'  DMINUSGen_1=DMINUS  TK_11='remove'  fileGen+=file ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA15ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA15ReturnNode.setKind("templateA15");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA15ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA15ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA15ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA15ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA15ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA15ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA15ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA15ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA15ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA15ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA15ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_1 != null) {
			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_1.text, DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
			templateA15ReturnNode.getChildren().add(DMINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Node
		if($fileGen != null) {
	        for(Iterator it = $fileGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA15ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA15ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA15.returnNode = templateA15ReturnNode;
	}
	;

templateA16 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  script_pathGen+=script_path  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='update-rc.d'  scriptGen+=script  initparmsGen+=initparms+  GREATGen=GREAT  PATHNULLGen=PATHNULL  ORGen=OR  error_handlerGen+=error_handler ( TK_7='\n' |  TK_8=';')   TK_9='fi' ( TK_10='\n' |  TK_11=';') 
	{
		// Create return CST Node
		Node templateA16ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA16ReturnNode.setKind("templateA16");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA16ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA16ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA16ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($script_pathGen != null) {
	        for(Iterator it = $script_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA16ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA16ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA16ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA16ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($initparmsGen != null) {
	        for(Iterator it = $initparmsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.initparms_return r = (DebianGrammarParser.initparms_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("initparms");
	            	templateA16ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA16ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA16ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA16ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA16ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA16ReturnNode.getChildren().add(TK_11Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA16.returnNode = templateA16ReturnNode;
	} 
	;

templateA17 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  script_pathGen+=script_path  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='update-rc.d'  scriptGen+=script  initparmsGen+=initparms+  GREATGen=GREAT  PATHNULLGen=PATHNULL ( TK_7='\n' |  TK_8=';') 
	 TK_9='if' ( TK_10='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen_1=MINUS  TK_11='n'  DQUOTEGen_2=DQUOTE  input_variableGen+=input_variable  DQUOTEGen_3=DQUOTE  RSBRACKGen_1=RSBRACK  TK_12=';'  TK_13='then' ( TK_14='\n')?  UNDERSCOREGen=UNDERSCORE  TK_15='dh_action'  EQUGen=EQU  TK_16='restart'  ( TK_17='\n')?  TK_18='else'  ( TK_19='\n')?   UNDERSCOREGen_1=UNDERSCORE  TK_20='dh_action'  EQUGen_1=EQU  TK_21='start'  ( TK_22='\n' |  TK_23=';')  TK_24='fi' ( TK_25='\n' |  TK_26=';') 
	 TK_27='if' ( TK_28='\n')?  LSBRACKGen_2=LSBRACK  MINUSGen_2=MINUS  TK_29='x'  DQUOTEGen_4=DQUOTE  APGen=AP   TK_30='which'  TK_31='invoke-rc.d'  NUMBERGen=NUMBER  GREATGen_1=GREAT  PATHNULLGen_1=PATHNULL  APGen_1=AP  DQUOTEGen_5=DQUOTE  RSBRACKGen_2=RSBRACK  TK_32=';'  TK_33='then' ( TK_34='\n')?   TK_35='invoke-rc.d'  scriptGen_1+=script  TK_36='$_dh_action'  ORGen=OR  error_handlerGen+=error_handler ( TK_37='\n')? 
	 TK_38='else' ( TK_39='\n')?  script_pathGen_1+=script_path  TK_40='$_dh_action'  ORGen_1=OR  error_handlerGen_1+=error_handler  ( TK_41='\n' |  TK_42=';')   TK_43='fi'  ( TK_44='\n' |  TK_45=';')  TK_46='fi' ( TK_47='\n' |  TK_48=';') 
	{
		// Create return CST Node
		Node templateA17ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA17ReturnNode.setKind("templateA17");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA17ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA17ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($script_pathGen != null) {
	        for(Iterator it = $script_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA17ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($initparmsGen != null) {
	        for(Iterator it = $initparmsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.initparms_return r = (DebianGrammarParser.initparms_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("initparms");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA17ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA17ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA17ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA17ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA17ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Leaf
		if($UNDERSCOREGen != null) {
			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", $UNDERSCOREGen.text, UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
			templateA17ReturnNode.getChildren().add(UNDERSCOREGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA17ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Leaf
		if($UNDERSCOREGen_1 != null) {
			Leaf UNDERSCOREGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", $UNDERSCOREGen_1.text, UNDERSCOREGen_1.getCharPositionInLine(), UNDERSCOREGen_1.getLine());
			templateA17ReturnNode.getChildren().add(UNDERSCOREGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA17ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA17ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA17ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA17ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA17ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen_1 != null) {
			Leaf GREATGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen_1.text, GREATGen_1.getCharPositionInLine(), GREATGen_1.getLine());
			templateA17ReturnNode.getChildren().add(GREATGen_1Leaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen_1 != null) {
			Leaf PATHNULLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen_1.text, PATHNULLGen_1.getCharPositionInLine(), PATHNULLGen_1.getLine());
			templateA17ReturnNode.getChildren().add(PATHNULLGen_1Leaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA17ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA17ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA17ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen_1 != null) {
	        for(Iterator it = $scriptGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA17ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a CST Node
		if($script_pathGen_1 != null) {
	        for(Iterator it = $script_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_40Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen_1 != null) {
			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen_1.text, ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
			templateA17ReturnNode.getChildren().add(ORGen_1Leaf);
		}
	    // Create a CST Node
		if($error_handlerGen_1 != null) {
	        for(Iterator it = $error_handlerGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA17ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_41 != null) {
			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_41.text, TK_41.getCharPositionInLine(), TK_41.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_41Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_42 != null) {
			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_42.text, TK_42.getCharPositionInLine(), TK_42.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_42Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_43 != null) {
			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_43.text, TK_43.getCharPositionInLine(), TK_43.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_43Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_44 != null) {
			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_44.text, TK_44.getCharPositionInLine(), TK_44.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_44Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_45 != null) {
			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_45.text, TK_45.getCharPositionInLine(), TK_45.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_45Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_46 != null) {
			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_46.text, TK_46.getCharPositionInLine(), TK_46.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_46Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_47 != null) {
			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_47.text, TK_47.getCharPositionInLine(), TK_47.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_47Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_48 != null) {
			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_48.text, TK_48.getCharPositionInLine(), TK_48.getLine());
	 		templateA17ReturnNode.getChildren().add(TK_48Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA17.returnNode = templateA17ReturnNode;
	} 
	;

templateA18 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  script_pathGen+=script_path  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  ANDGen=AND   LSBRACKGen_1=LSBRACK  DQUOTEGen_2=DQUOTE  input_variableGen+=input_variable  DQUOTEGen_3=DQUOTE  EQUGen=EQU  TK_3='remove'  RSBRACKGen_1=RSBRACK  TK_4=';' 
	 TK_5='then' ( TK_6='\n')?   TK_7='if' ( TK_8='\n')?  LSBRACKGen_2=LSBRACK  MINUSGen_1=MINUS  TK_9='x'  DQUOTEGen_4=DQUOTE  APGen=AP   TK_10='which'  TK_11='invoke-rc.d'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_5=DQUOTE  RSBRACKGen_2=RSBRACK  TK_12=';'  TK_13='then' ( TK_14='\n')?   TK_15='invoke-rc.d'  scriptGen+=script  TK_16='stop'  ORGen=OR  error_handlerGen+=error_handler ( TK_17='\n')? 
	 TK_18='else' ( TK_19='\n')?  script_pathGen_1+=script_path  TK_20='stop'  ORGen_1=OR  error_handlerGen_1+=error_handler   TK_21='fi' ( TK_22='\n' |  TK_23=';')  TK_24='fi' ( TK_25='\n' |  TK_26=';') 
	{
		// Create return CST Node
		Node templateA18ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA18ReturnNode.setKind("templateA18");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA18ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA18ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($script_pathGen != null) {
	        for(Iterator it = $script_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA18ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA18ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA18ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA18ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA18ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA18ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA18ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA18ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA18ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA18ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA18ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA18ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA18ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA18ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA18ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Node
		if($script_pathGen_1 != null) {
	        for(Iterator it = $script_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen_1 != null) {
			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen_1.text, ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
			templateA18ReturnNode.getChildren().add(ORGen_1Leaf);
		}
	    // Create a CST Node
		if($error_handlerGen_1 != null) {
	        for(Iterator it = $error_handlerGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA18ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA18ReturnNode.getChildren().add(TK_26Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA18.returnNode = templateA18ReturnNode;
	} 
	;

templateA19 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  script_pathGen+=script_path  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='update-rc.d'  scriptGen+=script  initparmsGen+=initparms+  GREATGen=GREAT  PATHNULLGen=PATHNULL ( TK_7='\n' |  TK_8=';')  
	 TK_9='if' ( TK_10='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen_1=MINUS  TK_11='x'  DQUOTEGen_2=DQUOTE  APGen=AP   TK_12='which'  TK_13='invoke-rc.d'  NUMBERGen=NUMBER  GREATGen_1=GREAT  PATHNULLGen_1=PATHNULL  APGen_1=AP  DQUOTEGen_3=DQUOTE  RSBRACKGen_1=RSBRACK  TK_14=';'  TK_15='then' ( TK_16='\n')?   TK_17='invoke-rc.d'  scriptGen_1+=script  TK_18='start'  ORGen=OR  error_handlerGen+=error_handler ( TK_19='\n')? 
	 TK_20='else' ( TK_21='\n')?  script_pathGen_1+=script_path  TK_22='start'  ORGen_1=OR  error_handlerGen_1+=error_handler  ( TK_23='\n' |  TK_24=';')  TK_25='fi' ( TK_26='\n' |  TK_27=';')  TK_28='fi' ( TK_29='\n' |  TK_30=';') 
	{
		// Create return CST Node
		Node templateA19ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA19ReturnNode.setKind("templateA19");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA19ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA19ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA19ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($script_pathGen != null) {
	        for(Iterator it = $script_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA19ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA19ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($initparmsGen != null) {
	        for(Iterator it = $initparmsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.initparms_return r = (DebianGrammarParser.initparms_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("initparms");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA19ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA19ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA19ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA19ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA19ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA19ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA19ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen_1 != null) {
			Leaf GREATGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen_1.text, GREATGen_1.getCharPositionInLine(), GREATGen_1.getLine());
			templateA19ReturnNode.getChildren().add(GREATGen_1Leaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen_1 != null) {
			Leaf PATHNULLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen_1.text, PATHNULLGen_1.getCharPositionInLine(), PATHNULLGen_1.getLine());
			templateA19ReturnNode.getChildren().add(PATHNULLGen_1Leaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA19ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA19ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA19ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen_1 != null) {
	        for(Iterator it = $scriptGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA19ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a CST Node
		if($script_pathGen_1 != null) {
	        for(Iterator it = $script_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen_1 != null) {
			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen_1.text, ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
			templateA19ReturnNode.getChildren().add(ORGen_1Leaf);
		}
	    // Create a CST Node
		if($error_handlerGen_1 != null) {
	        for(Iterator it = $error_handlerGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA19ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA19ReturnNode.getChildren().add(TK_30Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA19.returnNode = templateA19ReturnNode;
	} 
	;

templateA20 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  script_pathGen+=script_path  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='if' ( TK_7='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen_1=MINUS  TK_8='x'  DQUOTEGen_2=DQUOTE  APGen=AP   TK_9='which'  TK_10='invoke-rc.d'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_3=DQUOTE  RSBRACKGen_1=RSBRACK  TK_11=';' 
	 TK_12='then' ( TK_13='\n')?   TK_14='invoke-rc.d'  scriptGen+=script  TK_15='stop'  ORGen=OR  error_handlerGen+=error_handler ( TK_16='\n')?  TK_17='else' ( TK_18='\n')?  script_pathGen_1+=script_path  TK_19='stop'  ORGen_1=OR  error_handlerGen_1+=error_handler  ( TK_20='\n' |  TK_21=';')   TK_22='fi' ( TK_23='\n' |  TK_24=';')  TK_25='fi' ( TK_26='\n' |  TK_27=';') 
	{
		// Create return CST Node
		Node templateA20ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA20ReturnNode.setKind("templateA20");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA20ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA20ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA20ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($script_pathGen != null) {
	        for(Iterator it = $script_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA20ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA20ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA20ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA20ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA20ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA20ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA20ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA20ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA20ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA20ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA20ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA20ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA20ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA20ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA20ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA20ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Node
		if($script_pathGen_1 != null) {
	        for(Iterator it = $script_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_path_return r = (DebianGrammarParser.script_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script_path");
	            	templateA20ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen_1 != null) {
			Leaf ORGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen_1.text, ORGen_1.getCharPositionInLine(), ORGen_1.getLine());
			templateA20ReturnNode.getChildren().add(ORGen_1Leaf);
		}
	    // Create a CST Node
		if($error_handlerGen_1 != null) {
	        for(Iterator it = $error_handlerGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA20ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA20ReturnNode.getChildren().add(TK_27Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA20.returnNode = templateA20ReturnNode;
	} 
	;

templateA21 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='purge'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='update-rc.d'  scriptGen+=script  TK_7='remove'  GREATGen=GREAT  PATHNULLGen=PATHNULL  ORGen=OR  error_handlerGen+=error_handler  ( TK_8='\n' |  TK_9=';')  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA21ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA21ReturnNode.setKind("templateA21");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA21ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA21ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA21ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA21ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA21ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA21ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA21ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA21ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($scriptGen != null) {
	        for(Iterator it = $scriptGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.script_return r = (DebianGrammarParser.script_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("script");
	            	templateA21ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA21ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA21ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA21ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a CST Node
		if($error_handlerGen != null) {
	        for(Iterator it = $error_handlerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.error_handler_return r = (DebianGrammarParser.error_handler_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("error_handler");
	            	templateA21ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA21ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA21.returnNode = templateA21ReturnNode;
	}
	;
	
templateA22 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='ldconfig' ( TK_7='\n' |  TK_8=';')  TK_9='fi' ( TK_10='\n' |  TK_11=';') 
	{
		// Create return CST Node
		Node templateA22ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA22ReturnNode.setKind("templateA22");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA22ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA22ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA22ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA22ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA22ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA22ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA22ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA22ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA22ReturnNode.getChildren().add(TK_11Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA22.returnNode = templateA22ReturnNode;
	} 
	;

templateA23 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='ldconfig' ( TK_7='\n' |  TK_8=';')  TK_9='fi' ( TK_10='\n' |  TK_11=';') 
	{
		// Create return CST Node
		Node templateA23ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA23ReturnNode.setKind("templateA23");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA23ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA23ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA23ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA23ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA23ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA23ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA23ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA23ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA23ReturnNode.getChildren().add(TK_11Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA23.returnNode = templateA23ReturnNode;
	} 
	;

templateA24 returns [Node returnNode] 
:  TK_0='inst'  EQUGen=EQU  pack_pathGen+=pack_path ( TK_1=';' |  TK_2='\n')  TK_3='if'   LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_4='f'  TK_5='$inst'  RSBRACKGen=RSBRACK  TK_6=';'  TK_7='then' ( TK_8='\n')?  TK_9='chmod'  TK_10='a+x'  TK_11='$inst' ( TK_12='\n' |  TK_13=';') 
	 TK_14='if'   LSBRACKGen_1=LSBRACK  MINUSGen_1=MINUS  TK_15='x'  DQUOTEGen=DQUOTE  APGen=AP   TK_16='which'  TK_17='update-menus'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_1=DQUOTE  RSBRACKGen_1=RSBRACK  TK_18=';'  TK_19='then' ( TK_20='\n')?  TK_21='update-menus'  ( TK_22='\n' |  TK_23=';')  TK_24='fi' ( TK_25='\n' |  TK_26=';')  TK_27='fi' ( TK_28='\n' |  TK_29=';') 
	{
		// Create return CST Node
		Node templateA24ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA24ReturnNode.setKind("templateA24");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA24ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Node
		if($pack_pathGen != null) {
	        for(Iterator it = $pack_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_path_return r = (DebianGrammarParser.pack_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack_path");
	            	templateA24ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA24ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA24ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA24ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA24ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA24ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA24ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA24ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA24ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA24ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA24ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA24ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA24ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA24ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA24ReturnNode.getChildren().add(TK_29Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA24.returnNode = templateA24ReturnNode;
	} 
	;

templateA25 returns [Node returnNode] 
:   TK_0='inst'  EQUGen=EQU  pack_pathGen+=pack_path ( TK_1=';' |  TK_2='\n')  TK_3='if'   LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE  EQUGen_1=EQU  DQUOTEGen_2=DQUOTE  TK_4='remove'  DQUOTEGen_3=DQUOTE  RSBRACKGen=RSBRACK  ANDGen=AND  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='f'  DQUOTEGen_4=DQUOTE  TK_6='$inst'  DQUOTEGen_5=DQUOTE  RSBRACKGen_1=RSBRACK  TK_7=';' 
	 TK_8='then' ( TK_9='\n')?   TK_10='chmod'  TK_11='a-x'  TK_12='$inst' ( TK_13='\n' |  TK_14=';')  TK_15='fi' ( TK_16='\n' |  TK_17=';')   TK_18='if'   LSBRACKGen_2=LSBRACK  MINUSGen_1=MINUS  TK_19='x'  DQUOTEGen_6=DQUOTE  APGen=AP   TK_20='which'  TK_21='update-menus'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_7=DQUOTE  RSBRACKGen_2=RSBRACK  TK_22=';'  TK_23='then' ( TK_24='\n')?  TK_25='update-menus'  ( TK_26='\n' |  TK_27=';')  TK_28='fi' ( TK_29='\n' |  TK_30=';') 
	{
		// Create return CST Node
		Node templateA25ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA25ReturnNode.setKind("templateA25");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA25ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Node
		if($pack_pathGen != null) {
	        for(Iterator it = $pack_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_path_return r = (DebianGrammarParser.pack_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack_path");
	            	templateA25ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA25ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA25ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA25ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA25ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA25ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA25ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA25ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA25ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA25ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA25ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA25ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA25ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA25ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA25ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA25ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA25ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA25ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA25ReturnNode.getChildren().add(TK_30Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA25.returnNode = templateA25ReturnNode;
	}
	;

templateA26 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='x'  DQUOTEGen_4=DQUOTE  APGen=AP  TK_6='which'  TK_7='update-menus'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_5=DQUOTE  RSBRACKGen_1=RSBRACK  TK_8=';' 
	 TK_9='then' ( TK_10='\n')?  TK_11='update-menus' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA26ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA26ReturnNode.setKind("templateA26");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA26ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA26ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA26ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA26ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA26ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA26ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA26ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA26ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA26ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA26ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA26ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA26ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA26ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA26ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA26ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA26.returnNode = templateA26ReturnNode;
	}  	
 	;

templateA27 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  APGen=AP  TK_3='which'  TK_4='update-menus'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_5=';'  TK_6='then' ( TK_7='\n')?  TK_8='update-menus' ( TK_9='\n' |  TK_10=';')  TK_11='fi' ( TK_12='\n' |  TK_13=';') 
	{
		// Create return CST Node
		Node templateA27ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA27ReturnNode.setKind("templateA27");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA27ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA27ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA27ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA27ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA27ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA27ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA27ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA27ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA27ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA27ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA27ReturnNode.getChildren().add(TK_13Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA27.returnNode = templateA27ReturnNode;
	}  
	;

templateA28 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?   TK_6='if' ( TK_7='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_8='e'  kvers_pathGen+=kvers_path  RSBRACKGen_1=RSBRACK  TK_9=';' 
	 TK_10='then' ( TK_11='\n')?  TK_12='depmod'  MINUSGen_1=MINUS  TK_13='a'  MINUSGen_2=MINUS  TK_14='F'  kvers_pathGen_1+=kvers_path  kversGen+=kvers  ORGen=OR   TK_15='true' ( TK_16='\n' |  TK_17=';')  TK_18='fi' ( TK_19='\n' |  TK_20=';')  TK_21='fi' ( TK_22='\n' |  TK_23=';') 
	{
		// Create return CST Node
		Node templateA28ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA28ReturnNode.setKind("templateA28");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA28ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA28ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA28ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA28ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA28ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA28ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA28ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA28ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA28ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA28ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Node
		if($kvers_pathGen != null) {
	        for(Iterator it = $kvers_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_path_return r = (DebianGrammarParser.kvers_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers_path");
	            	templateA28ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA28ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA28ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA28ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Node
		if($kvers_pathGen_1 != null) {
	        for(Iterator it = $kvers_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_path_return r = (DebianGrammarParser.kvers_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers_path");
	            	templateA28ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($kversGen != null) {
	        for(Iterator it = $kversGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_return r = (DebianGrammarParser.kvers_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers");
	            	templateA28ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA28ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA28ReturnNode.getChildren().add(TK_23Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA28.returnNode = templateA28ReturnNode;
	}
	;

templateA29 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='e'  kvers_pathGen+=kvers_path  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?   TK_6='depmod'  MINUSGen_1=MINUS  TK_7='a'  MINUSGen_2=MINUS  TK_8='F'  kvers_pathGen_1+=kvers_path  kversGen+=kvers  ORGen=OR  TK_9='true' ( TK_10='\n' |  TK_11=';')  TK_12='fi' ( TK_13='\n' |  TK_14=';') 
	{
		// Create return CST Node
		Node templateA29ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA29ReturnNode.setKind("templateA29");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA29ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA29ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($kvers_pathGen != null) {
	        for(Iterator it = $kvers_pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_path_return r = (DebianGrammarParser.kvers_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers_path");
	            	templateA29ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA29ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA29ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA29ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Node
		if($kvers_pathGen_1 != null) {
	        for(Iterator it = $kvers_pathGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_path_return r = (DebianGrammarParser.kvers_path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers_path");
	            	templateA29ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($kversGen != null) {
	        for(Iterator it = $kversGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.kvers_return r = (DebianGrammarParser.kvers_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("kvers");
	            	templateA29ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA29ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA29ReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA29.returnNode = templateA29ReturnNode;
	}
	;

templateA30 returns [Node returnNode] 
:  TK_0='PYTHON'  EQUGen=EQU  pyverGen+=pyver ( TK_1='\n' |  TK_2=';')  TK_3='if' ( TK_4='\n')?  TK_5='which'  TK_6='$PYTHON'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER ( TK_7='\n')?  ANDGen=AND ( TK_8='\n')?   LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_9='e'  PATHCOMPYTHGen=PATHCOMPYTH  RSBRACKGen=RSBRACK  TK_10=';' 
	 TK_11='then' ( TK_12='\n')?  TK_13='DIRLIST'  EQUGen_1=EQU  DQUOTEGen=DQUOTE ( dirlistGen+=dirlist  TK_14='\n'?)+  DQUOTEGen_1=DQUOTE (  TK_15='\n' |  TK_16=';' )  TK_17='for' ( TK_18='\n')?  TK_19='i'  TK_20='in'  TK_21='$DIRLIST'  TK_22=';'  TK_23='do'  TK_24='\n'  TK_25='$PYTHON'  PATHCOMPYTHGen_1=PATHCOMPYTH  MINUSGen_1=MINUS  TK_26='q'  TK_27='$i' ( TK_28='\n' |  TK_29=';')  TK_30='done' ( TK_31='\n' |  TK_32=';')  TK_33='fi' ( TK_34='\n' |  TK_35=';') 
	{
		// Create return CST Node
		Node templateA30ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA30ReturnNode.setKind("templateA30");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA30ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Node
		if($pyverGen != null) {
	        for(Iterator it = $pyverGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pyver_return r = (DebianGrammarParser.pyver_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pyver");
	            	templateA30ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA30ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA30ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA30ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA30ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA30ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA30ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA30ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA30ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHCOMPYTHGen != null) {
			Leaf PATHCOMPYTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", $PATHCOMPYTHGen.text, PATHCOMPYTHGen.getCharPositionInLine(), PATHCOMPYTHGen.getLine());
			templateA30ReturnNode.getChildren().add(PATHCOMPYTHGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA30ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA30ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA30ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}

		// Create a special CST Node for terminal dirlistGen aggregation
		if($dirlistGen != null) {
	    for(int pos = 0; pos < $dirlistGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($dirlistGen != null) {		
	    	DebianGrammarParser.dirlist_return r = (DebianGrammarParser.dirlist_return) $dirlistGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("dirlist");
	    		templateA30ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_14Leaf);
	 	}
		}
		}

	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA30ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHCOMPYTHGen_1 != null) {
			Leaf PATHCOMPYTHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", $PATHCOMPYTHGen_1.text, PATHCOMPYTHGen_1.getCharPositionInLine(), PATHCOMPYTHGen_1.getLine());
			templateA30ReturnNode.getChildren().add(PATHCOMPYTHGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA30ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA30ReturnNode.getChildren().add(TK_35Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA30.returnNode = templateA30ReturnNode;
	}
	;

templateA31 returns [Node returnNode] 
:  TK_0='dpkg'  MINUSGen=MINUS  TK_1='L'  packGen+=pack  VBARGen=VBAR ( TK_2='\n')?  TK_3='awk'  PSINGLEGen=PSINGLE  input_variableGen+=input_variable  TILDEGen=TILDE   SLASHGen=SLASH  BSLASHGen=BSLASH  TK_4='.py'  TK_5='$'  SLASHGen_1=SLASH  LGRAFGen=LGRAF  TK_6='print'  input_variableGen_1+=input_variable  DQUOTEGen=DQUOTE  TK_7='c'  BSLASHGen_1=BSLASH  TK_8='n'  DQUOTEGen_1=DQUOTE  input_variableGen_2+=input_variable  DQUOTEGen_2=DQUOTE  TK_9='o'  DQUOTEGen_3=DQUOTE  RGRAFGen=RGRAF  PSINGLEGen_1=PSINGLE  VBARGen_1=VBAR ( TK_10='\n')?  TK_11='xargs'  TK_12='rm'  MINUSGen_1=MINUS  TK_13='f'  GREATANDGen=GREATAND  NUMBERGen=NUMBER ( TK_14='\n' |  TK_15=';') 
	{
		// Create return CST Node
		Node templateA31ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA31ReturnNode.setKind("templateA31");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA31ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($packGen != null) {
	        for(Iterator it = $packGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_return r = (DebianGrammarParser.pack_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack");
	            	templateA31ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($VBARGen != null) {
			Leaf VBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", $VBARGen.text, VBARGen.getCharPositionInLine(), VBARGen.getLine());
			templateA31ReturnNode.getChildren().add(VBARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($PSINGLEGen != null) {
			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen.text, PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
			templateA31ReturnNode.getChildren().add(PSINGLEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA31ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($TILDEGen != null) {
			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", $TILDEGen.text, TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
			templateA31ReturnNode.getChildren().add(TILDEGenLeaf);
		}
	    // Create a CST Leaf
		if($SLASHGen != null) {
			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen.text, SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
			templateA31ReturnNode.getChildren().add(SLASHGenLeaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen != null) {
			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen.text, BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
			templateA31ReturnNode.getChildren().add(BSLASHGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($SLASHGen_1 != null) {
			Leaf SLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen_1.text, SLASHGen_1.getCharPositionInLine(), SLASHGen_1.getLine());
			templateA31ReturnNode.getChildren().add(SLASHGen_1Leaf);
		}
	    // Create a CST Leaf
		if($LGRAFGen != null) {
			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", $LGRAFGen.text, LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
			templateA31ReturnNode.getChildren().add(LGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA31ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA31ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($BSLASHGen_1 != null) {
			Leaf BSLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_1.text, BSLASHGen_1.getCharPositionInLine(), BSLASHGen_1.getLine());
			templateA31ReturnNode.getChildren().add(BSLASHGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA31ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_2 != null) {
	        for(Iterator it = $input_variableGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA31ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA31ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA31ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RGRAFGen != null) {
			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", $RGRAFGen.text, RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
			templateA31ReturnNode.getChildren().add(RGRAFGenLeaf);
		}
	    // Create a CST Leaf
		if($PSINGLEGen_1 != null) {
			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen_1.text, PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
			templateA31ReturnNode.getChildren().add(PSINGLEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($VBARGen_1 != null) {
			Leaf VBARGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", $VBARGen_1.text, VBARGen_1.getCharPositionInLine(), VBARGen_1.getLine());
			templateA31ReturnNode.getChildren().add(VBARGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA31ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA31ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA31ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA31ReturnNode.getChildren().add(TK_15Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA31.returnNode = templateA31ReturnNode;
	}
	;

templateA32 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='scrollkeeper-update'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='scrollkeeper-update'  MINUSGen=MINUS  TK_11='q' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA32ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA32ReturnNode.setKind("templateA32");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA32ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA32ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA32ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA32ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA32ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA32ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA32ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA32ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA32ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA32ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA32ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA32ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA32ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA32ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA32ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA32ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA32.returnNode = templateA32ReturnNode;
	}	
 	;

templateA33 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  TK_5='which'  TK_6='scrollkeeper-update'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_7=';'  TK_8='then' ( TK_9='\n')?  TK_10='scrollkeeper-update'  MINUSGen=MINUS  TK_11='q' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA33ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA33ReturnNode.setKind("templateA33");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA33ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA33ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA33ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA33ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA33ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA33ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA33ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA33ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA33ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA33ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA33ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA33ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA33ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA33ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA33ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA33ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA33.returnNode = templateA33ReturnNode;
	}	
 	;
 
 templateA34 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  TK_6='rm'  MINUSGen=MINUS  TK_7='f'  centralcatGen+=centralcat ( TK_8='\n' |  TK_9=';')  TK_10='for'  TK_11='ordcat'  TK_12='in'  ordcatsGen+=ordcats+  TK_13=';' 
 	 TK_14='do' ( TK_15='\n')?  TK_16='update-catalog'  DMINUSGen=DMINUS  TK_17='quiet'   DMINUSGen_1=DMINUS  TK_18='add'  centralcatGen_1+=centralcat  TK_19='$'  LGRAFGen=LGRAF  TK_20='ordcat'  RGRAFGen=RGRAF ( TK_21='\n' |  TK_22=';')  TK_23='done' ( TK_24='\n' |  TK_25=';')  TK_26='update-catalog'  DMINUSGen_2=DMINUS  TK_27='quiet'  DMINUSGen_3=DMINUS  TK_28='add'  DMINUSGen_4=DMINUS  TK_29='super'  centralcatGen_2+=centralcat ( TK_30='\n' |  TK_31=';')  TK_32='fi' ( TK_33='\n' |  TK_34=';') 
	{
		// Create return CST Node
		Node templateA34ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA34ReturnNode.setKind("templateA34");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA34ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA34ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA34ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA34ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA34ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA34ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA34ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA34ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA34ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Node
		if($centralcatGen != null) {
	        for(Iterator it = $centralcatGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA34ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Node
		if($ordcatsGen != null) {
	        for(Iterator it = $ordcatsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.ordcats_return r = (DebianGrammarParser.ordcats_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ordcats");
	            	templateA34ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA34ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_1 != null) {
			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_1.text, DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
			templateA34ReturnNode.getChildren().add(DMINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Node
		if($centralcatGen_1 != null) {
	        for(Iterator it = $centralcatGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA34ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Leaf
		if($LGRAFGen != null) {
			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", $LGRAFGen.text, LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
			templateA34ReturnNode.getChildren().add(LGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($RGRAFGen != null) {
			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", $RGRAFGen.text, RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
			templateA34ReturnNode.getChildren().add(RGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_2 != null) {
			Leaf DMINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_2.text, DMINUSGen_2.getCharPositionInLine(), DMINUSGen_2.getLine());
			templateA34ReturnNode.getChildren().add(DMINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_3 != null) {
			Leaf DMINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_3.text, DMINUSGen_3.getCharPositionInLine(), DMINUSGen_3.getLine());
			templateA34ReturnNode.getChildren().add(DMINUSGen_3Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_4 != null) {
			Leaf DMINUSGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_4.text, DMINUSGen_4.getCharPositionInLine(), DMINUSGen_4.getLine());
			templateA34ReturnNode.getChildren().add(DMINUSGen_4Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a CST Node
		if($centralcatGen_2 != null) {
	        for(Iterator it = $centralcatGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA34ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA34ReturnNode.getChildren().add(TK_34Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA34.returnNode = templateA34ReturnNode;
	}
 	;

 templateA35 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ORGen=OR ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  DQUOTEGen_4=DQUOTE?  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE?  EQUGen_1=EQU  DQUOTEGen_6=DQUOTE?  TK_5='upgrade'  DQUOTEGen_7=DQUOTE?  RSBRACKGen_1=RSBRACK  TK_6=';' 
 	 TK_7='then' ( TK_8='\n')?  TK_9='update-catalog'  DMINUSGen=DMINUS  TK_10='quiet'  DMINUSGen_1=DMINUS  TK_11='remove'  DMINUSGen_2=DMINUS  TK_12='super'  centralcatGen+=centralcat ( TK_13='\n' |  TK_14=';')  TK_15='fi' ( TK_16='\n' |  TK_17=';') 
	{
		// Create return CST Node
		Node templateA35ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA35ReturnNode.setKind("templateA35");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA35ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA35ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA35ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA35ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA35ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA35ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA35ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA35ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA35ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA35ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA35ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_1 != null) {
			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_1.text, DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
			templateA35ReturnNode.getChildren().add(DMINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen_2 != null) {
			Leaf DMINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_2.text, DMINUSGen_2.getCharPositionInLine(), DMINUSGen_2.getLine());
			templateA35ReturnNode.getChildren().add(DMINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Node
		if($centralcatGen != null) {
	        for(Iterator it = $centralcatGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA35ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA35ReturnNode.getChildren().add(TK_17Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA35.returnNode = templateA35ReturnNode;
	}
 	;
 
// DOT 'old'	
 templateA36 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='purge'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  TK_4=';'  TK_5='then' ( TK_6='\n')?  TK_7='rm'  MINUSGen=MINUS  TK_8='f'  centralcatGen+=centralcat  centralcatGen_1+=centralcat ( TK_9='\n' |  TK_10=';')  TK_11='fi' ( TK_12='\n' |  TK_13=';') 
	{
		// Create return CST Node
		Node templateA36ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA36ReturnNode.setKind("templateA36");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA36ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA36ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA36ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA36ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA36ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA36ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA36ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA36ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA36ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Node
		if($centralcatGen != null) {
	        for(Iterator it = $centralcatGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA36ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($centralcatGen_1 != null) {
	        for(Iterator it = $centralcatGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.centralcat_return r = (DebianGrammarParser.centralcat_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("centralcat");
	            	templateA36ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA36ReturnNode.getChildren().add(TK_13Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA36.returnNode = templateA36ReturnNode;
	}
	;

templateA37 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='x'  DQUOTEGen_4=DQUOTE  APGen=AP  TK_6='which'  TK_7='update-mime-database'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_5=DQUOTE  RSBRACKGen_1=RSBRACK  TK_8=';' 
	 TK_9='then' ( TK_10='\n')?  TK_11='update-mime-database'  PATHMIMEGen=PATHMIME ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA37ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA37ReturnNode.setKind("templateA37");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA37ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA37ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA37ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA37ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA37ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA37ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA37ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA37ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA37ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA37ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA37ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA37ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA37ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA37ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHMIMEGen != null) {
			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", $PATHMIMEGen.text, PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
			templateA37ReturnNode.getChildren().add(PATHMIMEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA37ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA37.returnNode = templateA37ReturnNode;
	}
	;

templateA38 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  MINUSGen=MINUS  TK_2='x'  DQUOTEGen=DQUOTE  APGen=AP  TK_3='which'  TK_4='update-mime-database'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_5=';'  TK_6='then' ( TK_7='\n')?  TK_8='update-mime-database'  PATHMIMEGen=PATHMIME ( TK_9='\n' |  TK_10=';')  TK_11='fi' ( TK_12='\n' |  TK_13=';') 
	{
		// Create return CST Node
		Node templateA38ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA38ReturnNode.setKind("templateA38");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA38ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA38ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA38ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA38ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA38ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA38ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA38ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA38ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA38ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA38ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHMIMEGen != null) {
			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", $PATHMIMEGen.text, PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
			templateA38ReturnNode.getChildren().add(PATHMIMEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA38ReturnNode.getChildren().add(TK_13Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA38.returnNode = templateA38ReturnNode;
	}	
 	;

templateA39 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='x'  DQUOTEGen_4=DQUOTE  APGen=AP  TK_6='which'  TK_7='update-mime'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_5=DQUOTE  RSBRACKGen_1=RSBRACK  TK_8=';' 
	 TK_9='then'  ( TK_10='\n')?  TK_11='update-mime' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA39ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA39ReturnNode.setKind("templateA39");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA39ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA39ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA39ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA39ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA39ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA39ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA39ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA39ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA39ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA39ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA39ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA39ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA39ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA39ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA39ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA39.returnNode = templateA39ReturnNode;
	}
	;

templateA40 returns [Node returnNode] 
:   TK_0='if' ( TK_1='\n')?   TK_2='which'  TK_3='update-mime'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_4=';'  TK_5='then' ( TK_6='\n')?  TK_7='update-mime' ( TK_8='\n' |  TK_9=';')  TK_10='fi' ( TK_11='\n' |  TK_12=';') 
	{
		// Create return CST Node
		Node templateA40ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA40ReturnNode.setKind("templateA40");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA40ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA40ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA40ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA40ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA40ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA40ReturnNode.getChildren().add(TK_12Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA40.returnNode = templateA40ReturnNode;
	}
	;

templateA41 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n' |  TK_4=';')  TK_5='then' ( TK_6='\n')?  TK_7='if' ( TK_8='\n')?  TK_9='which'  TK_10='suidregister'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER ( TK_11='\n')?  ANDGen=AND ( TK_12='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_13='e'  PATHSUIDGen=PATHSUID  RSBRACKGen_1=RSBRACK ( TK_14='\n' |  TK_15=';') 
	 TK_16='then' ( TK_17='\n')?  TK_18='suidregister'  MINUSGen_1=MINUS  TK_19='s'  packGen+=pack  fileGen+=file  ownerGen+=owner  groupGen+=group  permsGen+=perms ( TK_20='\n' |  TK_21=';') 
	 TK_22='elif' ( TK_23='\n')?  LSBRACKGen_2=LSBRACK  MINUSGen_2=MINUS  TK_24='e'  fileGen_1+=file  RSBRACKGen_2=RSBRACK ( TK_25=';' | TK_26='\n')  TK_27='then' ( TK_28='\n')?  TK_29='chown'  ownerGen_1+=owner  COLONGen=COLON  groupGen_1+=group  fileGen_2+=file ( TK_30='\n' |  TK_31=';')  TK_32='chmod'  permsGen_1+=perms  fileGen_3+=file ( TK_33='\n' |  TK_34=';')  TK_35='fi' ( TK_36='\n' |  TK_37=';')  TK_38='fi' ( TK_39='\n' |  TK_40=';') 
	{
		// Create return CST Node
		Node templateA41ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA41ReturnNode.setKind("templateA41");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA41ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA41ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA41ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA41ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA41ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA41ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA41ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA41ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA41ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA41ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA41ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA41ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA41ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA41ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA41ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHSUIDGen != null) {
			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", $PATHSUIDGen.text, PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
			templateA41ReturnNode.getChildren().add(PATHSUIDGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA41ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA41ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Node
		if($packGen != null) {
	        for(Iterator it = $packGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_return r = (DebianGrammarParser.pack_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($fileGen != null) {
	        for(Iterator it = $fileGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ownerGen != null) {
	        for(Iterator it = $ownerGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.owner_return r = (DebianGrammarParser.owner_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("owner");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($groupGen != null) {
	        for(Iterator it = $groupGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.group_return r = (DebianGrammarParser.group_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($permsGen != null) {
	        for(Iterator it = $permsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.perms_return r = (DebianGrammarParser.perms_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("perms");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA41ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA41ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a CST Node
		if($fileGen_1 != null) {
	        for(Iterator it = $fileGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA41ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a CST Node
		if($ownerGen_1 != null) {
	        for(Iterator it = $ownerGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.owner_return r = (DebianGrammarParser.owner_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("owner");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			templateA41ReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Node
		if($groupGen_1 != null) {
	        for(Iterator it = $groupGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.group_return r = (DebianGrammarParser.group_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("group");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($fileGen_2 != null) {
	        for(Iterator it = $fileGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a CST Node
		if($permsGen_1 != null) {
	        for(Iterator it = $permsGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.perms_return r = (DebianGrammarParser.perms_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("perms");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($fileGen_3 != null) {
	        for(Iterator it = $fileGen_3.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA41ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA41ReturnNode.getChildren().add(TK_40Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA41.returnNode = templateA41ReturnNode;
	}
	;

templateA42 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='e'  PATHSUIDGen=PATHSUID  RSBRACKGen_1=RSBRACK ( TK_6='\n')?  ANDGen_1=AND ( TK_7='\n')?  TK_8='which'  TK_9='suidunregister'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_10=';'  TK_11='then' ( TK_12='\n')?  TK_13='suidunregister'  MINUSGen_1=MINUS  TK_14='s'  packGen+=pack  fileGen+=file ( TK_15='\n' |  TK_16=';')  TK_17='fi' ( TK_18='\n' |  TK_19=';') 
	{
		// Create return CST Node
		Node templateA42ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA42ReturnNode.setKind("templateA42");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA42ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA42ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA42ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA42ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA42ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA42ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA42ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA42ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA42ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA42ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA42ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHSUIDGen != null) {
			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", $PATHSUIDGen.text, PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
			templateA42ReturnNode.getChildren().add(PATHSUIDGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA42ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen_1 != null) {
			Leaf ANDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen_1.text, ANDGen_1.getCharPositionInLine(), ANDGen_1.getLine());
			templateA42ReturnNode.getChildren().add(ANDGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA42ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA42ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA42ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA42ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA42ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA42ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Node
		if($packGen != null) {
	        for(Iterator it = $packGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pack_return r = (DebianGrammarParser.pack_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pack");
	            	templateA42ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($fileGen != null) {
	        for(Iterator it = $fileGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.file_return r = (DebianGrammarParser.file_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("file");
	            	templateA42ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA42ReturnNode.getChildren().add(TK_19Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA42.returnNode = templateA42ReturnNode;
	}
	;

templateA43 returns [Node returnNode] 
: TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='install'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK  ORGen=OR ( TK_3='\n')?  LSBRACKGen_1=LSBRACK  DQUOTEGen_4=DQUOTE?  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE?  EQUGen_1=EQU  DQUOTEGen_6=DQUOTE?  TK_4='upgrade'  DQUOTEGen_7=DQUOTE?  RSBRACKGen_1=RSBRACK  TK_5=';'  TK_6='then' ( TK_7='\n')?  TK_8='if' ( TK_9='\n')?  LSBRACKGen_2=LSBRACK  MINUSGen=MINUS  TK_10='e'  DQUOTEGen_8=DQUOTE  oldGen+=old  DQUOTEGen_9=DQUOTE  RSBRACKGen_2=RSBRACK  TK_11=';'  TK_12='then' ( TK_13='\n')?  TK_14='if' ( TK_15='\n')?  LSBRACKGen_3=LSBRACK
	  DQUOTEGen_10=DQUOTE  APGen=AP  TK_16='md5sum'   BSLASHGen=BSLASH  DQUOTEGen_11=DQUOTE  oldGen_1+=old  BSLASHGen_1=BSLASH  DQUOTEGen_12=DQUOTE  VBARGen=VBAR  TK_17='sed'  MINUSGen_1=MINUS  TK_18='e'  BSLASHGen_2=BSLASH  DQUOTEGen_13=DQUOTE  PATHSSGen=PATHSS  DOTGen=DOT  TK_19='*'  SLASHGen=SLASH  SLASHGen_1=SLASH  BSLASHGen_3=BSLASH  DQUOTEGen_14=DQUOTE  APGen_1=AP  DQUOTEGen_15=DQUOTE  EQUGen_2=EQU  DQUOTEGen_16=DQUOTE  APGen_2=AP  TK_20='dpkg-query'  MINUSGen_2=MINUS  TK_21='W'  MINUSGen_3=MINUS  TK_22='f'  EQUGen_3=EQU  PSINGLEGen=PSINGLE  TK_23='$'  LGRAFGen=LGRAF  TK_24='Conffiles'  RGRAFGen=RGRAF  PSINGLEGen_1=PSINGLE  oldGen_2+=old  VBARGen_1=VBAR  TK_25='sed'  MINUSGen_4=MINUS  TK_26='n'  MINUSGen_5=MINUS  TK_27='e'  BSLASHGen_4=BSLASH  DQUOTEGen_17=DQUOTE
	  BSLASHGen_5=BSLASH  BSLASHGen_6=BSLASH  BSLASHGen_7=BSLASH  BSLASHGen_8=BSLASH  PSINGLEGen_2=PSINGLE  oldGen_3+=old  PSINGLEGen_3=PSINGLE  PATHSSGen_1=PATHSS  DOTGen_1=DOT  TK_28='*'  SLASHGen_2=SLASH  PATHPGen=PATHP  BSLASHGen_9=BSLASH  DQUOTEGen_18=DQUOTE  APGen_3=AP  DQUOTEGen_19=DQUOTE  RSBRACKGen_3=RSBRACK ( TK_29='\n')?  TK_30='then' ( TK_31='\n')?  TK_32='rm'  MINUSGen_6=MINUS  TK_33='f'  DQUOTEGen_20=DQUOTE  oldGen_4+=old  DQUOTEGen_21=DQUOTE ( TK_34='\n' |  TK_35=';')  TK_36='fi' ( TK_37='\n' |  TK_38=';')  TK_39='fi' ( TK_40='\n' |  TK_41=';')  TK_42='if'( TK_43='\n')?  LSBRACKGen_4=LSBRACK  MINUSGen_7=MINUS  TK_44='L'  DQUOTEGen_22=DQUOTE  rule_placeholderGen+=rule_placeholder  DQUOTEGen_23=DQUOTE  RSBRACKGen_4=RSBRACK  TK_45=';' 
	  TK_46='then' ( TK_47='\n')?  TK_48='rm'  MINUSGen_8=MINUS  TK_49='f'  DQUOTEGen_24=DQUOTE  rule_placeholderGen_1+=rule_placeholder  DQUOTEGen_25=DQUOTE ( TK_50='\n' |  TK_51=';')  TK_52='fi' ( TK_53='\n' |  TK_54=';')  TK_55='fi' ( TK_56='\n' |  TK_57=';') 
	{
		// Create return CST Node
		Node templateA43ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA43ReturnNode.setKind("templateA43");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA43ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA43ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA43ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA43ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA43ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA43ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA43ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA43ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_8 != null) {
			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_8.text, DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
		}
	    // Create a CST Node
		if($oldGen != null) {
	        for(Iterator it = $oldGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_9 != null) {
			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_9.text, DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA43ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_3 != null) {
			Leaf LSBRACKGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_3.text, LSBRACKGen_3.getCharPositionInLine(), LSBRACKGen_3.getLine());
			templateA43ReturnNode.getChildren().add(LSBRACKGen_3Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_10 != null) {
			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_10.text, DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA43ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a CST Leaf
		if($BSLASHGen != null) {
			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen.text, BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_11 != null) {
			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_11.text, DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
		}
	    // Create a CST Node
		if($oldGen_1 != null) {
	        for(Iterator it = $oldGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($BSLASHGen_1 != null) {
			Leaf BSLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_1.text, BSLASHGen_1.getCharPositionInLine(), BSLASHGen_1.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_12 != null) {
			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_12.text, DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
		}
	    // Create a CST Leaf
		if($VBARGen != null) {
			Leaf VBARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", $VBARGen.text, VBARGen.getCharPositionInLine(), VBARGen.getLine());
			templateA43ReturnNode.getChildren().add(VBARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Leaf
		if($BSLASHGen_2 != null) {
			Leaf BSLASHGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_2.text, BSLASHGen_2.getCharPositionInLine(), BSLASHGen_2.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_2Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_13 != null) {
			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_13.text, DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
		}
	    // Create a CST Leaf
		if($PATHSSGen != null) {
			Leaf PATHSSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", $PATHSSGen.text, PATHSSGen.getCharPositionInLine(), PATHSSGen.getLine());
			templateA43ReturnNode.getChildren().add(PATHSSGenLeaf);
		}
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen.text, DOTGen.getCharPositionInLine(), DOTGen.getLine());
			templateA43ReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a CST Leaf
		if($SLASHGen != null) {
			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen.text, SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
			templateA43ReturnNode.getChildren().add(SLASHGenLeaf);
		}
	    // Create a CST Leaf
		if($SLASHGen_1 != null) {
			Leaf SLASHGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen_1.text, SLASHGen_1.getCharPositionInLine(), SLASHGen_1.getLine());
			templateA43ReturnNode.getChildren().add(SLASHGen_1Leaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_3 != null) {
			Leaf BSLASHGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_3.text, BSLASHGen_3.getCharPositionInLine(), BSLASHGen_3.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_3Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_14 != null) {
			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_14.text, DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA43ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_15 != null) {
			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_15.text, DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen_2 != null) {
			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_2.text, EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
			templateA43ReturnNode.getChildren().add(EQUGen_2Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_16 != null) {
			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_16.text, DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
		}
	    // Create a CST Leaf
		if($APGen_2 != null) {
			Leaf APGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_2.text, APGen_2.getCharPositionInLine(), APGen_2.getLine());
			templateA43ReturnNode.getChildren().add(APGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_3 != null) {
			Leaf MINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_3.text, MINUSGen_3.getCharPositionInLine(), MINUSGen_3.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_3Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_3 != null) {
			Leaf EQUGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_3.text, EQUGen_3.getCharPositionInLine(), EQUGen_3.getLine());
			templateA43ReturnNode.getChildren().add(EQUGen_3Leaf);
		}
	    // Create a CST Leaf
		if($PSINGLEGen != null) {
			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen.text, PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
			templateA43ReturnNode.getChildren().add(PSINGLEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a CST Leaf
		if($LGRAFGen != null) {
			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", $LGRAFGen.text, LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
			templateA43ReturnNode.getChildren().add(LGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a CST Leaf
		if($RGRAFGen != null) {
			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", $RGRAFGen.text, RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
			templateA43ReturnNode.getChildren().add(RGRAFGenLeaf);
		}
	    // Create a CST Leaf
		if($PSINGLEGen_1 != null) {
			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen_1.text, PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
			templateA43ReturnNode.getChildren().add(PSINGLEGen_1Leaf);
		}
	    // Create a CST Node
		if($oldGen_2 != null) {
	        for(Iterator it = $oldGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($VBARGen_1 != null) {
			Leaf VBARGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", $VBARGen_1.text, VBARGen_1.getCharPositionInLine(), VBARGen_1.getLine());
			templateA43ReturnNode.getChildren().add(VBARGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_4 != null) {
			Leaf MINUSGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_4.text, MINUSGen_4.getCharPositionInLine(), MINUSGen_4.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_4Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_5 != null) {
			Leaf MINUSGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_5.text, MINUSGen_5.getCharPositionInLine(), MINUSGen_5.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_5Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a CST Leaf
		if($BSLASHGen_4 != null) {
			Leaf BSLASHGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_4.text, BSLASHGen_4.getCharPositionInLine(), BSLASHGen_4.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_4Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_17 != null) {
			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_17.text, DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_5 != null) {
			Leaf BSLASHGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_5.text, BSLASHGen_5.getCharPositionInLine(), BSLASHGen_5.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_5Leaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_6 != null) {
			Leaf BSLASHGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_6.text, BSLASHGen_6.getCharPositionInLine(), BSLASHGen_6.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_6Leaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_7 != null) {
			Leaf BSLASHGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_7.text, BSLASHGen_7.getCharPositionInLine(), BSLASHGen_7.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_7Leaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_8 != null) {
			Leaf BSLASHGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_8.text, BSLASHGen_8.getCharPositionInLine(), BSLASHGen_8.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_8Leaf);
		}
	    // Create a CST Leaf
		if($PSINGLEGen_2 != null) {
			Leaf PSINGLEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen_2.text, PSINGLEGen_2.getCharPositionInLine(), PSINGLEGen_2.getLine());
			templateA43ReturnNode.getChildren().add(PSINGLEGen_2Leaf);
		}
	    // Create a CST Node
		if($oldGen_3 != null) {
	        for(Iterator it = $oldGen_3.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($PSINGLEGen_3 != null) {
			Leaf PSINGLEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen_3.text, PSINGLEGen_3.getCharPositionInLine(), PSINGLEGen_3.getLine());
			templateA43ReturnNode.getChildren().add(PSINGLEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($PATHSSGen_1 != null) {
			Leaf PATHSSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", $PATHSSGen_1.text, PATHSSGen_1.getCharPositionInLine(), PATHSSGen_1.getLine());
			templateA43ReturnNode.getChildren().add(PATHSSGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DOTGen_1 != null) {
			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen_1.text, DOTGen_1.getCharPositionInLine(), DOTGen_1.getLine());
			templateA43ReturnNode.getChildren().add(DOTGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a CST Leaf
		if($SLASHGen_2 != null) {
			Leaf SLASHGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen_2.text, SLASHGen_2.getCharPositionInLine(), SLASHGen_2.getLine());
			templateA43ReturnNode.getChildren().add(SLASHGen_2Leaf);
		}
	    // Create a CST Leaf
		if($PATHPGen != null) {
			Leaf PATHPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHP", $PATHPGen.text, PATHPGen.getCharPositionInLine(), PATHPGen.getLine());
			templateA43ReturnNode.getChildren().add(PATHPGenLeaf);
		}
	    // Create a CST Leaf
		if($BSLASHGen_9 != null) {
			Leaf BSLASHGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen_9.text, BSLASHGen_9.getCharPositionInLine(), BSLASHGen_9.getLine());
			templateA43ReturnNode.getChildren().add(BSLASHGen_9Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_18 != null) {
			Leaf DQUOTEGen_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_18.text, DQUOTEGen_18.getCharPositionInLine(), DQUOTEGen_18.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_18Leaf);
		}
	    // Create a CST Leaf
		if($APGen_3 != null) {
			Leaf APGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_3.text, APGen_3.getCharPositionInLine(), APGen_3.getLine());
			templateA43ReturnNode.getChildren().add(APGen_3Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_19 != null) {
			Leaf DQUOTEGen_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_19.text, DQUOTEGen_19.getCharPositionInLine(), DQUOTEGen_19.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_19Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_3 != null) {
			Leaf RSBRACKGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_3.text, RSBRACKGen_3.getCharPositionInLine(), RSBRACKGen_3.getLine());
			templateA43ReturnNode.getChildren().add(RSBRACKGen_3Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_6 != null) {
			Leaf MINUSGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_6.text, MINUSGen_6.getCharPositionInLine(), MINUSGen_6.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_20 != null) {
			Leaf DQUOTEGen_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_20.text, DQUOTEGen_20.getCharPositionInLine(), DQUOTEGen_20.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_20Leaf);
		}
	    // Create a CST Node
		if($oldGen_4 != null) {
	        for(Iterator it = $oldGen_4.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_21 != null) {
			Leaf DQUOTEGen_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_21.text, DQUOTEGen_21.getCharPositionInLine(), DQUOTEGen_21.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_21Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_40Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_41 != null) {
			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_41.text, TK_41.getCharPositionInLine(), TK_41.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_41Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_42 != null) {
			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_42.text, TK_42.getCharPositionInLine(), TK_42.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_42Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_43 != null) {
			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_43.text, TK_43.getCharPositionInLine(), TK_43.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_43Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_4 != null) {
			Leaf LSBRACKGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_4.text, LSBRACKGen_4.getCharPositionInLine(), LSBRACKGen_4.getLine());
			templateA43ReturnNode.getChildren().add(LSBRACKGen_4Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_7 != null) {
			Leaf MINUSGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_7.text, MINUSGen_7.getCharPositionInLine(), MINUSGen_7.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_7Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_44 != null) {
			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_44.text, TK_44.getCharPositionInLine(), TK_44.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_44Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_22 != null) {
			Leaf DQUOTEGen_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_22.text, DQUOTEGen_22.getCharPositionInLine(), DQUOTEGen_22.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_22Leaf);
		}
	    // Create a CST Node
		if($rule_placeholderGen != null) {
	        for(Iterator it = $rule_placeholderGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_23 != null) {
			Leaf DQUOTEGen_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_23.text, DQUOTEGen_23.getCharPositionInLine(), DQUOTEGen_23.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_23Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_4 != null) {
			Leaf RSBRACKGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_4.text, RSBRACKGen_4.getCharPositionInLine(), RSBRACKGen_4.getLine());
			templateA43ReturnNode.getChildren().add(RSBRACKGen_4Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_45 != null) {
			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_45.text, TK_45.getCharPositionInLine(), TK_45.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_45Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_46 != null) {
			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_46.text, TK_46.getCharPositionInLine(), TK_46.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_46Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_47 != null) {
			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_47.text, TK_47.getCharPositionInLine(), TK_47.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_47Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_48 != null) {
			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_48.text, TK_48.getCharPositionInLine(), TK_48.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_48Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_8 != null) {
			Leaf MINUSGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_8.text, MINUSGen_8.getCharPositionInLine(), MINUSGen_8.getLine());
			templateA43ReturnNode.getChildren().add(MINUSGen_8Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_49 != null) {
			Leaf TK_49Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_49.text, TK_49.getCharPositionInLine(), TK_49.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_49Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_24 != null) {
			Leaf DQUOTEGen_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_24.text, DQUOTEGen_24.getCharPositionInLine(), DQUOTEGen_24.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_24Leaf);
		}
	    // Create a CST Node
		if($rule_placeholderGen_1 != null) {
	        for(Iterator it = $rule_placeholderGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA43ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_25 != null) {
			Leaf DQUOTEGen_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_25.text, DQUOTEGen_25.getCharPositionInLine(), DQUOTEGen_25.getLine());
			templateA43ReturnNode.getChildren().add(DQUOTEGen_25Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_50 != null) {
			Leaf TK_50Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_50.text, TK_50.getCharPositionInLine(), TK_50.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_50Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_51 != null) {
			Leaf TK_51Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_51.text, TK_51.getCharPositionInLine(), TK_51.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_51Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_52 != null) {
			Leaf TK_52Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_52.text, TK_52.getCharPositionInLine(), TK_52.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_52Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_53 != null) {
			Leaf TK_53Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_53.text, TK_53.getCharPositionInLine(), TK_53.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_53Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_54 != null) {
			Leaf TK_54Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_54.text, TK_54.getCharPositionInLine(), TK_54.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_54Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_55 != null) {
			Leaf TK_55Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_55.text, TK_55.getCharPositionInLine(), TK_55.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_55Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_56 != null) {
			Leaf TK_56Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_56.text, TK_56.getCharPositionInLine(), TK_56.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_56Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_57 != null) {
			Leaf TK_57Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_57.text, TK_57.getCharPositionInLine(), TK_57.getLine());
	 		templateA43ReturnNode.getChildren().add(TK_57Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA43.returnNode = templateA43ReturnNode;
	}
	;

// .dpkg-new
templateA44 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3=';' |  TK_4='\n')  TK_5='then' ( TK_6='\n')?  TK_7='if'  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_8='e'  DQUOTEGen_4=DQUOTE  oldGen+=old  DQUOTEGen_5=DQUOTE   RSBRACKGen_1=RSBRACK ( TK_9=';' |  TK_10='\n')  TK_11='then' ( TK_12='\n')?  TK_13='echo'  DQUOTEGen_6=DQUOTE   TK_14='Preserving'  TK_15='user'  TK_16='changes'  TK_17='to'  rule_placeholderGen+=rule_placeholder 
	 DOTGen=DOT  DOTGen_1=DOT  DOTGen_2=DOT  DQUOTEGen_7=DQUOTE ( TK_18=';' |  TK_19='\n')   TK_20='if'  LSBRACKGen_2=LSBRACK  MINUSGen_1=MINUS  TK_21='e'  DQUOTEGen_8=DQUOTE  rule_placeholderGen_1+=rule_placeholder  DQUOTEGen_9=DQUOTE   RSBRACKGen_2=RSBRACK ( TK_22=';' |  TK_23='\n')  TK_24='then' ( TK_25='\n')?  TK_26='mv'  MINUSGen_2=MINUS  TK_27='f'  DQUOTEGen_10=DQUOTE  rule_placeholderGen_2+=rule_placeholder  DQUOTEGen_11=DQUOTE   DQUOTEGen_12=DQUOTE  wordGen+=word  DQUOTEGen_13=DQUOTE  ( TK_28='\n' |  TK_29=';')  TK_30='fi' ( TK_31='\n' |  TK_32=';')   TK_33='mv'  MINUSGen_3=MINUS  TK_34='f'  DQUOTEGen_14=DQUOTE  oldGen_1+=old  DQUOTEGen_15=DQUOTE   DQUOTEGen_16=DQUOTE  rule_placeholderGen_3+=rule_placeholder  DQUOTEGen_17=DQUOTE  ( TK_35='\n' |  TK_36=';')  TK_37='fi'  ( TK_38='\n' |  TK_39=';')  TK_40='fi' ( TK_41='\n' |  TK_42=';') 
	{
		// Create return CST Node
		Node templateA44ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA44ReturnNode.setKind("templateA44");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA44ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA44ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA44ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA44ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA44ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($oldGen != null) {
	        for(Iterator it = $oldGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA44ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a CST Node
		if($rule_placeholderGen != null) {
	        for(Iterator it = $rule_placeholderGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen.text, DOTGen.getCharPositionInLine(), DOTGen.getLine());
			templateA44ReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Leaf
		if($DOTGen_1 != null) {
			Leaf DOTGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen_1.text, DOTGen_1.getCharPositionInLine(), DOTGen_1.getLine());
			templateA44ReturnNode.getChildren().add(DOTGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DOTGen_2 != null) {
			Leaf DOTGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen_2.text, DOTGen_2.getCharPositionInLine(), DOTGen_2.getLine());
			templateA44ReturnNode.getChildren().add(DOTGen_2Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_2 != null) {
			Leaf LSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_2.text, LSBRACKGen_2.getCharPositionInLine(), LSBRACKGen_2.getLine());
			templateA44ReturnNode.getChildren().add(LSBRACKGen_2Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen_1 != null) {
			Leaf MINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_1.text, MINUSGen_1.getCharPositionInLine(), MINUSGen_1.getLine());
			templateA44ReturnNode.getChildren().add(MINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_8 != null) {
			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_8.text, DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
		}
	    // Create a CST Node
		if($rule_placeholderGen_1 != null) {
	        for(Iterator it = $rule_placeholderGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_9 != null) {
			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_9.text, DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_2 != null) {
			Leaf RSBRACKGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_2.text, RSBRACKGen_2.getCharPositionInLine(), RSBRACKGen_2.getLine());
			templateA44ReturnNode.getChildren().add(RSBRACKGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_2 != null) {
			Leaf MINUSGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_2.text, MINUSGen_2.getCharPositionInLine(), MINUSGen_2.getLine());
			templateA44ReturnNode.getChildren().add(MINUSGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_10 != null) {
			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_10.text, DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
		}
	    // Create a CST Node
		if($rule_placeholderGen_2 != null) {
	        for(Iterator it = $rule_placeholderGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_11 != null) {
			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_11.text, DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_12 != null) {
			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_12.text, DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_13 != null) {
			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_13.text, DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a CST Leaf
		if($MINUSGen_3 != null) {
			Leaf MINUSGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen_3.text, MINUSGen_3.getCharPositionInLine(), MINUSGen_3.getLine());
			templateA44ReturnNode.getChildren().add(MINUSGen_3Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_14 != null) {
			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_14.text, DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
		}
	    // Create a CST Node
		if($oldGen_1 != null) {
	        for(Iterator it = $oldGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.old_return r = (DebianGrammarParser.old_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("old");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_15 != null) {
			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_15.text, DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_16 != null) {
			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_16.text, DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
		}
	    // Create a CST Node
		if($rule_placeholderGen_3 != null) {
	        for(Iterator it = $rule_placeholderGen_3.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.rule_placeholder_return r = (DebianGrammarParser.rule_placeholder_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("rule_placeholder");
	            	templateA44ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_17 != null) {
			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_17.text, DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
			templateA44ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_40Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_41 != null) {
			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_41.text, TK_41.getCharPositionInLine(), TK_41.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_41Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_42 != null) {
			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_42.text, TK_42.getCharPositionInLine(), TK_42.getLine());
	 		templateA44ReturnNode.getChildren().add(TK_42Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA44.returnNode = templateA44ReturnNode;
	}
	;

templateA45 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3=';' |  TK_4='\n')  TK_5='then' ( TK_6='\n')?  LPARGen=LPAR  ( TK_7='\n')?  TK_8='while'  TK_9='read'  TK_10='line' ( TK_11=';')?  TK_12='do'  ( TK_13='\n')?  TK_14='set'  DMINUSGen=DMINUS  TK_15='$line'  ( TK_16=';' |  TK_17='\n')  TK_18='dir'  EQUGen_1=EQU  DQUOTEGen_4=DQUOTE  input_variableGen_1+=input_variable  DQUOTEGen_5=DQUOTE  TK_19=';'  TK_20='mode'  EQUGen_2=EQU  DQUOTEGen_6=DQUOTE  input_variableGen_2+=input_variable  DQUOTEGen_7=DQUOTE  TK_21=';'  TK_22='user'  EQUGen_3=EQU  DQUOTEGen_8=DQUOTE  input_variableGen_3+=input_variable  DQUOTEGen_9=DQUOTE  TK_23=';'  TK_24='group'  EQUGen_4=EQU  DQUOTEGen_10=DQUOTE 
	 input_variableGen_4+=input_variable  DQUOTEGen_11=DQUOTE  ( TK_25=';' |  TK_26='\n')
	  TK_27='if'  LSBRACKGen_1=LSBRACK  EXCLGen=EXCL  MINUSGen=MINUS  TK_28='e'  DQUOTEGen_12=DQUOTE  TK_29='$dir'  DQUOTEGen_13=DQUOTE  RSBRACKGen_1=RSBRACK  
	( TK_30=';' |  TK_31='\n')  TK_32='then'  ( TK_33='\n')?  TK_34='if'  TK_35='mkdir'  DQUOTEGen_14=DQUOTE  TK_36='$dir'  DQUOTEGen_15=DQUOTE  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  ( TK_37=';' |  TK_38='\n')  TK_39='then' ( TK_40='\n')?  TK_41='chown'  DQUOTEGen_16=DQUOTE  TK_42='$user'  DQUOTEGen_17=DQUOTE  COLONGen=COLON  DQUOTEGen_18=DQUOTE  TK_43='$group'  DQUOTEGen_19=DQUOTE  DQUOTEGen_20=DQUOTE  TK_44='$dir'  DQUOTEGen_21=DQUOTE  ( TK_45=';' |  TK_46='\n')  TK_47='chmod'  DQUOTEGen_22=DQUOTE  TK_48='$mode'  DQUOTEGen_23=DQUOTE  DQUOTEGen_24=DQUOTE  TK_49='$dir'  DQUOTEGen_25=DQUOTE ( TK_50='\n' |  TK_51=';')  TK_52='fi'( TK_53='\n' |  TK_54=';')  TK_55='fi'  ( TK_56=';' |  TK_57='\n')  TK_58='done' ( TK_59=';' |  TK_60='\n')  RPARGen=RPAR  DLESSGen=DLESS 
	 TK_61='DATA' ( TK_62='\n' |  TK_63=';' ) ( dirlistGen+=dirlist ( permsGen+=perms  ownerGen+=owner  groupGen+=group)? ( TK_64=';' |  TK_65='\n'))+  TK_66='DATA' ( TK_67='\n' |  TK_68=';')  TK_69='fi' ( TK_70='\n' |  TK_71=';') 
	{
		// Create return CST Node
		Node templateA45ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA45ReturnNode.setKind("templateA45");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA45ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA45ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA45ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA45ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Leaf
		if($LPARGen != null) {
			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", $LPARGen.text, LPARGen.getCharPositionInLine(), LPARGen.getLine());
			templateA45ReturnNode.getChildren().add(LPARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA45ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_17Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_1 != null) {
			Leaf EQUGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_1.text, EQUGen_1.getCharPositionInLine(), EQUGen_1.getLine());
			templateA45ReturnNode.getChildren().add(EQUGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_4 != null) {
			Leaf DQUOTEGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_4.text, DQUOTEGen_4.getCharPositionInLine(), DQUOTEGen_4.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_4Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_1 != null) {
	        for(Iterator it = $input_variableGen_1.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA45ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_5 != null) {
			Leaf DQUOTEGen_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_5.text, DQUOTEGen_5.getCharPositionInLine(), DQUOTEGen_5.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_5Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_19Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_2 != null) {
			Leaf EQUGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_2.text, EQUGen_2.getCharPositionInLine(), EQUGen_2.getLine());
			templateA45ReturnNode.getChildren().add(EQUGen_2Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_6 != null) {
			Leaf DQUOTEGen_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_6.text, DQUOTEGen_6.getCharPositionInLine(), DQUOTEGen_6.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_6Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_2 != null) {
	        for(Iterator it = $input_variableGen_2.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA45ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_7 != null) {
			Leaf DQUOTEGen_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_7.text, DQUOTEGen_7.getCharPositionInLine(), DQUOTEGen_7.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_7Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_22Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_3 != null) {
			Leaf EQUGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_3.text, EQUGen_3.getCharPositionInLine(), EQUGen_3.getLine());
			templateA45ReturnNode.getChildren().add(EQUGen_3Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_8 != null) {
			Leaf DQUOTEGen_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_8.text, DQUOTEGen_8.getCharPositionInLine(), DQUOTEGen_8.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_8Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_3 != null) {
	        for(Iterator it = $input_variableGen_3.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA45ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_9 != null) {
			Leaf DQUOTEGen_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_9.text, DQUOTEGen_9.getCharPositionInLine(), DQUOTEGen_9.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_9Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_23 != null) {
			Leaf TK_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_23.text, TK_23.getCharPositionInLine(), TK_23.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_23Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_24 != null) {
			Leaf TK_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_24.text, TK_24.getCharPositionInLine(), TK_24.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_24Leaf);
	 	}
	    // Create a CST Leaf
		if($EQUGen_4 != null) {
			Leaf EQUGen_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen_4.text, EQUGen_4.getCharPositionInLine(), EQUGen_4.getLine());
			templateA45ReturnNode.getChildren().add(EQUGen_4Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_10 != null) {
			Leaf DQUOTEGen_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_10.text, DQUOTEGen_10.getCharPositionInLine(), DQUOTEGen_10.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_10Leaf);
		}
	    // Create a CST Node
		if($input_variableGen_4 != null) {
	        for(Iterator it = $input_variableGen_4.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA45ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_11 != null) {
			Leaf DQUOTEGen_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_11.text, DQUOTEGen_11.getCharPositionInLine(), DQUOTEGen_11.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_11Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_25 != null) {
			Leaf TK_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_25.text, TK_25.getCharPositionInLine(), TK_25.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_25Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_26 != null) {
			Leaf TK_26Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_26.text, TK_26.getCharPositionInLine(), TK_26.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_26Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_27 != null) {
			Leaf TK_27Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_27.text, TK_27.getCharPositionInLine(), TK_27.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_27Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA45ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EXCLGen != null) {
			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", $EXCLGen.text, EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
			templateA45ReturnNode.getChildren().add(EXCLGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA45ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_28 != null) {
			Leaf TK_28Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_28.text, TK_28.getCharPositionInLine(), TK_28.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_28Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_12 != null) {
			Leaf DQUOTEGen_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_12.text, DQUOTEGen_12.getCharPositionInLine(), DQUOTEGen_12.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_12Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_29 != null) {
			Leaf TK_29Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_29.text, TK_29.getCharPositionInLine(), TK_29.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_29Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_13 != null) {
			Leaf DQUOTEGen_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_13.text, DQUOTEGen_13.getCharPositionInLine(), DQUOTEGen_13.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_13Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA45ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_30 != null) {
			Leaf TK_30Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_30.text, TK_30.getCharPositionInLine(), TK_30.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_30Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_31 != null) {
			Leaf TK_31Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_31.text, TK_31.getCharPositionInLine(), TK_31.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_31Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_32 != null) {
			Leaf TK_32Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_32.text, TK_32.getCharPositionInLine(), TK_32.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_32Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_33 != null) {
			Leaf TK_33Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_33.text, TK_33.getCharPositionInLine(), TK_33.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_33Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_34 != null) {
			Leaf TK_34Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_34.text, TK_34.getCharPositionInLine(), TK_34.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_34Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_35 != null) {
			Leaf TK_35Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_35.text, TK_35.getCharPositionInLine(), TK_35.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_35Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_14 != null) {
			Leaf DQUOTEGen_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_14.text, DQUOTEGen_14.getCharPositionInLine(), DQUOTEGen_14.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_14Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_36 != null) {
			Leaf TK_36Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_36.text, TK_36.getCharPositionInLine(), TK_36.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_36Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_15 != null) {
			Leaf DQUOTEGen_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_15.text, DQUOTEGen_15.getCharPositionInLine(), DQUOTEGen_15.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_15Leaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA45ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA45ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA45ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_37 != null) {
			Leaf TK_37Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_37.text, TK_37.getCharPositionInLine(), TK_37.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_37Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_38 != null) {
			Leaf TK_38Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_38.text, TK_38.getCharPositionInLine(), TK_38.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_38Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_39 != null) {
			Leaf TK_39Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_39.text, TK_39.getCharPositionInLine(), TK_39.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_39Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_40 != null) {
			Leaf TK_40Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_40.text, TK_40.getCharPositionInLine(), TK_40.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_40Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_41 != null) {
			Leaf TK_41Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_41.text, TK_41.getCharPositionInLine(), TK_41.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_41Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_16 != null) {
			Leaf DQUOTEGen_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_16.text, DQUOTEGen_16.getCharPositionInLine(), DQUOTEGen_16.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_16Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_42 != null) {
			Leaf TK_42Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_42.text, TK_42.getCharPositionInLine(), TK_42.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_42Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_17 != null) {
			Leaf DQUOTEGen_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_17.text, DQUOTEGen_17.getCharPositionInLine(), DQUOTEGen_17.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_17Leaf);
		}
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			templateA45ReturnNode.getChildren().add(COLONGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_18 != null) {
			Leaf DQUOTEGen_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_18.text, DQUOTEGen_18.getCharPositionInLine(), DQUOTEGen_18.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_18Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_43 != null) {
			Leaf TK_43Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_43.text, TK_43.getCharPositionInLine(), TK_43.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_43Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_19 != null) {
			Leaf DQUOTEGen_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_19.text, DQUOTEGen_19.getCharPositionInLine(), DQUOTEGen_19.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_19Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_20 != null) {
			Leaf DQUOTEGen_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_20.text, DQUOTEGen_20.getCharPositionInLine(), DQUOTEGen_20.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_20Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_44 != null) {
			Leaf TK_44Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_44.text, TK_44.getCharPositionInLine(), TK_44.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_44Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_21 != null) {
			Leaf DQUOTEGen_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_21.text, DQUOTEGen_21.getCharPositionInLine(), DQUOTEGen_21.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_21Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_45 != null) {
			Leaf TK_45Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_45.text, TK_45.getCharPositionInLine(), TK_45.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_45Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_46 != null) {
			Leaf TK_46Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_46.text, TK_46.getCharPositionInLine(), TK_46.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_46Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_47 != null) {
			Leaf TK_47Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_47.text, TK_47.getCharPositionInLine(), TK_47.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_47Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_22 != null) {
			Leaf DQUOTEGen_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_22.text, DQUOTEGen_22.getCharPositionInLine(), DQUOTEGen_22.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_22Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_48 != null) {
			Leaf TK_48Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_48.text, TK_48.getCharPositionInLine(), TK_48.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_48Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_23 != null) {
			Leaf DQUOTEGen_23Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_23.text, DQUOTEGen_23.getCharPositionInLine(), DQUOTEGen_23.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_23Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_24 != null) {
			Leaf DQUOTEGen_24Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_24.text, DQUOTEGen_24.getCharPositionInLine(), DQUOTEGen_24.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_24Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_49 != null) {
			Leaf TK_49Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_49.text, TK_49.getCharPositionInLine(), TK_49.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_49Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_25 != null) {
			Leaf DQUOTEGen_25Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_25.text, DQUOTEGen_25.getCharPositionInLine(), DQUOTEGen_25.getLine());
			templateA45ReturnNode.getChildren().add(DQUOTEGen_25Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_50 != null) {
			Leaf TK_50Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_50.text, TK_50.getCharPositionInLine(), TK_50.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_50Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_51 != null) {
			Leaf TK_51Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_51.text, TK_51.getCharPositionInLine(), TK_51.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_51Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_52 != null) {
			Leaf TK_52Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_52.text, TK_52.getCharPositionInLine(), TK_52.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_52Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_53 != null) {
			Leaf TK_53Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_53.text, TK_53.getCharPositionInLine(), TK_53.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_53Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_54 != null) {
			Leaf TK_54Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_54.text, TK_54.getCharPositionInLine(), TK_54.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_54Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_55 != null) {
			Leaf TK_55Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_55.text, TK_55.getCharPositionInLine(), TK_55.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_55Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_56 != null) {
			Leaf TK_56Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_56.text, TK_56.getCharPositionInLine(), TK_56.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_56Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_57 != null) {
			Leaf TK_57Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_57.text, TK_57.getCharPositionInLine(), TK_57.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_57Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_58 != null) {
			Leaf TK_58Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_58.text, TK_58.getCharPositionInLine(), TK_58.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_58Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_59 != null) {
			Leaf TK_59Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_59.text, TK_59.getCharPositionInLine(), TK_59.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_59Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_60 != null) {
			Leaf TK_60Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_60.text, TK_60.getCharPositionInLine(), TK_60.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_60Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARGen != null) {
			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", $RPARGen.text, RPARGen.getCharPositionInLine(), RPARGen.getLine());
			templateA45ReturnNode.getChildren().add(RPARGenLeaf);
		}
	    // Create a CST Leaf
		if($DLESSGen != null) {
			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", $DLESSGen.text, DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
			templateA45ReturnNode.getChildren().add(DLESSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_61 != null) {
			Leaf TK_61Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_61.text, TK_61.getCharPositionInLine(), TK_61.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_61Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_62 != null) {
			Leaf TK_62Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_62.text, TK_62.getCharPositionInLine(), TK_62.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_62Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_63 != null) {
			Leaf TK_63Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_63.text, TK_63.getCharPositionInLine(), TK_63.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_63Leaf);
	 	}

		// Create a special CST Node for terminal dirlistGen aggregation
		if($dirlistGen != null) {
	    for(int pos = 0; pos < $dirlistGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($dirlistGen != null) {		
	    	DebianGrammarParser.dirlist_return r = (DebianGrammarParser.dirlist_return) $dirlistGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("dirlist");
	    		templateA45ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($permsGen != null) {		
	    	DebianGrammarParser.perms_return r = (DebianGrammarParser.perms_return) $permsGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("perms");
	    		templateA45ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($ownerGen != null) {		
	    	DebianGrammarParser.owner_return r = (DebianGrammarParser.owner_return) $ownerGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("owner");
	    		templateA45ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($groupGen != null) {		
	    	DebianGrammarParser.group_return r = (DebianGrammarParser.group_return) $groupGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("group");
	    		templateA45ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_64 != null) {
			Leaf TK_64Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_64.text, TK_64.getCharPositionInLine(), TK_64.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_64Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_65 != null) {
			Leaf TK_65Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_65.text, TK_65.getCharPositionInLine(), TK_65.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_65Leaf);
	 	}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_66 != null) {
			Leaf TK_66Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_66.text, TK_66.getCharPositionInLine(), TK_66.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_66Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_67 != null) {
			Leaf TK_67Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_67.text, TK_67.getCharPositionInLine(), TK_67.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_67Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_68 != null) {
			Leaf TK_68Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_68.text, TK_68.getCharPositionInLine(), TK_68.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_68Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_69 != null) {
			Leaf TK_69Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_69.text, TK_69.getCharPositionInLine(), TK_69.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_69Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_70 != null) {
			Leaf TK_70Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_70.text, TK_70.getCharPositionInLine(), TK_70.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_70Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_71 != null) {
			Leaf TK_71Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_71.text, TK_71.getCharPositionInLine(), TK_71.getLine());
	 		templateA45ReturnNode.getChildren().add(TK_71Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA45.returnNode = templateA45ReturnNode;
	} 
	;

templateA46 returns [Node returnNode] 
:  LPARGen=LPAR ( TK_0='\n')?  TK_1='while'  TK_2='read'  TK_3='dir' ( TK_4=';')?  TK_5='do' ( TK_6='\n')  TK_7='rmdir'  DQUOTEGen=DQUOTE  TK_8='$dir'  DQUOTEGen_1=DQUOTE  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  ORGen=OR  TK_9='true'  ( TK_10='\n' |  TK_11=';')  TK_12='done' ( TK_13='\n' |  TK_14=';')   RPARGen=RPAR  DLESSGen=DLESS  TK_15='DATA' ( TK_16='\n' |  TK_17=';' ) ( dirlistGen+=dirlist ( permsGen+=perms  ownerGen+=owner  groupGen+=group)? ( TK_18=';' |  TK_19='\n'))+  TK_20='DATA' ( TK_21='\n' |  TK_22=';') 
	{
		// Create return CST Node
		Node templateA46ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA46ReturnNode.setKind("templateA46");
	    // Create a CST Leaf
		if($LPARGen != null) {
			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", $LPARGen.text, LPARGen.getCharPositionInLine(), LPARGen.getLine());
			templateA46ReturnNode.getChildren().add(LPARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA46ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA46ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA46ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA46ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA46ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			templateA46ReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARGen != null) {
			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", $RPARGen.text, RPARGen.getCharPositionInLine(), RPARGen.getLine());
			templateA46ReturnNode.getChildren().add(RPARGenLeaf);
		}
	    // Create a CST Leaf
		if($DLESSGen != null) {
			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", $DLESSGen.text, DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
			templateA46ReturnNode.getChildren().add(DLESSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_16Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_17 != null) {
			Leaf TK_17Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_17.text, TK_17.getCharPositionInLine(), TK_17.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_17Leaf);
	 	}

		// Create a special CST Node for terminal dirlistGen aggregation
		if($dirlistGen != null) {
	    for(int pos = 0; pos < $dirlistGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($dirlistGen != null) {		
	    	DebianGrammarParser.dirlist_return r = (DebianGrammarParser.dirlist_return) $dirlistGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("dirlist");
	    		templateA46ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($permsGen != null) {		
	    	DebianGrammarParser.perms_return r = (DebianGrammarParser.perms_return) $permsGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("perms");
	    		templateA46ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($ownerGen != null) {		
	    	DebianGrammarParser.owner_return r = (DebianGrammarParser.owner_return) $ownerGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("owner");
	    		templateA46ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		// No Terminal extractor
	    if($groupGen != null) {		
	    	DebianGrammarParser.group_return r = (DebianGrammarParser.group_return) $groupGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("group");
	    		templateA46ReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a Token CST Leaf	
	    if($TK_18 != null) {
			Leaf TK_18Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_18.text, TK_18.getCharPositionInLine(), TK_18.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_18Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_19 != null) {
			Leaf TK_19Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_19.text, TK_19.getCharPositionInLine(), TK_19.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_19Leaf);
	 	}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_20 != null) {
			Leaf TK_20Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_20.text, TK_20.getCharPositionInLine(), TK_20.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_20Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_21 != null) {
			Leaf TK_21Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_21.text, TK_21.getCharPositionInLine(), TK_21.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_21Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_22 != null) {
			Leaf TK_22Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_22.text, TK_22.getCharPositionInLine(), TK_22.getLine());
	 		templateA46ReturnNode.getChildren().add(TK_22Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA46.returnNode = templateA46ReturnNode;
	}
	;

templateA47 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n' |  TK_4=';')  TK_5='then' ( TK_6='\n')?  TK_7='update-alternatives'  DMINUSGen=DMINUS  TK_8='install'  PATHXWINDOWGen=PATHXWINDOW   TK_9='x-window-manager'  wmGen+=wm  priorityGen+=priority ( TK_10='\n' |  TK_11=';')  TK_12='fi' ( TK_13='\n' |  TK_14=';') 
	{
		// Create return CST Node
		Node templateA47ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA47ReturnNode.setKind("templateA47");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA47ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA47ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA47ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA47ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA47ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA47ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA47ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA47ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA47ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHXWINDOWGen != null) {
			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", $PATHXWINDOWGen.text, PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
			templateA47ReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Node
		if($wmGen != null) {
	        for(Iterator it = $wmGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.wm_return r = (DebianGrammarParser.wm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("wm");
	            	templateA47ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($priorityGen != null) {
	        for(Iterator it = $priorityGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.priority_return r = (DebianGrammarParser.priority_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("priority");
	            	templateA47ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA47ReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA47.returnNode = templateA47ReturnNode;
	}
	;
	
templateA48 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='configure'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n' |  TK_4=';')  TK_5='then' ( TK_6='\n')?  TK_7='update-alternatives'  DMINUSGen=DMINUS  TK_8='install'  PATHXWINDOWGen=PATHXWINDOW  TK_9='x-window-manager'  wmGen+=wm  priorityGen+=priority  DMINUSGen_1=DMINUS  TK_10='slave'  PATHXMANAGERGen=PATHXMANAGER  TK_11='x-window-manager.1.gz'  wmmanGen+=wmman ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA48ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA48ReturnNode.setKind("templateA48");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA48ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA48ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA48ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA48ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA48ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA48ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA48ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA48ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA48ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHXWINDOWGen != null) {
			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", $PATHXWINDOWGen.text, PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
			templateA48ReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Node
		if($wmGen != null) {
	        for(Iterator it = $wmGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.wm_return r = (DebianGrammarParser.wm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("wm");
	            	templateA48ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($priorityGen != null) {
	        for(Iterator it = $priorityGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.priority_return r = (DebianGrammarParser.priority_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("priority");
	            	templateA48ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DMINUSGen_1 != null) {
			Leaf DMINUSGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen_1.text, DMINUSGen_1.getCharPositionInLine(), DMINUSGen_1.getLine());
			templateA48ReturnNode.getChildren().add(DMINUSGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHXMANAGERGen != null) {
			Leaf PATHXMANAGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXMANAGER", $PATHXMANAGERGen.text, PATHXMANAGERGen.getCharPositionInLine(), PATHXMANAGERGen.getLine());
			templateA48ReturnNode.getChildren().add(PATHXMANAGERGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a CST Node
		if($wmmanGen != null) {
	        for(Iterator it = $wmmanGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.wmman_return r = (DebianGrammarParser.wmman_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("wmman");
	            	templateA48ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA48ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA48.returnNode = templateA48ReturnNode;
	}
	;

templateA49 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='remove'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n' |  TK_4=';')  TK_5='then' ( TK_6='\n')?  TK_7='update-alternatives'  DMINUSGen=DMINUS  TK_8='remove'  TK_9='x-window-manager'  wmGen+=wm ( TK_10='\n' |  TK_11=';')  TK_12='fi' ( TK_13='\n' |  TK_14=';') 
	{
		// Create return CST Node
		Node templateA49ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA49ReturnNode.setKind("templateA49");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA49ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA49ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA49ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA49ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA49ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA49ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA49ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA49ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			templateA49ReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a CST Node
		if($wmGen != null) {
	        for(Iterator it = $wmGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.wm_return r = (DebianGrammarParser.wm_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("wm");
	            	templateA49ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA49ReturnNode.getChildren().add(TK_14Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA49.returnNode = templateA49ReturnNode;
	}
	;

templateA50 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  TK_2='which'  TK_3='update-fonts-dir'  GREATGen=GREAT  PATHNULLGen=PATHNULL  NUMBERGen=NUMBER  GREATANDGen=GREATAND  NUMBERGen_1=NUMBER  TK_4=';'  TK_5='then' ( TK_6='\n')?  cmdsGen+=cmds  TK_7='fi' ( TK_8='\n' |  TK_9=';') 
	{
		// Create return CST Node
		Node templateA50ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA50ReturnNode.setKind("templateA50");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA50ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA50ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA50ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			templateA50ReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			templateA50ReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($cmdsGen != null) {
	        for(Iterator it = $cmdsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.cmds_return r = (DebianGrammarParser.cmds_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cmds");
	            	templateA50ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA50ReturnNode.getChildren().add(TK_9Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA50.returnNode = templateA50ReturnNode;
	}
	;
	
templateA51 returns [Node returnNode] 
:  TK_0='if'  LSBRACKGen=LSBRACK  paramGen+=param  DQUOTEGen=DQUOTE  APGen=AP  TK_1='which'  TK_2='update-fonts-dir'  NUMBERGen=NUMBER  GREATGen=GREAT  PATHNULLGen=PATHNULL  APGen_1=AP  DQUOTEGen_1=DQUOTE  RSBRACKGen=RSBRACK  TK_3=';'  TK_4='then' ( TK_5='\n')?  cmdsGen+=cmds  TK_6='fi' ( TK_7='\n' |  TK_8=';') 
	{
		// Create return CST Node
		Node templateA51ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA51ReturnNode.setKind("templateA51");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA51ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	templateA51ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA51ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			templateA51ReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			templateA51ReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			templateA51ReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			templateA51ReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			templateA51ReturnNode.getChildren().add(APGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA51ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA51ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($cmdsGen != null) {
	        for(Iterator it = $cmdsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.cmds_return r = (DebianGrammarParser.cmds_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("cmds");
	            	templateA51ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA51ReturnNode.getChildren().add(TK_8Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA51.returnNode = templateA51ReturnNode;
	}
	;
	
templateA52 returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  LSBRACKGen=LSBRACK  DQUOTEGen=DQUOTE?  input_variableGen+=input_variable  DQUOTEGen_1=DQUOTE?  EQUGen=EQU  DQUOTEGen_2=DQUOTE?  TK_2='purge'  DQUOTEGen_3=DQUOTE?  RSBRACKGen=RSBRACK ( TK_3='\n')?  ANDGen=AND ( TK_4='\n')?  LSBRACKGen_1=LSBRACK  MINUSGen=MINUS  TK_5='e'  PATHCONFMODGen=PATHCONFMOD  RSBRACKGen_1=RSBRACK   TK_6=';'  TK_7='then' ( TK_8='\n')?  DOTGen=DOT  PATHCONFMODGen_1=PATHCONFMOD ( TK_9='\n' |  TK_10=';')  TK_11='db_purge' ( TK_12='\n' |  TK_13=';')  TK_14='fi' ( TK_15='\n' |  TK_16=';') 
	{
		// Create return CST Node
		Node templateA52ReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		templateA52ReturnNode.setKind("templateA52");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			templateA52ReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			templateA52ReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	templateA52ReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			templateA52ReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			templateA52ReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			templateA52ReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			templateA52ReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			templateA52ReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			templateA52ReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			templateA52ReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			templateA52ReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Leaf
		if($PATHCONFMODGen != null) {
			Leaf PATHCONFMODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", $PATHCONFMODGen.text, PATHCONFMODGen.getCharPositionInLine(), PATHCONFMODGen.getLine());
			templateA52ReturnNode.getChildren().add(PATHCONFMODGenLeaf);
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			templateA52ReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen.text, DOTGen.getCharPositionInLine(), DOTGen.getLine());
			templateA52ReturnNode.getChildren().add(DOTGenLeaf);
		}
	    // Create a CST Leaf
		if($PATHCONFMODGen_1 != null) {
			Leaf PATHCONFMODGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", $PATHCONFMODGen_1.text, PATHCONFMODGen_1.getCharPositionInLine(), PATHCONFMODGen_1.getLine());
			templateA52ReturnNode.getChildren().add(PATHCONFMODGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_9Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_10 != null) {
			Leaf TK_10Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_10.text, TK_10.getCharPositionInLine(), TK_10.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_10Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_11 != null) {
			Leaf TK_11Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_11.text, TK_11.getCharPositionInLine(), TK_11.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_11Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_12 != null) {
			Leaf TK_12Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_12.text, TK_12.getCharPositionInLine(), TK_12.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_12Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_13 != null) {
			Leaf TK_13Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_13.text, TK_13.getCharPositionInLine(), TK_13.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_13Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_14 != null) {
			Leaf TK_14Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_14.text, TK_14.getCharPositionInLine(), TK_14.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_14Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_15 != null) {
			Leaf TK_15Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_15.text, TK_15.getCharPositionInLine(), TK_15.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_15Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_16 != null) {
			Leaf TK_16Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_16.text, TK_16.getCharPositionInLine(), TK_16.getLine());
	 		templateA52ReturnNode.getChildren().add(TK_16Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$templateA52.returnNode = templateA52ReturnNode;
	}
	;

doc_id returns [Node returnNode] 
:  PATHDOCIDGen=PATHDOCID 
	{
		// Create return CST Node
		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		doc_idReturnNode.setKind("doc_id");
	    // Create a CST Leaf
		if($PATHDOCIDGen != null) {
			Leaf PATHDOCIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHDOCID", $PATHDOCIDGen.text, PATHDOCIDGen.getCharPositionInLine(), PATHDOCIDGen.getLine());
			doc_idReturnNode.getChildren().add(PATHDOCIDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$doc_id.returnNode = doc_idReturnNode;
	}
	|  pathGen+=path 
	{
		// Create return CST Node
		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		doc_idReturnNode.setKind("doc_id");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	doc_idReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$doc_id.returnNode = doc_idReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node doc_idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		doc_idReturnNode.setKind("doc_id");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	doc_idReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$doc_id.returnNode = doc_idReturnNode;
	}
	;

pack_path returns [Node returnNode] 
:  PATHPACKGen=PATHPACK 
	{
		// Create return CST Node
		Node pack_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pack_pathReturnNode.setKind("pack_path");
	    // Create a CST Leaf
		if($PATHPACKGen != null) {
			Leaf PATHPACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHPACK", $PATHPACKGen.text, PATHPACKGen.getCharPositionInLine(), PATHPACKGen.getLine());
			pack_pathReturnNode.getChildren().add(PATHPACKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pack_path.returnNode = pack_pathReturnNode;
	}
	;

pack returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node packReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		packReturnNode.setKind("pack");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	packReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$pack.returnNode = packReturnNode;
	}
	;

schemas returns [Node returnNode] 
:  wordGen+=word 
	{
		// Create return CST Node
		Node schemasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schemasReturnNode.setKind("schemas");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	schemasReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$schemas.returnNode = schemasReturnNode;
	}
	|  pathGen+=path 
	{
		// Create return CST Node
		Node schemasReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		schemasReturnNode.setKind("schemas");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	schemasReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$schemas.returnNode = schemasReturnNode;
	}
	;

dirlist returns [Node returnNode] 
:  pathGen+=path 
	{
		// Create return CST Node
		Node dirlistReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		dirlistReturnNode.setKind("dirlist");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	dirlistReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$dirlist.returnNode = dirlistReturnNode;
	}
	;

file returns [Node returnNode] 
:  pathGen+=path 
	{
		// Create return CST Node
		Node fileReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fileReturnNode.setKind("file");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	fileReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$file.returnNode = fileReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node fileReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		fileReturnNode.setKind("file");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	fileReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$file.returnNode = fileReturnNode;
	}
	;

old returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node oldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		oldReturnNode.setKind("old");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	oldReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$old.returnNode = oldReturnNode;
	}
	;

rule_placeholder returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node rule_placeholderReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		rule_placeholderReturnNode.setKind("rule_placeholder");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	rule_placeholderReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$rule_placeholder.returnNode = rule_placeholderReturnNode;
	}
	;

kvers returns [Node returnNode] 
:  NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node kversReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		kversReturnNode.setKind("kvers");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			kversReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$kvers.returnNode = kversReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node kversReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		kversReturnNode.setKind("kvers");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	kversReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$kvers.returnNode = kversReturnNode;
	}
	;

kvers_path returns [Node returnNode] 
:  PATHKVERSGen=PATHKVERS 
	{
		// Create return CST Node
		Node kvers_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		kvers_pathReturnNode.setKind("kvers_path");
	    // Create a CST Leaf
		if($PATHKVERSGen != null) {
			Leaf PATHKVERSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHKVERS", $PATHKVERSGen.text, PATHKVERSGen.getCharPositionInLine(), PATHKVERSGen.getLine());
			kvers_pathReturnNode.getChildren().add(PATHKVERSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$kvers_path.returnNode = kvers_pathReturnNode;
	}
	;

pyver returns [Node returnNode] 
:  NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node pyverReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pyverReturnNode.setKind("pyver");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			pyverReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$pyver.returnNode = pyverReturnNode;
	}
	;

wm returns [Node returnNode] 
:  wordGen+=word 
	{
		// Create return CST Node
		Node wmReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wmReturnNode.setKind("wm");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	wmReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$wm.returnNode = wmReturnNode;
	}
	;

priority returns [Node returnNode] 
:  paramGen+=param 
	{
		// Create return CST Node
		Node priorityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		priorityReturnNode.setKind("priority");
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	priorityReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$priority.returnNode = priorityReturnNode;
	}
	;

wmman returns [Node returnNode] 
:  paramGen+=param 
	{
		// Create return CST Node
		Node wmmanReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wmmanReturnNode.setKind("wmman");
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	wmmanReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$wmman.returnNode = wmmanReturnNode;
	}
	;

cmds returns [Node returnNode] 
:  statementGen+=statement+ 
	{
		// Create return CST Node
		Node cmdsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		cmdsReturnNode.setKind("cmds");
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	cmdsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$cmds.returnNode = cmdsReturnNode;
	}
	;

initparms returns [Node returnNode] 
:  option_paramGen+=option_param 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Node
		if($option_paramGen != null) {
	        for(Iterator it = $option_paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.option_param_return r = (DebianGrammarParser.option_param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("option_param");
	            	initparmsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  wordGen+=word 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	initparmsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  pathGen+=path 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	initparmsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  COLONGen=COLON 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			initparmsReturnNode.getChildren().add(COLONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  APGen=AP  nestedCommandGen+=nestedCommand  APGen_1=AP 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			initparmsReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a CST Node
		if($nestedCommandGen != null) {
	        for(Iterator it = $nestedCommandGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.nestedCommand_return r = (DebianGrammarParser.nestedCommand_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nestedCommand");
	            	initparmsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			initparmsReturnNode.getChildren().add(APGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			initparmsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  command_nameGen+=command_name 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Node
		if($command_nameGen != null) {
	        for(Iterator it = $command_nameGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_name_return r = (DebianGrammarParser.command_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_name");
	            	initparmsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  BSLASHGen=BSLASH 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($BSLASHGen != null) {
			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen.text, BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
			initparmsReturnNode.getChildren().add(BSLASHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  PSINGLEGen=PSINGLE 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($PSINGLEGen != null) {
			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen.text, PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
			initparmsReturnNode.getChildren().add(PSINGLEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  TILDEGen=TILDE 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a CST Leaf
		if($TILDEGen != null) {
			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", $TILDEGen.text, TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
			initparmsReturnNode.getChildren().add(TILDEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	|  TK_0='*' 
	{
		// Create return CST Node
		Node initparmsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		initparmsReturnNode.setKind("initparms");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		initparmsReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$initparms.returnNode = initparmsReturnNode;
	}
	;

centralcat returns [Node returnNode] 
:  pathGen+=path 
	{
		// Create return CST Node
		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		centralcatReturnNode.setKind("centralcat");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	centralcatReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$centralcat.returnNode = centralcatReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		centralcatReturnNode.setKind("centralcat");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	centralcatReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$centralcat.returnNode = centralcatReturnNode;
	}
	|  varGen+=var 
	{
		// Create return CST Node
		Node centralcatReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		centralcatReturnNode.setKind("centralcat");
	    // Create a CST Node
		if($varGen != null) {
	        for(Iterator it = $varGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.var_return r = (DebianGrammarParser.var_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("var");
	            	centralcatReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$centralcat.returnNode = centralcatReturnNode;
	}
	;

ordcats returns [Node returnNode] 
:  paramGen+=param 
	{
		// Create return CST Node
		Node ordcatsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ordcatsReturnNode.setKind("ordcats");
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	ordcatsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$ordcats.returnNode = ordcatsReturnNode;
	}
	;

script_path returns [Node returnNode] 
:  PATHSCRIPTGen=PATHSCRIPT 
	{
		// Create return CST Node
		Node script_pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		script_pathReturnNode.setKind("script_path");
	    // Create a CST Leaf
		if($PATHSCRIPTGen != null) {
			Leaf PATHSCRIPTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSCRIPT", $PATHSCRIPTGen.text, PATHSCRIPTGen.getCharPositionInLine(), PATHSCRIPTGen.getLine());
			script_pathReturnNode.getChildren().add(PATHSCRIPTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$script_path.returnNode = script_pathReturnNode;
	}
	;

script returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node scriptReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		scriptReturnNode.setKind("script");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	scriptReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$script.returnNode = scriptReturnNode;
	}
	;
	
error_handler returns [Node returnNode] 
:  simple_commandGen+=simple_command 
	{
		// Create return CST Node
		Node error_handlerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		error_handlerReturnNode.setKind("error_handler");
	    // Create a CST Node
		if($simple_commandGen != null) {
	        for(Iterator it = $simple_commandGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.simple_command_return r = (DebianGrammarParser.simple_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("simple_command");
	            	error_handlerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$error_handler.returnNode = error_handlerReturnNode;
	}
	;

owner returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node ownerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ownerReturnNode.setKind("owner");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	ownerReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$owner.returnNode = ownerReturnNode;
	}
	;

perms returns [Node returnNode] 
:  NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node permsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		permsReturnNode.setKind("perms");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			permsReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$perms.returnNode = permsReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node permsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		permsReturnNode.setKind("perms");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	permsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$perms.returnNode = permsReturnNode;
	}
	;

group returns [Node returnNode] 
:  idGen+=id 
	{
		// Create return CST Node
		Node groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		groupReturnNode.setKind("group");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	groupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$group.returnNode = groupReturnNode;
	}
	;

function_statement returns [Node returnNode] 
:  TK_0='function' ( TK_1='\n')?  idGen+=id ( TK_2='\n')?  statement_groupGen+=statement_group 
	{
		// Create return CST Node
		Node function_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_statementReturnNode.setKind("function_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		function_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		function_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	function_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		function_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a CST Node
		if($statement_groupGen != null) {
	        for(Iterator it = $statement_groupGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_group_return r = (DebianGrammarParser.statement_group_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement_group");
	            	function_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_statement.returnNode = function_statementReturnNode;
	}
	|  idGen+=id  LPARGen=LPAR  RPARGen=RPAR ( TK_0='\n')?  statement_groupGen+=statement_group 
	{
		// Create return CST Node
		Node function_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		function_statementReturnNode.setKind("function_statement");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	function_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($LPARGen != null) {
			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", $LPARGen.text, LPARGen.getCharPositionInLine(), LPARGen.getLine());
			function_statementReturnNode.getChildren().add(LPARGenLeaf);
		}
	    // Create a CST Leaf
		if($RPARGen != null) {
			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", $RPARGen.text, RPARGen.getCharPositionInLine(), RPARGen.getLine());
			function_statementReturnNode.getChildren().add(RPARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		function_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statement_groupGen != null) {
	        for(Iterator it = $statement_groupGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_group_return r = (DebianGrammarParser.statement_group_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement_group");
	            	function_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$function_statement.returnNode = function_statementReturnNode;
	}
	;

redirection_statement returns [Node returnNode] 
:  statement_groupGen+=statement_group  redirectionGen+=redirection ( TK_0='\n' |  TK_1=';') 
	{
		// Create return CST Node
		Node redirection_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirection_statementReturnNode.setKind("redirection_statement");
	    // Create a CST Node
		if($statement_groupGen != null) {
	        for(Iterator it = $statement_groupGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_group_return r = (DebianGrammarParser.statement_group_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement_group");
	            	redirection_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($redirectionGen != null) {
	        for(Iterator it = $redirectionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.redirection_return r = (DebianGrammarParser.redirection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("redirection");
	            	redirection_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		redirection_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		redirection_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$redirection_statement.returnNode = redirection_statementReturnNode;
	}
	;

redirection returns [Node returnNode] 
:  NUMBERGen=NUMBER? ( GREATGen=GREAT |  DLESSGen=DLESS |  LESSGen=LESS |  DGREATGen=DGREAT |  LESSANDGen=LESSAND |  DLESSDASHGen=DLESSDASH |  LESSGREATGen=LESSGREAT
	  |  GREATANDGen=GREATAND |  ANDGREATGen=ANDGREAT |  CLOBBERGen=CLOBBER) (  pathGen+=path |  wordGen+=word |  varGen+=var) 
	{
		// Create return CST Node
		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirectionReturnNode.setKind("redirection");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATGen != null) {
			Leaf GREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREAT", $GREATGen.text, GREATGen.getCharPositionInLine(), GREATGen.getLine());
			redirectionReturnNode.getChildren().add(GREATGenLeaf);
		}
	    // Create a CST Leaf
		if($DLESSGen != null) {
			Leaf DLESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESS", $DLESSGen.text, DLESSGen.getCharPositionInLine(), DLESSGen.getLine());
			redirectionReturnNode.getChildren().add(DLESSGenLeaf);
		}
	    // Create a CST Leaf
		if($LESSGen != null) {
			Leaf LESSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESS", $LESSGen.text, LESSGen.getCharPositionInLine(), LESSGen.getLine());
			redirectionReturnNode.getChildren().add(LESSGenLeaf);
		}
	    // Create a CST Leaf
		if($DGREATGen != null) {
			Leaf DGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DGREAT", $DGREATGen.text, DGREATGen.getCharPositionInLine(), DGREATGen.getLine());
			redirectionReturnNode.getChildren().add(DGREATGenLeaf);
		}
	    // Create a CST Leaf
		if($LESSANDGen != null) {
			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", $LESSANDGen.text, LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
		}
	    // Create a CST Leaf
		if($DLESSDASHGen != null) {
			Leaf DLESSDASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DLESSDASH", $DLESSDASHGen.text, DLESSDASHGen.getCharPositionInLine(), DLESSDASHGen.getLine());
			redirectionReturnNode.getChildren().add(DLESSDASHGenLeaf);
		}
	    // Create a CST Leaf
		if($LESSGREATGen != null) {
			Leaf LESSGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSGREAT", $LESSGREATGen.text, LESSGREATGen.getCharPositionInLine(), LESSGREATGen.getLine());
			redirectionReturnNode.getChildren().add(LESSGREATGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ANDGREATGen != null) {
			Leaf ANDGREATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ANDGREAT", $ANDGREATGen.text, ANDGREATGen.getCharPositionInLine(), ANDGREATGen.getLine());
			redirectionReturnNode.getChildren().add(ANDGREATGenLeaf);
		}
	    // Create a CST Leaf
		if($CLOBBERGen != null) {
			Leaf CLOBBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("CLOBBER", $CLOBBERGen.text, CLOBBERGen.getCharPositionInLine(), CLOBBERGen.getLine());
			redirectionReturnNode.getChildren().add(CLOBBERGenLeaf);
		}
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	redirectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	redirectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($varGen != null) {
	        for(Iterator it = $varGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.var_return r = (DebianGrammarParser.var_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("var");
	            	redirectionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$redirection.returnNode = redirectionReturnNode;
	}
	|  LESSANDGen=LESSAND ( NUMBERGen=NUMBER |  MINUSGen=MINUS) 
	{
		// Create return CST Node
		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirectionReturnNode.setKind("redirection");
	    // Create a CST Leaf
		if($LESSANDGen != null) {
			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", $LESSANDGen.text, LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$redirection.returnNode = redirectionReturnNode;
	}
	|  NUMBERGen=NUMBER  LESSANDGen=LESSAND ( NUMBERGen_1=NUMBER |  MINUSGen=MINUS) 
	{
		// Create return CST Node
		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirectionReturnNode.setKind("redirection");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($LESSANDGen != null) {
			Leaf LESSANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LESSAND", $LESSANDGen.text, LESSANDGen.getCharPositionInLine(), LESSANDGen.getLine());
			redirectionReturnNode.getChildren().add(LESSANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$redirection.returnNode = redirectionReturnNode;
	}
	|  NUMBERGen=NUMBER?  GREATANDGen=GREATAND ( NUMBERGen_1=NUMBER |  MINUSGen=MINUS) 
	{
		// Create return CST Node
		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirectionReturnNode.setKind("redirection");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGenLeaf);
		}
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
		}
	    // Create a CST Leaf
		if($NUMBERGen_1 != null) {
			Leaf NUMBERGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen_1.text, NUMBERGen_1.getCharPositionInLine(), NUMBERGen_1.getLine());
			redirectionReturnNode.getChildren().add(NUMBERGen_1Leaf);
		}
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			redirectionReturnNode.getChildren().add(MINUSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$redirection.returnNode = redirectionReturnNode;
	} 
	|  GREATANDGen=GREATAND 
	{
		// Create return CST Node
		Node redirectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		redirectionReturnNode.setKind("redirection");
	    // Create a CST Leaf
		if($GREATANDGen != null) {
			Leaf GREATANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("GREATAND", $GREATANDGen.text, GREATANDGen.getCharPositionInLine(), GREATANDGen.getLine());
			redirectionReturnNode.getChildren().add(GREATANDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$redirection.returnNode = redirectionReturnNode;
	}
	;
	
statement_group returns [Node returnNode] 
:  LPARGen=LPAR ( TK_0='\n')?  statementGen+=statement*  RPARGen=RPAR ( TK_1='\n' |  TK_2=';') 
	{
		// Create return CST Node
		Node statement_groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statement_groupReturnNode.setKind("statement_group");
	    // Create a CST Leaf
		if($LPARGen != null) {
			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", $LPARGen.text, LPARGen.getCharPositionInLine(), LPARGen.getLine());
			statement_groupReturnNode.getChildren().add(LPARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statement_groupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RPARGen != null) {
			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", $RPARGen.text, RPARGen.getCharPositionInLine(), RPARGen.getLine());
			statement_groupReturnNode.getChildren().add(RPARGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement_group.returnNode = statement_groupReturnNode;
	}
	|  LGRAFGen=LGRAF ( TK_0='\n')?  statementGen+=statement* ( TK_1=';')?  RGRAFGen=RGRAF ( TK_2='\n' |  TK_3=';') 
	{
		// Create return CST Node
		Node statement_groupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		statement_groupReturnNode.setKind("statement_group");
	    // Create a CST Leaf
		if($LGRAFGen != null) {
			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", $LGRAFGen.text, LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
			statement_groupReturnNode.getChildren().add(LGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	statement_groupReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($RGRAFGen != null) {
			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", $RGRAFGen.text, RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
			statement_groupReturnNode.getChildren().add(RGRAFGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		statement_groupReturnNode.getChildren().add(TK_3Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$statement_group.returnNode = statement_groupReturnNode;
	}
	;

	
command_statement returns [Node returnNode] 
:  list_of_commandsGen+=list_of_commands ( TK_0='\n' |  TK_1=';') 
	{
		// Create return CST Node
		Node command_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_statementReturnNode.setKind("command_statement");
	    // Create a CST Node
		if($list_of_commandsGen != null) {
	        for(Iterator it = $list_of_commandsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.list_of_commands_return r = (DebianGrammarParser.list_of_commands_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("list_of_commands");
	            	command_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		command_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		command_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$command_statement.returnNode = command_statementReturnNode;
	}
 	;
	
command_name returns [Node returnNode] 
:  wordGen+=word 
	{
		// Create return CST Node
		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_nameReturnNode.setKind("command_name");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	command_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$command_name.returnNode = command_nameReturnNode;
	}
	|  pathGen+=path 
	{
		// Create return CST Node
		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_nameReturnNode.setKind("command_name");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	command_nameReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$command_name.returnNode = command_nameReturnNode;
	}
	|  DOTGen=DOT 
	{
		// Create return CST Node
		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_nameReturnNode.setKind("command_name");
	    // Create a CST Leaf
		if($DOTGen != null) {
			Leaf DOTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DOT", $DOTGen.text, DOTGen.getCharPositionInLine(), DOTGen.getLine());
			command_nameReturnNode.getChildren().add(DOTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$command_name.returnNode = command_nameReturnNode;
	}
	|  COLONGen=COLON 
	{
		// Create return CST Node
		Node command_nameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_nameReturnNode.setKind("command_name");
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			command_nameReturnNode.getChildren().add(COLONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$command_name.returnNode = command_nameReturnNode;
	}
	;

nestedCommand returns [Node returnNode] 
:  command_nameGen+=command_name  paramGen+=param* 
	{
		// Create return CST Node
		Node nestedCommandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		nestedCommandReturnNode.setKind("nestedCommand");
	    // Create a CST Node
		if($command_nameGen != null) {
	        for(Iterator it = $command_nameGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_name_return r = (DebianGrammarParser.command_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_name");
	            	nestedCommandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	nestedCommandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$nestedCommand.returnNode = nestedCommandReturnNode;
	} 
	;

control_statement returns [Node returnNode] 
:  if_statementGen+=if_statement 
	{
		// Create return CST Node
		Node control_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		control_statementReturnNode.setKind("control_statement");
	    // Create a CST Node
		if($if_statementGen != null) {
	        for(Iterator it = $if_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.if_statement_return r = (DebianGrammarParser.if_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("if_statement");
	            	control_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$control_statement.returnNode = control_statementReturnNode;
	}
	|  case_statementGen+=case_statement 
	{
		// Create return CST Node
		Node control_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		control_statementReturnNode.setKind("control_statement");
	    // Create a CST Node
		if($case_statementGen != null) {
	        for(Iterator it = $case_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.case_statement_return r = (DebianGrammarParser.case_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("case_statement");
	            	control_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$control_statement.returnNode = control_statementReturnNode;
	}
	;
   
loop_statement returns [Node returnNode] 
:  for_statementGen+=for_statement 
	{
		// Create return CST Node
		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		loop_statementReturnNode.setKind("loop_statement");
	    // Create a CST Node
		if($for_statementGen != null) {
	        for(Iterator it = $for_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.for_statement_return r = (DebianGrammarParser.for_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("for_statement");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$loop_statement.returnNode = loop_statementReturnNode;
	}
	|  until_statementGen+=until_statement 
	{
		// Create return CST Node
		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		loop_statementReturnNode.setKind("loop_statement");
	    // Create a CST Node
		if($until_statementGen != null) {
	        for(Iterator it = $until_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.until_statement_return r = (DebianGrammarParser.until_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("until_statement");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$loop_statement.returnNode = loop_statementReturnNode;
	}
	|  while_statementGen+=while_statement 
	{
		// Create return CST Node
		Node loop_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		loop_statementReturnNode.setKind("loop_statement");
	    // Create a CST Node
		if($while_statementGen != null) {
	        for(Iterator it = $while_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.while_statement_return r = (DebianGrammarParser.while_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("while_statement");
	            	loop_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$loop_statement.returnNode = loop_statementReturnNode;
	}
	;
    
until_statement returns [Node returnNode] 
:  TK_0='until' ( TK_1='\n')?  conditionGen+=condition ( TK_2=';' |  TK_3='\n')?  TK_4='do' ( TK_5='\n')?  statementGen+=statement*  TK_6='done' ( TK_7='\n' |  TK_8=';') 
	{
		// Create return CST Node
		Node until_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		until_statementReturnNode.setKind("until_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		until_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		until_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($conditionGen != null) {
	        for(Iterator it = $conditionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.condition_return r = (DebianGrammarParser.condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition");
	            	until_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		until_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		until_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		until_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		until_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	until_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		until_statementReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		until_statementReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		until_statementReturnNode.getChildren().add(TK_8Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$until_statement.returnNode = until_statementReturnNode;
	}
	;


while_statement returns [Node returnNode] 
:  TK_0='while' ( TK_1='\n')?  conditionGen+=condition ( TK_2=';' |  TK_3='\n')?  TK_4='do' ( TK_5='\n')?  statementGen+=statement*  TK_6='done' ( TK_7='\n' |  TK_8=';') 
	{
		// Create return CST Node
		Node while_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		while_statementReturnNode.setKind("while_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		while_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		while_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($conditionGen != null) {
	        for(Iterator it = $conditionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.condition_return r = (DebianGrammarParser.condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition");
	            	while_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		while_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		while_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		while_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		while_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	while_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		while_statementReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		while_statementReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		while_statementReturnNode.getChildren().add(TK_8Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$while_statement.returnNode = while_statementReturnNode;
	}
	;

case_statement returns [Node returnNode] 
:  TK_0='case' ( TK_1='\n')? ( DQUOTEGen=DQUOTE)?  wordGen+=word ( DQUOTEGen_1=DQUOTE)?  TK_2='in' ( TK_3='\n')?  body_caseGen+=body_case+  TK_4='esac' ( TK_5='\n' |  TK_6=';') 
	{
		// Create return CST Node
		Node case_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		case_statementReturnNode.setKind("case_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		case_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		case_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			case_statementReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			case_statementReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		case_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		case_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a CST Node
		if($body_caseGen != null) {
	        for(Iterator it = $body_caseGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.body_case_return r = (DebianGrammarParser.body_case_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("body_case");
	            	case_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		case_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		case_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		case_statementReturnNode.getChildren().add(TK_6Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$case_statement.returnNode = case_statementReturnNode;
	}
	;
	
body_case returns [Node returnNode] 
:  case_conditionGen+=case_condition ( TK_0='\n')? ( statementGen+=statement)* ( TK_1='\n')?  DSEMIGen=DSEMI? ( TK_2='\n')? 
	{
		// Create return CST Node
		Node body_caseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		body_caseReturnNode.setKind("body_case");
	    // Create a CST Node
		if($case_conditionGen != null) {
	        for(Iterator it = $case_conditionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.case_condition_return r = (DebianGrammarParser.case_condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("case_condition");
	            	body_caseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		body_caseReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	body_caseReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		body_caseReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($DSEMIGen != null) {
			Leaf DSEMIGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DSEMI", $DSEMIGen.text, DSEMIGen.getCharPositionInLine(), DSEMIGen.getLine());
			body_caseReturnNode.getChildren().add(DSEMIGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		body_caseReturnNode.getChildren().add(TK_2Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$body_case.returnNode = body_caseReturnNode;
	}
	;

case_condition returns [Node returnNode] 
:  LPARGen=LPAR?  wordGen+=word ( TK_0='\n')? ( VBARGen_List+=VBAR  wordGen_1+=word)* ( TK_1='\n')?  RPARGen=RPAR 
	{
		// Create return CST Node
		Node case_conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		case_conditionReturnNode.setKind("case_condition");
	    // Create a CST Leaf
		if($LPARGen != null) {
			Leaf LPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LPAR", $LPARGen.text, LPARGen.getCharPositionInLine(), LPARGen.getLine());
			case_conditionReturnNode.getChildren().add(LPARGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	case_conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		case_conditionReturnNode.getChildren().add(TK_0Leaf);
	 	}

		// Create a special CST Node for terminal VBARGen_List aggregation
		if($VBARGen_List != null) {
	    for(int pos = 0; pos < $VBARGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($VBARGen_List != null) {
		    Token t = (Token) $VBARGen_List.get(pos); 
		    Leaf VBARGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", t.getText(), t.getCharPositionInLine(), t.getLine());
			case_conditionReturnNode.getChildren().add(VBARGen_ListLeaf);
		}
		// No Terminal extractor
	    if($wordGen_1 != null) {		
	    	DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) $wordGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("word");
	    		case_conditionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		case_conditionReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Leaf
		if($RPARGen != null) {
			Leaf RPARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RPAR", $RPARGen.text, RPARGen.getCharPositionInLine(), RPARGen.getLine());
			case_conditionReturnNode.getChildren().add(RPARGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$case_condition.returnNode = case_conditionReturnNode;
	}
	;

if_statement returns [Node returnNode] 
:  TK_0='if' ( TK_1='\n')?  conditionGen+=condition ( TK_2=';' |  TK_3='\n')?  TK_4='then' ( TK_5='\n')?  statementGen+=statement*  ifelse_branchGen+=ifelse_branch*  else_branchGen+=else_branch?   TK_6='fi' ( TK_7='\n' |  TK_8=';') 
	{
		// Create return CST Node
		Node if_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		if_statementReturnNode.setKind("if_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		if_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		if_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($conditionGen != null) {
	        for(Iterator it = $conditionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.condition_return r = (DebianGrammarParser.condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		if_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		if_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		if_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		if_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($ifelse_branchGen != null) {
	        for(Iterator it = $ifelse_branchGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.ifelse_branch_return r = (DebianGrammarParser.ifelse_branch_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("ifelse_branch");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($else_branchGen != null) {
	        for(Iterator it = $else_branchGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.else_branch_return r = (DebianGrammarParser.else_branch_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("else_branch");
	            	if_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		if_statementReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		if_statementReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		if_statementReturnNode.getChildren().add(TK_8Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$if_statement.returnNode = if_statementReturnNode;
	}
	;

ifelse_branch returns [Node returnNode] 
:  TK_0='elif' ( TK_1='\n')?  conditionGen+=condition ( TK_2=';' |  TK_3='\n')?  TK_4='then' ( TK_5='\n')?  statementGen+=statement* 
	{
		// Create return CST Node
		Node ifelse_branchReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		ifelse_branchReturnNode.setKind("ifelse_branch");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($conditionGen != null) {
	        for(Iterator it = $conditionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.condition_return r = (DebianGrammarParser.condition_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("condition");
	            	ifelse_branchReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_2Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		ifelse_branchReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	ifelse_branchReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$ifelse_branch.returnNode = ifelse_branchReturnNode;
	}
	;
	
else_branch returns [Node returnNode] 
:  TK_0='else' ( TK_1='\n')?  statementGen+=statement* 
	{
		// Create return CST Node
		Node else_branchReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		else_branchReturnNode.setKind("else_branch");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		else_branchReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		else_branchReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	else_branchReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$else_branch.returnNode = else_branchReturnNode;
	}
	;

condition returns [Node returnNode] 
:  conditional_expr_listGen+=conditional_expr_list (( ANDGen=AND |  ORGen=OR) ( TK_0='\n')?  command_expr_listGen+=command_expr_list)* 
	{
		// Create return CST Node
		Node conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditionReturnNode.setKind("condition");
	    // Create a CST Node
		if($conditional_expr_listGen != null) {
	        for(Iterator it = $conditional_expr_listGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.conditional_expr_list_return r = (DebianGrammarParser.conditional_expr_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditional_expr_list");
	            	conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal command_expr_listGen aggregation
		if($command_expr_listGen != null) {
	    for(int pos = 0; pos < $command_expr_listGen.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			conditionReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			conditionReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		conditionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($command_expr_listGen != null) {		
	    	DebianGrammarParser.command_expr_list_return r = (DebianGrammarParser.command_expr_list_return) $command_expr_listGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("command_expr_list");
	    		conditionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$condition.returnNode = conditionReturnNode;
	}
	|  command_expr_listGen+=command_expr_list (( ANDGen=AND |  ORGen=OR) ( TK_0='\n')?  conditional_expr_listGen+=conditional_expr_list)* 
	{
		// Create return CST Node
		Node conditionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditionReturnNode.setKind("condition");
	    // Create a CST Node
		if($command_expr_listGen != null) {
	        for(Iterator it = $command_expr_listGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_expr_list_return r = (DebianGrammarParser.command_expr_list_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_expr_list");
	            	conditionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal conditional_expr_listGen aggregation
		if($conditional_expr_listGen != null) {
	    for(int pos = 0; pos < $conditional_expr_listGen.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			conditionReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			conditionReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		conditionReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($conditional_expr_listGen != null) {		
	    	DebianGrammarParser.conditional_expr_list_return r = (DebianGrammarParser.conditional_expr_list_return) $conditional_expr_listGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("conditional_expr_list");
	    		conditionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$condition.returnNode = conditionReturnNode;
	}
	;

conditional_expr_list returns [Node returnNode] 
:  conditional_expressionGen+=conditional_expression (( ANDGen=AND |  ORGen=OR) ( TK_0='\n')?  conditional_expressionGen_1+=conditional_expression)* 
	{
		// Create return CST Node
		Node conditional_expr_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditional_expr_listReturnNode.setKind("conditional_expr_list");
	    // Create a CST Node
		if($conditional_expressionGen != null) {
	        for(Iterator it = $conditional_expressionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.conditional_expression_return r = (DebianGrammarParser.conditional_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("conditional_expression");
	            	conditional_expr_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal conditional_expressionGen_1 aggregation
		if($conditional_expressionGen_1 != null) {
	    for(int pos = 0; pos < $conditional_expressionGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			conditional_expr_listReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			conditional_expr_listReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		conditional_expr_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// No Terminal extractor
	    if($conditional_expressionGen_1 != null) {		
	    	DebianGrammarParser.conditional_expression_return r = (DebianGrammarParser.conditional_expression_return) $conditional_expressionGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("conditional_expression");
	    		conditional_expr_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$conditional_expr_list.returnNode = conditional_expr_listReturnNode;
	}
	;
	
command_expr_list returns [Node returnNode] 
:  LSBRACKGen=LSBRACK?  EXCLGen=EXCL?  pipelineGen+=pipeline  RSBRACKGen=RSBRACK? (( ANDGen=AND |  ORGen=OR) ( TK_0='\n')?  LSBRACKGen_1=LSBRACK?  EXCLGen_1=EXCL?  pipelineGen_1+=pipeline  RSBRACKGen_1=RSBRACK?)* 
	{
		// Create return CST Node
		Node command_expr_listReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_expr_listReturnNode.setKind("command_expr_list");
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			command_expr_listReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($EXCLGen != null) {
			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", $EXCLGen.text, EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
			command_expr_listReturnNode.getChildren().add(EXCLGenLeaf);
		}
	    // Create a CST Node
		if($pipelineGen != null) {
	        for(Iterator it = $pipelineGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pipeline");
	            	command_expr_listReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			command_expr_listReturnNode.getChildren().add(RSBRACKGenLeaf);
		}

		// Create a special CST Node for terminal pipelineGen_1 aggregation
		if($pipelineGen_1 != null) {
	    for(int pos = 0; pos < $pipelineGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			command_expr_listReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			command_expr_listReturnNode.getChildren().add(ORGenLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		command_expr_listReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LSBRACKGen_1 != null) {
			Leaf LSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen_1.text, LSBRACKGen_1.getCharPositionInLine(), LSBRACKGen_1.getLine());
			command_expr_listReturnNode.getChildren().add(LSBRACKGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EXCLGen_1 != null) {
			Leaf EXCLGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", $EXCLGen_1.text, EXCLGen_1.getCharPositionInLine(), EXCLGen_1.getLine());
			command_expr_listReturnNode.getChildren().add(EXCLGen_1Leaf);
		}
		// No Terminal extractor
	    if($pipelineGen_1 != null) {		
	    	DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) $pipelineGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pipeline");
	    		command_expr_listReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a CST Leaf
		if($RSBRACKGen_1 != null) {
			Leaf RSBRACKGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen_1.text, RSBRACKGen_1.getCharPositionInLine(), RSBRACKGen_1.getLine());
			command_expr_listReturnNode.getChildren().add(RSBRACKGen_1Leaf);
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$command_expr_list.returnNode = command_expr_listReturnNode;
	}
	;

for_statement returns [Node returnNode] 
:  TK_0='for' ( TK_1='\n')?  wordGen+=word  TK_2='in' ( wordGen_1+=word |  pathGen+=path)+ ( TK_3=';' |  TK_4='\n')?  TK_5='do' ( TK_6='\n')?  statementGen+=statement*  TK_7='done' ( TK_8='\n' |  TK_9=';') 
	{
		// Create return CST Node
		Node for_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		for_statementReturnNode.setKind("for_statement");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		for_statementReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		for_statementReturnNode.getChildren().add(TK_1Leaf);
	 	}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	for_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_2 != null) {
			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_2.text, TK_2.getCharPositionInLine(), TK_2.getLine());
	 		for_statementReturnNode.getChildren().add(TK_2Leaf);
	 	}

		// Create a special CST Node for terminal wordGen_1 aggregation
		if($wordGen_1 != null) {
	    for(int pos = 0; pos < $wordGen_1.size(); pos++ )  { 
		// No Terminal extractor
	    if($wordGen_1 != null) {		
	    	DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) $wordGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("word");
	    		for_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}


		// Create a special CST Node for terminal pathGen aggregation
		if($pathGen != null) {
	    for(int pos = 0; pos < $pathGen.size(); pos++ )  { 
		// No Terminal extractor
	    if($pathGen != null) {		
	    	DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) $pathGen.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("path");
	    		for_statementReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a Token CST Leaf	
	    if($TK_3 != null) {
			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_3.text, TK_3.getCharPositionInLine(), TK_3.getLine());
	 		for_statementReturnNode.getChildren().add(TK_3Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_4 != null) {
			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_4.text, TK_4.getCharPositionInLine(), TK_4.getLine());
	 		for_statementReturnNode.getChildren().add(TK_4Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_5 != null) {
			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_5.text, TK_5.getCharPositionInLine(), TK_5.getLine());
	 		for_statementReturnNode.getChildren().add(TK_5Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_6 != null) {
			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_6.text, TK_6.getCharPositionInLine(), TK_6.getLine());
	 		for_statementReturnNode.getChildren().add(TK_6Leaf);
	 	}
	    // Create a CST Node
		if($statementGen != null) {
	        for(Iterator it = $statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.statement_return r = (DebianGrammarParser.statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("statement");
	            	for_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a Token CST Leaf	
	    if($TK_7 != null) {
			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_7.text, TK_7.getCharPositionInLine(), TK_7.getLine());
	 		for_statementReturnNode.getChildren().add(TK_7Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_8 != null) {
			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_8.text, TK_8.getCharPositionInLine(), TK_8.getLine());
	 		for_statementReturnNode.getChildren().add(TK_8Leaf);
	 	}
	    // Create a Token CST Leaf	
	    if($TK_9 != null) {
			Leaf TK_9Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_9.text, TK_9.getCharPositionInLine(), TK_9.getLine());
	 		for_statementReturnNode.getChildren().add(TK_9Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$for_statement.returnNode = for_statementReturnNode;
	}
	;

assignment_statement returns [Node returnNode] 
:  wordGen+=word  EQUGen=EQU ( paramsGen+=params)* 
	{
		// Create return CST Node
		Node assignment_statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		assignment_statementReturnNode.setKind("assignment_statement");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			assignment_statementReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Node
		if($paramsGen != null) {
	        for(Iterator it = $paramsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.params_return r = (DebianGrammarParser.params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("params");
	            	assignment_statementReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$assignment_statement.returnNode = assignment_statementReturnNode;
	}
	;
	
conditional_expression returns [Node returnNode] 
:   LSBRACKGen=LSBRACK  EXCLGen=EXCL? ( boolean_expressionGen+=boolean_expression |  command_expressionGen+=command_expression)   RSBRACKGen=RSBRACK 
	{
		// Create return CST Node
		Node conditional_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		conditional_expressionReturnNode.setKind("conditional_expression");
	    // Create a CST Leaf
		if($LSBRACKGen != null) {
			Leaf LSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LSBRACK", $LSBRACKGen.text, LSBRACKGen.getCharPositionInLine(), LSBRACKGen.getLine());
			conditional_expressionReturnNode.getChildren().add(LSBRACKGenLeaf);
		}
	    // Create a CST Leaf
		if($EXCLGen != null) {
			Leaf EXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EXCL", $EXCLGen.text, EXCLGen.getCharPositionInLine(), EXCLGen.getLine());
			conditional_expressionReturnNode.getChildren().add(EXCLGenLeaf);
		}
	    // Create a CST Node
		if($boolean_expressionGen != null) {
	        for(Iterator it = $boolean_expressionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.boolean_expression_return r = (DebianGrammarParser.boolean_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("boolean_expression");
	            	conditional_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($command_expressionGen != null) {
	        for(Iterator it = $command_expressionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_expression_return r = (DebianGrammarParser.command_expression_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_expression");
	            	conditional_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RSBRACKGen != null) {
			Leaf RSBRACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RSBRACK", $RSBRACKGen.text, RSBRACKGen.getCharPositionInLine(), RSBRACKGen.getLine());
			conditional_expressionReturnNode.getChildren().add(RSBRACKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$conditional_expression.returnNode = conditional_expressionReturnNode;
	}
	;

boolean_expression returns [Node returnNode] 
:  DQUOTEGen=DQUOTE?  wordGen+=word  DQUOTEGen_1=DQUOTE? ( EQUGen=EQU |  NOTEQUGen=NOTEQU)  DQUOTEGen_2=DQUOTE?  paramGen+=param  DQUOTEGen_3=DQUOTE? 
	{
		// Create return CST Node
		Node boolean_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_expressionReturnNode.setKind("boolean_expression");
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($EQUGen != null) {
			Leaf EQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("EQU", $EQUGen.text, EQUGen.getCharPositionInLine(), EQUGen.getLine());
			boolean_expressionReturnNode.getChildren().add(EQUGenLeaf);
		}
	    // Create a CST Leaf
		if($NOTEQUGen != null) {
			Leaf NOTEQUGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NOTEQU", $NOTEQUGen.text, NOTEQUGen.getCharPositionInLine(), NOTEQUGen.getLine());
			boolean_expressionReturnNode.getChildren().add(NOTEQUGenLeaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_2 != null) {
			Leaf DQUOTEGen_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_2.text, DQUOTEGen_2.getCharPositionInLine(), DQUOTEGen_2.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_2Leaf);
		}
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_3 != null) {
			Leaf DQUOTEGen_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_3.text, DQUOTEGen_3.getCharPositionInLine(), DQUOTEGen_3.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_3Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$boolean_expression.returnNode = boolean_expressionReturnNode;
	}
	|  DQUOTEGen=DQUOTE?  wordGen+=word  DQUOTEGen_1=DQUOTE? 
	{
		// Create return CST Node
		Node boolean_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		boolean_expressionReturnNode.setKind("boolean_expression");
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	boolean_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			boolean_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$boolean_expression.returnNode = boolean_expressionReturnNode;
	}
	;

command_expression returns [Node returnNode] 
:  paramGen+=param ( DQUOTEGen=DQUOTE?  paramGen_1+=param  DQUOTEGen_1=DQUOTE?)* 
	{
		// Create return CST Node
		Node command_expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		command_expressionReturnNode.setKind("command_expression");
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	command_expressionReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal paramGen_1 aggregation
		if($paramGen_1 != null) {
	    for(int pos = 0; pos < $paramGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			command_expressionReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
		// No Terminal extractor
	    if($paramGen_1 != null) {		
	    	DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) $paramGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("param");
	    		command_expressionReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			command_expressionReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$command_expression.returnNode = command_expressionReturnNode;
	}
	;
	
simple_command returns [Node returnNode] 
:  assignment_statementGen+=assignment_statement 
	{
		// Create return CST Node
		Node simple_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_commandReturnNode.setKind("simple_command");
	    // Create a CST Node
		if($assignment_statementGen != null) {
	        for(Iterator it = $assignment_statementGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.assignment_statement_return r = (DebianGrammarParser.assignment_statement_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("assignment_statement");
	            	simple_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$simple_command.returnNode = simple_commandReturnNode;
	}
	|  command_nameGen+=command_name ( paramsGen+=params)* 
	{
		// Create return CST Node
		Node simple_commandReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		simple_commandReturnNode.setKind("simple_command");
	    // Create a CST Node
		if($command_nameGen != null) {
	        for(Iterator it = $command_nameGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_name_return r = (DebianGrammarParser.command_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_name");
	            	simple_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Node
		if($paramsGen != null) {
	        for(Iterator it = $paramsGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.params_return r = (DebianGrammarParser.params_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("params");
	            	simple_commandReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$simple_command.returnNode = simple_commandReturnNode;
	}
	;

params returns [Node returnNode] 
:  DQUOTEGen=DQUOTE?  PSINGLEGen=PSINGLE? ( paramGen+=param)+  PSINGLEGen_1=PSINGLE?  DQUOTEGen_1=DQUOTE? 
	{
		// Create return CST Node
		Node paramsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramsReturnNode.setKind("params");
	    // Create a CST Leaf
		if($DQUOTEGen != null) {
			Leaf DQUOTEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen.text, DQUOTEGen.getCharPositionInLine(), DQUOTEGen.getLine());
			paramsReturnNode.getChildren().add(DQUOTEGenLeaf);
		}
	    // Create a CST Leaf
		if($PSINGLEGen != null) {
			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen.text, PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
			paramsReturnNode.getChildren().add(PSINGLEGenLeaf);
		}
	    // Create a CST Node
		if($paramGen != null) {
	        for(Iterator it = $paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.param_return r = (DebianGrammarParser.param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("param");
	            	paramsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($PSINGLEGen_1 != null) {
			Leaf PSINGLEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen_1.text, PSINGLEGen_1.getCharPositionInLine(), PSINGLEGen_1.getLine());
			paramsReturnNode.getChildren().add(PSINGLEGen_1Leaf);
		}
	    // Create a CST Leaf
		if($DQUOTEGen_1 != null) {
			Leaf DQUOTEGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQUOTE", $DQUOTEGen_1.text, DQUOTEGen_1.getCharPositionInLine(), DQUOTEGen_1.getLine());
			paramsReturnNode.getChildren().add(DQUOTEGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$params.returnNode = paramsReturnNode;
	}
	;
	 
param returns [Node returnNode] 
:  option_paramGen+=option_param 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Node
		if($option_paramGen != null) {
	        for(Iterator it = $option_paramGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.option_param_return r = (DebianGrammarParser.option_param_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("option_param");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  wordGen+=word 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  pathGen+=path 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Node
		if($pathGen != null) {
	        for(Iterator it = $pathGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.path_return r = (DebianGrammarParser.path_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("path");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  redirectionGen+=redirection 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Node
		if($redirectionGen != null) {
	        for(Iterator it = $redirectionGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.redirection_return r = (DebianGrammarParser.redirection_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("redirection");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  NUMBERGen=NUMBER 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($NUMBERGen != null) {
			Leaf NUMBERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("NUMBER", $NUMBERGen.text, NUMBERGen.getCharPositionInLine(), NUMBERGen.getLine());
			paramReturnNode.getChildren().add(NUMBERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  COLONGen=COLON 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($COLONGen != null) {
			Leaf COLONGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("COLON", $COLONGen.text, COLONGen.getCharPositionInLine(), COLONGen.getLine());
			paramReturnNode.getChildren().add(COLONGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  APGen=AP  nestedCommandGen+=nestedCommand  APGen_1=AP 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			paramReturnNode.getChildren().add(APGenLeaf);
		}
	    // Create a CST Node
		if($nestedCommandGen != null) {
	        for(Iterator it = $nestedCommandGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.nestedCommand_return r = (DebianGrammarParser.nestedCommand_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("nestedCommand");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($APGen_1 != null) {
			Leaf APGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen_1.text, APGen_1.getCharPositionInLine(), APGen_1.getLine());
			paramReturnNode.getChildren().add(APGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  command_nameGen+=command_name 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Node
		if($command_nameGen != null) {
	        for(Iterator it = $command_nameGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.command_name_return r = (DebianGrammarParser.command_name_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("command_name");
	            	paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  BSLASHGen=BSLASH 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($BSLASHGen != null) {
			Leaf BSLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("BSLASH", $BSLASHGen.text, BSLASHGen.getCharPositionInLine(), BSLASHGen.getLine());
			paramReturnNode.getChildren().add(BSLASHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  SLASHGen=SLASH 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($SLASHGen != null) {
			Leaf SLASHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("SLASH", $SLASHGen.text, SLASHGen.getCharPositionInLine(), SLASHGen.getLine());
			paramReturnNode.getChildren().add(SLASHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  PSINGLEGen=PSINGLE 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($PSINGLEGen != null) {
			Leaf PSINGLEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PSINGLE", $PSINGLEGen.text, PSINGLEGen.getCharPositionInLine(), PSINGLEGen.getLine());
			paramReturnNode.getChildren().add(PSINGLEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  TILDEGen=TILDE 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($TILDEGen != null) {
			Leaf TILDEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("TILDE", $TILDEGen.text, TILDEGen.getCharPositionInLine(), TILDEGen.getLine());
			paramReturnNode.getChildren().add(TILDEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  TK_0='*' 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		paramReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	|  APGen=AP 
	{
		// Create return CST Node
		Node paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		paramReturnNode.setKind("param");
	    // Create a CST Leaf
		if($APGen != null) {
			Leaf APGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AP", $APGen.text, APGen.getCharPositionInLine(), APGen.getLine());
			paramReturnNode.getChildren().add(APGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$param.returnNode = paramReturnNode;
	}
	;

option_param returns [Node returnNode] 
:  MINUSGen=MINUS  wordGen+=word? 
	{
		// Create return CST Node
		Node option_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		option_paramReturnNode.setKind("option_param");
	    // Create a CST Leaf
		if($MINUSGen != null) {
			Leaf MINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("MINUS", $MINUSGen.text, MINUSGen.getCharPositionInLine(), MINUSGen.getLine());
			option_paramReturnNode.getChildren().add(MINUSGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	option_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$option_param.returnNode = option_paramReturnNode;
	}
	|  DMINUSGen=DMINUS  wordGen+=word? 
	{
		// Create return CST Node
		Node option_paramReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		option_paramReturnNode.setKind("option_param");
	    // Create a CST Leaf
		if($DMINUSGen != null) {
			Leaf DMINUSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DMINUS", $DMINUSGen.text, DMINUSGen.getCharPositionInLine(), DMINUSGen.getLine());
			option_paramReturnNode.getChildren().add(DMINUSGenLeaf);
		}
	    // Create a CST Node
		if($wordGen != null) {
	        for(Iterator it = $wordGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.word_return r = (DebianGrammarParser.word_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("word");
	            	option_paramReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$option_param.returnNode = option_paramReturnNode;
	}
	;

word returns [Node returnNode] 
:  input_variableGen+=input_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($input_variableGen != null) {
	        for(Iterator it = $input_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.input_variable_return r = (DebianGrammarParser.input_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("input_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  in_command_variableGen+=in_command_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($in_command_variableGen != null) {
	        for(Iterator it = $in_command_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.in_command_variable_return r = (DebianGrammarParser.in_command_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("in_command_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  shell_variableGen+=shell_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($shell_variableGen != null) {
	        for(Iterator it = $shell_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.shell_variable_return r = (DebianGrammarParser.shell_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("shell_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  special_variableGen+=special_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($special_variableGen != null) {
	        for(Iterator it = $special_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.special_variable_return r = (DebianGrammarParser.special_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("special_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  external_variableGen+=external_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($external_variableGen != null) {
	        for(Iterator it = $external_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.external_variable_return r = (DebianGrammarParser.external_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("external_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  substitution_variableGen+=substitution_variable 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($substitution_variableGen != null) {
	        for(Iterator it = $substitution_variableGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.substitution_variable_return r = (DebianGrammarParser.substitution_variable_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("substitution_variable");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	|  idGen+=id 
	{
		// Create return CST Node
		Node wordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		wordReturnNode.setKind("word");
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	wordReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$word.returnNode = wordReturnNode;
	}
	;
	
pipeline returns [Node returnNode] 
: ( TK_0='time')?  simple_commandGen+=simple_command ( VBARGen_List+=VBAR ( TK_1='\n')?  simple_commandGen_1+=simple_command)* 
	{
		// Create return CST Node
		Node pipelineReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pipelineReturnNode.setKind("pipeline");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		pipelineReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Node
		if($simple_commandGen != null) {
	        for(Iterator it = $simple_commandGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.simple_command_return r = (DebianGrammarParser.simple_command_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("simple_command");
	            	pipelineReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal VBARGen_List aggregation
		if($VBARGen_List != null) {
	    for(int pos = 0; pos < $VBARGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($VBARGen_List != null) {
		    Token t = (Token) $VBARGen_List.get(pos); 
		    Leaf VBARGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VBAR", t.getText(), t.getCharPositionInLine(), t.getLine());
			pipelineReturnNode.getChildren().add(VBARGen_ListLeaf);
		}
	    // Create a Token CST Leaf	
	    if($TK_1 != null) {
			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_1.text, TK_1.getCharPositionInLine(), TK_1.getLine());
	 		pipelineReturnNode.getChildren().add(TK_1Leaf);
	 	}
		// No Terminal extractor
	    if($simple_commandGen_1 != null) {		
	    	DebianGrammarParser.simple_command_return r = (DebianGrammarParser.simple_command_return) $simple_commandGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("simple_command");
	    		pipelineReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$pipeline.returnNode = pipelineReturnNode;
	}
	;

list_of_commands returns [Node returnNode] 
:  pipelineGen+=pipeline (( ANDGen=AND |  ORGen=OR)  pipelineGen_1+=pipeline)* 
	{
		// Create return CST Node
		Node list_of_commandsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		list_of_commandsReturnNode.setKind("list_of_commands");
	    // Create a CST Node
		if($pipelineGen != null) {
	        for(Iterator it = $pipelineGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pipeline");
	            	list_of_commandsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal pipelineGen_1 aggregation
		if($pipelineGen_1 != null) {
	    for(int pos = 0; pos < $pipelineGen_1.size(); pos++ )  { 
	    // Create a CST Leaf
		if($ANDGen != null) {
			Leaf ANDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AND", $ANDGen.text, ANDGen.getCharPositionInLine(), ANDGen.getLine());
			list_of_commandsReturnNode.getChildren().add(ANDGenLeaf);
		}
	    // Create a CST Leaf
		if($ORGen != null) {
			Leaf ORGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("OR", $ORGen.text, ORGen.getCharPositionInLine(), ORGen.getLine());
			list_of_commandsReturnNode.getChildren().add(ORGenLeaf);
		}
		// No Terminal extractor
	    if($pipelineGen_1 != null) {		
	    	DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) $pipelineGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pipeline");
	    		list_of_commandsReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

		// Returns the Node with CST Leaves/Nodes
		$list_of_commands.returnNode = list_of_commandsReturnNode;
	}
	|  asynchronousGen+=asynchronous 
	{
		// Create return CST Node
		Node list_of_commandsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		list_of_commandsReturnNode.setKind("list_of_commands");
	    // Create a CST Node
		if($asynchronousGen != null) {
	        for(Iterator it = $asynchronousGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.asynchronous_return r = (DebianGrammarParser.asynchronous_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("asynchronous");
	            	list_of_commandsReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$list_of_commands.returnNode = list_of_commandsReturnNode;
	}
	;

asynchronous returns [Node returnNode] 
:  pipelineGen+=pipeline ( AMPERSANDGen_List+=AMPERSAND  pipelineGen_1+=pipeline)* ( AMPERSANDGen_1=AMPERSAND)? 
	{
		// Create return CST Node
		Node asynchronousReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		asynchronousReturnNode.setKind("asynchronous");
	    // Create a CST Node
		if($pipelineGen != null) {
	        for(Iterator it = $pipelineGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("pipeline");
	            	asynchronousReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }

		// Create a special CST Node for terminal AMPERSANDGen_List aggregation
		if($AMPERSANDGen_List != null) {
	    for(int pos = 0; pos < $AMPERSANDGen_List.size(); pos++ )  { 
		// Terminal extractor
	    if($AMPERSANDGen_List != null) {
		    Token t = (Token) $AMPERSANDGen_List.get(pos); 
		    Leaf AMPERSANDGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("AMPERSAND", t.getText(), t.getCharPositionInLine(), t.getLine());
			asynchronousReturnNode.getChildren().add(AMPERSANDGen_ListLeaf);
		}
		// No Terminal extractor
	    if($pipelineGen_1 != null) {		
	    	DebianGrammarParser.pipeline_return r = (DebianGrammarParser.pipeline_return) $pipelineGen_1.get(pos); 
	    	if(r != null && r.returnNode != null) {
	        	r.returnNode.setKind("pipeline");
	    		asynchronousReturnNode.getChildren().add(r.returnNode);
	    	} 
		}
		}
		}

	    // Create a CST Leaf
		if($AMPERSANDGen_1 != null) {
			Leaf AMPERSANDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("AMPERSAND", $AMPERSANDGen_1.text, AMPERSANDGen_1.getCharPositionInLine(), AMPERSANDGen_1.getLine());
			asynchronousReturnNode.getChildren().add(AMPERSANDGen_1Leaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$asynchronous.returnNode = asynchronousReturnNode;
	}
	;

path returns [Node returnNode] 
:  PATHPGen=PATHP 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHPGen != null) {
			Leaf PATHPGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHP", $PATHPGen.text, PATHPGen.getCharPositionInLine(), PATHPGen.getLine());
			pathReturnNode.getChildren().add(PATHPGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHSSGen=PATHSS 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHSSGen != null) {
			Leaf PATHSSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSS", $PATHSSGen.text, PATHSSGen.getCharPositionInLine(), PATHSSGen.getLine());
			pathReturnNode.getChildren().add(PATHSSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHKVERSGen=PATHKVERS 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHKVERSGen != null) {
			Leaf PATHKVERSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHKVERS", $PATHKVERSGen.text, PATHKVERSGen.getCharPositionInLine(), PATHKVERSGen.getLine());
			pathReturnNode.getChildren().add(PATHKVERSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHSCRIPTGen=PATHSCRIPT 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHSCRIPTGen != null) {
			Leaf PATHSCRIPTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSCRIPT", $PATHSCRIPTGen.text, PATHSCRIPTGen.getCharPositionInLine(), PATHSCRIPTGen.getLine());
			pathReturnNode.getChildren().add(PATHSCRIPTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHOLDSCHEMAGen=PATHOLDSCHEMA 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHOLDSCHEMAGen != null) {
			Leaf PATHOLDSCHEMAGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHOLDSCHEMA", $PATHOLDSCHEMAGen.text, PATHOLDSCHEMAGen.getCharPositionInLine(), PATHOLDSCHEMAGen.getLine());
			pathReturnNode.getChildren().add(PATHOLDSCHEMAGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHPACKGen=PATHPACK 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHPACKGen != null) {
			Leaf PATHPACKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHPACK", $PATHPACKGen.text, PATHPACKGen.getCharPositionInLine(), PATHPACKGen.getLine());
			pathReturnNode.getChildren().add(PATHPACKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHGCONFSCHGen=PATHGCONFSCH 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHGCONFSCHGen != null) {
			Leaf PATHGCONFSCHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHGCONFSCH", $PATHGCONFSCHGen.text, PATHGCONFSCHGen.getCharPositionInLine(), PATHGCONFSCHGen.getLine());
			pathReturnNode.getChildren().add(PATHGCONFSCHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHSUIDGen=PATHSUID 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHSUIDGen != null) {
			Leaf PATHSUIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHSUID", $PATHSUIDGen.text, PATHSUIDGen.getCharPositionInLine(), PATHSUIDGen.getLine());
			pathReturnNode.getChildren().add(PATHSUIDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHXWINDOWGen=PATHXWINDOW 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHXWINDOWGen != null) {
			Leaf PATHXWINDOWGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXWINDOW", $PATHXWINDOWGen.text, PATHXWINDOWGen.getCharPositionInLine(), PATHXWINDOWGen.getLine());
			pathReturnNode.getChildren().add(PATHXWINDOWGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHEMACSINSTGen=PATHEMACSINST 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHEMACSINSTGen != null) {
			Leaf PATHEMACSINSTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSINST", $PATHEMACSINSTGen.text, PATHEMACSINSTGen.getCharPositionInLine(), PATHEMACSINSTGen.getLine());
			pathReturnNode.getChildren().add(PATHEMACSINSTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHEMACSREMGen=PATHEMACSREM 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHEMACSREMGen != null) {
			Leaf PATHEMACSREMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHEMACSREM", $PATHEMACSREMGen.text, PATHEMACSREMGen.getCharPositionInLine(), PATHEMACSREMGen.getLine());
			pathReturnNode.getChildren().add(PATHEMACSREMGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHXMANAGERGen=PATHXMANAGER 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHXMANAGERGen != null) {
			Leaf PATHXMANAGERGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHXMANAGER", $PATHXMANAGERGen.text, PATHXMANAGERGen.getCharPositionInLine(), PATHXMANAGERGen.getLine());
			pathReturnNode.getChildren().add(PATHXMANAGERGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHCONFMODGen=PATHCONFMOD 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHCONFMODGen != null) {
			Leaf PATHCONFMODGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCONFMOD", $PATHCONFMODGen.text, PATHCONFMODGen.getCharPositionInLine(), PATHCONFMODGen.getLine());
			pathReturnNode.getChildren().add(PATHCONFMODGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHMIMEGen=PATHMIME 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHMIMEGen != null) {
			Leaf PATHMIMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHMIME", $PATHMIMEGen.text, PATHMIMEGen.getCharPositionInLine(), PATHMIMEGen.getLine());
			pathReturnNode.getChildren().add(PATHMIMEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHDOCIDGen=PATHDOCID 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHDOCIDGen != null) {
			Leaf PATHDOCIDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHDOCID", $PATHDOCIDGen.text, PATHDOCIDGen.getCharPositionInLine(), PATHDOCIDGen.getLine());
			pathReturnNode.getChildren().add(PATHDOCIDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHCOMPYTHGen=PATHCOMPYTH 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHCOMPYTHGen != null) {
			Leaf PATHCOMPYTHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHCOMPYTH", $PATHCOMPYTHGen.text, PATHCOMPYTHGen.getCharPositionInLine(), PATHCOMPYTHGen.getLine());
			pathReturnNode.getChildren().add(PATHCOMPYTHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHNULLGen=PATHNULL 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHNULLGen != null) {
			Leaf PATHNULLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHNULL", $PATHNULLGen.text, PATHNULLGen.getCharPositionInLine(), PATHNULLGen.getLine());
			pathReturnNode.getChildren().add(PATHNULLGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHRELGen=PATHREL 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHRELGen != null) {
			Leaf PATHRELGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATHREL", $PATHRELGen.text, PATHRELGen.getCharPositionInLine(), PATHRELGen.getLine());
			pathReturnNode.getChildren().add(PATHRELGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	|  PATHGen=PATH 
	{
		// Create return CST Node
		Node pathReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		pathReturnNode.setKind("path");
	    // Create a CST Leaf
		if($PATHGen != null) {
			Leaf PATHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("PATH", $PATHGen.text, PATHGen.getCharPositionInLine(), PATHGen.getLine());
			pathReturnNode.getChildren().add(PATHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$path.returnNode = pathReturnNode;
	}
	;


var returns [Node returnNode] 
:  TK_0='$i' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$SCHEMA_FILES' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$PYTHON' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$DIRLIST' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$_dh_action' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$dir' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$inst' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$user' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$group' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$line' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$mode' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  TK_0='$OLD_DIR' 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		varReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	|  VARGen=VAR 
	{
		// Create return CST Node
		Node varReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		varReturnNode.setKind("var");
	    // Create a CST Leaf
		if($VARGen != null) {
			Leaf VARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VAR", $VARGen.text, VARGen.getCharPositionInLine(), VARGen.getLine());
			varReturnNode.getChildren().add(VARGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$var.returnNode = varReturnNode;
	}
	;

substitution_variable returns [Node returnNode] 
:  TK_0='$'  LGRAFGen=LGRAF  idGen+=id  RGRAFGen=RGRAF 
	{
		// Create return CST Node
		Node substitution_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		substitution_variableReturnNode.setKind("substitution_variable");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		substitution_variableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($LGRAFGen != null) {
			Leaf LGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("LGRAF", $LGRAFGen.text, LGRAFGen.getCharPositionInLine(), LGRAFGen.getLine());
			substitution_variableReturnNode.getChildren().add(LGRAFGenLeaf);
		}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	substitution_variableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
	    // Create a CST Leaf
		if($RGRAFGen != null) {
			Leaf RGRAFGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("RGRAF", $RGRAFGen.text, RGRAFGen.getCharPositionInLine(), RGRAFGen.getLine());
			substitution_variableReturnNode.getChildren().add(RGRAFGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$substitution_variable.returnNode = substitution_variableReturnNode;
	}
	;

input_variable returns [Node returnNode] 
:  VARINPUTGen=VARINPUT 
	{
		// Create return CST Node
		Node input_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		input_variableReturnNode.setKind("input_variable");
	    // Create a CST Leaf
		if($VARINPUTGen != null) {
			Leaf VARINPUTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARINPUT", $VARINPUTGen.text, VARINPUTGen.getCharPositionInLine(), VARINPUTGen.getLine());
			input_variableReturnNode.getChildren().add(VARINPUTGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$input_variable.returnNode = input_variableReturnNode;
	}
	;
	
in_command_variable returns [Node returnNode] 
:  varGen+=var 
	{
		// Create return CST Node
		Node in_command_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		in_command_variableReturnNode.setKind("in_command_variable");
	    // Create a CST Node
		if($varGen != null) {
	        for(Iterator it = $varGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.var_return r = (DebianGrammarParser.var_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("var");
	            	in_command_variableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$in_command_variable.returnNode = in_command_variableReturnNode;
	}
	;
	
external_variable returns [Node returnNode] 
:  UNDERSCOREGen=UNDERSCORE  idGen+=id 
	{
		// Create return CST Node
		Node external_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		external_variableReturnNode.setKind("external_variable");
	    // Create a CST Leaf
		if($UNDERSCOREGen != null) {
			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", $UNDERSCOREGen.text, UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
			external_variableReturnNode.getChildren().add(UNDERSCOREGenLeaf);
		}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	external_variableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$external_variable.returnNode = external_variableReturnNode;
	}
	|  TK_0='$'  UNDERSCOREGen=UNDERSCORE  idGen+=id 
	{
		// Create return CST Node
		Node external_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		external_variableReturnNode.setKind("external_variable");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		external_variableReturnNode.getChildren().add(TK_0Leaf);
	 	}
	    // Create a CST Leaf
		if($UNDERSCOREGen != null) {
			Leaf UNDERSCOREGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("UNDERSCORE", $UNDERSCOREGen.text, UNDERSCOREGen.getCharPositionInLine(), UNDERSCOREGen.getLine());
			external_variableReturnNode.getChildren().add(UNDERSCOREGenLeaf);
		}
	    // Create a CST Node
		if($idGen != null) {
	        for(Iterator it = $idGen.iterator(); it.hasNext(); )  { 
	            DebianGrammarParser.id_return r = (DebianGrammarParser.id_return) it.next(); 
	            if(r != null && r.returnNode != null) {
	            	r.returnNode.setKind("id");
	            	external_variableReturnNode.getChildren().add(r.returnNode);
	            } 
	        }
	    }
		// Returns the Node with CST Leaves/Nodes
		$external_variable.returnNode = external_variableReturnNode;
	}
	;
	
special_variable returns [Node returnNode] 
:  VARQMARKGen=VARQMARK 
	{
		// Create return CST Node
		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		special_variableReturnNode.setKind("special_variable");
	    // Create a CST Leaf
		if($VARQMARKGen != null) {
			Leaf VARQMARKGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARQMARK", $VARQMARKGen.text, VARQMARKGen.getCharPositionInLine(), VARQMARKGen.getLine());
			special_variableReturnNode.getChildren().add(VARQMARKGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$special_variable.returnNode = special_variableReturnNode;
	}
	|  VARDOLLARGen=VARDOLLAR 
	{
		// Create return CST Node
		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		special_variableReturnNode.setKind("special_variable");
	    // Create a CST Leaf
		if($VARDOLLARGen != null) {
			Leaf VARDOLLARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARDOLLAR", $VARDOLLARGen.text, VARDOLLARGen.getCharPositionInLine(), VARDOLLARGen.getLine());
			special_variableReturnNode.getChildren().add(VARDOLLARGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$special_variable.returnNode = special_variableReturnNode;
	}
	|  VAREXCLGen=VAREXCL 
	{
		// Create return CST Node
		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		special_variableReturnNode.setKind("special_variable");
	    // Create a CST Leaf
		if($VAREXCLGen != null) {
			Leaf VAREXCLGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VAREXCL", $VAREXCLGen.text, VAREXCLGen.getCharPositionInLine(), VAREXCLGen.getLine());
			special_variableReturnNode.getChildren().add(VAREXCLGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$special_variable.returnNode = special_variableReturnNode;
	}
	|  VARSTARGen=VARSTAR 
	{
		// Create return CST Node
		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		special_variableReturnNode.setKind("special_variable");
	    // Create a CST Leaf
		if($VARSTARGen != null) {
			Leaf VARSTARGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARSTAR", $VARSTARGen.text, VARSTARGen.getCharPositionInLine(), VARSTARGen.getLine());
			special_variableReturnNode.getChildren().add(VARSTARGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$special_variable.returnNode = special_variableReturnNode;
	}
	|  VARATGen=VARAT 
	{
		// Create return CST Node
		Node special_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		special_variableReturnNode.setKind("special_variable");
	    // Create a CST Leaf
		if($VARATGen != null) {
			Leaf VARATGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARAT", $VARATGen.text, VARATGen.getCharPositionInLine(), VARATGen.getLine());
			special_variableReturnNode.getChildren().add(VARATGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$special_variable.returnNode = special_variableReturnNode;
	}
	;
	
shell_variable returns [Node returnNode] 
:  VARHOMEGen=VARHOME 
	{
		// Create return CST Node
		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		shell_variableReturnNode.setKind("shell_variable");
	    // Create a CST Leaf
		if($VARHOMEGen != null) {
			Leaf VARHOMEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARHOME", $VARHOMEGen.text, VARHOMEGen.getCharPositionInLine(), VARHOMEGen.getLine());
			shell_variableReturnNode.getChildren().add(VARHOMEGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$shell_variable.returnNode = shell_variableReturnNode;
	}
	|  VARPATHGen=VARPATH 
	{
		// Create return CST Node
		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		shell_variableReturnNode.setKind("shell_variable");
	    // Create a CST Leaf
		if($VARPATHGen != null) {
			Leaf VARPATHGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARPATH", $VARPATHGen.text, VARPATHGen.getCharPositionInLine(), VARPATHGen.getLine());
			shell_variableReturnNode.getChildren().add(VARPATHGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$shell_variable.returnNode = shell_variableReturnNode;
	}
	|  VARPSGen=VARPS 
	{
		// Create return CST Node
		Node shell_variableReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		shell_variableReturnNode.setKind("shell_variable");
	    // Create a CST Leaf
		if($VARPSGen != null) {
			Leaf VARPSGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("VARPS", $VARPSGen.text, VARPSGen.getCharPositionInLine(), VARPSGen.getLine());
			shell_variableReturnNode.getChildren().add(VARPSGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$shell_variable.returnNode = shell_variableReturnNode;
	}
	;

id returns [Node returnNode] 
:  TK_0='HOME' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='PATH' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='PS' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	} 
	|  TK_0='update-desktop-database' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='which' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='configure' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='remove' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='install-docs' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='upgrade' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-gconf-defaults' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='register' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='unregister' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='OLD_DIR' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='SCHEMA_FILES' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='SCHEMA' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='purge' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='rm' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='rmdir' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='ignore-fail-on-non-empty' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-icon-cache' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='quiet' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='install-info' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-rc.d' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='ldconfig' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-menus' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='PYTHON' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='DIRLIST' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='scrollkeeper-update' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-mime-database' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-mime' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='dh_action' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='restart' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='start' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='invoke-rc.d' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='stop' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='inst' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='a+x' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='a-x' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='catalog' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='super' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-catalog' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='old' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='suidunregister' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-alternatives' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='install' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='x-window-manager' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='depmod' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='add' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='update-fonts-dir' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='md5sum' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='sed' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='s' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='p' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='ordcat' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='dpkg-query' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='Conffiles' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='db_purge' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='slave' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='x-window-manager.1.gz' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='suidregister' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='chown' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='chmod' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='read' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='dir' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='true' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='echo' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	} 
	|  TK_0='Preserving' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='user' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='changes' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='to' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='o' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='mv' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='line' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='mode' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='mkdir' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='group' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='dpkg' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='awk' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='py' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='print' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='c' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='xargs' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='n' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='set' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='*' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='q' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='i' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='r' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='x' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='d' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='f' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='e' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='a' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='F' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='L' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  TK_0='W' 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a Token CST Leaf	
	    if($TK_0 != null) {
			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", $TK_0.text, TK_0.getCharPositionInLine(), TK_0.getLine());
	 		idReturnNode.getChildren().add(TK_0Leaf);
	 	}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	|  IDGen=ID 
	{
		// Create return CST Node
		Node idReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
		idReturnNode.setKind("id");
	    // Create a CST Leaf
		if($IDGen != null) {
			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", $IDGen.text, IDGen.getCharPositionInLine(), IDGen.getLine());
			idReturnNode.getChildren().add(IDGenLeaf);
		}
		// Returns the Node with CST Leaves/Nodes
		$id.returnNode = idReturnNode;
	}
	;


NUMBER	: DIGIT ('a' .. 'z' | 'A' .. 'Z' | UNDERSCORE | MINUS |  DOT | '+' | DIGIT)*;

fragment DIGIT	: '0'..'9';

VARQMARK	: '$' QMARK 
	;
VARDOLLAR	: '$' '$'
	;

VARSTAR	: '$' '*'
	;

VARAT	:'$' '@'
	;

VAREXCL	: '$' EXCL
	;
	
VARHOME	: '$' 'HOME'
	;
	
VARPATH	: '$' 'PATH'
	;

VARPS	: '$' 'PS' NUMBER
	;

VARINPUT	: '$' NUMBER
	;

VAR	: '$' ( 'a' .. 'z' | 'A' .. 'Z' | MINUS | QMARK | DOT | '+' | LSBRACK | RSBRACK)( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | MINUS | QMARK |UNDERSCORE | DOT | '+' | LSBRACK | RSBRACK)*
	;

ID	: ('a'..'z' | 'A'..'Z' | '+')( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | UNDERSCORE | MINUS | QMARK | DOT | '+' | '*' | LSBRACK | RSBRACK)*
	;

PATHP	: SLASH 'p'
	;

PATHSS	: 's' SLASH
	;

PATHKVERS	: '/boot/System.map-' NUMBER
	;

PATHSCRIPT	: '/etc/init.d/' ID
	;

PATHPACK	: '/etc/menu-methods/' ID
	;

PATHOLDSCHEMA
	: '$OLD_DIR/$SCHEMA'
	;

PATHGCONFSCH
	: '/etc/gconf/schemas'
	;

PATHSUID
	: '/etc/suid.conf'
	;

PATHXWINDOW
	: '/usr/bin/x-window-manager'
	;

PATHEMACSINST
	: '/usr/lib/emacsen-common/emacs-package-install'
	;

PATHEMACSREM
	: '/usr/lib/emacsen-common/emacs-package-remove'
	;

PATHCOMPYTH
	: '/usr/lib/$PYTHON/compileall.py'
	;

PATHXMANAGER
	: '/usr/share/man/man1/x-window-manager.1.gz'
	;

PATHCONFMOD
	: '/usr/share/debconf/confmodule'
	;

PATHMIME
	: '/usr/share/mime'
	;

PATHDOCID	: '/usr/share/doc-base/' ID
	;

PATHNULL	: '/dev/null'
	;

PATHREL	: ((ID | VAR) SLASH)+
	;

PATH	: (ID | VAR | DDOT | DOT )? (SLASH (ID | VAR))+ SLASH?
	;

AMPERSAND 	: '&';

COLON	: ':';

VBAR	: '|';

UNDERSCORE : '_';	

QMARK 	: '?';

SHARP	: '#';

EXCL	: '!';	

MINUS	: '-';

SLASH	: '/';

BSLASH	: '\\';

DMINUS	: '--';

AND	: '&&';

OR	: '||';

LSBRACK	: '[';

RSBRACK	: ']';

LPAR	: '(';

RPAR	: ')';

LGRAF	: '{';

RGRAF	: '}';

DQUOTE	: '"';

DOT	: '.';

DDOT	:'..';

AP      	: '\u0060';

PSINGLE	: '\u0027';

EQU	: '=';

NOTEQU	: '!=';

DLESS	: '<<';

DGREAT	: '>>';

LESSAND	: '<&';

GREATAND	: '>&';

LESSGREAT	: '<>';

DLESSDASH	: '<<-';

CLOBBER	: '>|';

LESS	: '<';

GREAT	: '>';

ANDGREAT	: '&>';

DSEMI	: ';;';

TILDE	: '\u007E';

COMMENT
@init {
    skip();
}	
	: {getCharPositionInLine()>0}? =>  ( ' ' | '\t')+ SHARP ~(EXCL) (~('\n' | '\r' | DQUOTE))* '\r'?
	| {getCharPositionInLine()==0}? => ( ' ' | '\t')* SHARP  ~(EXCL | '\n') (~('\n' | '\r'))* '\r'? '\n'
	| {getCharPositionInLine()==0}? => ( ' ' | '\t')* SHARP   '\r'? '\n'
	;

BLANKLINE
	:  {getCharPositionInLine()==0}? => ( ' ' | '\t')* '\n' {skip();};

NOTNEWLINE	: (BSLASH '\n') {skip();};

WS 	: ( ' ' | '\t')+ { $channel=HIDDEN;};

